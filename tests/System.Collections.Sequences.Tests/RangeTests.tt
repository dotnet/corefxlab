<#@ template debug="false" hostSpecific="true" #>
<#@ assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<#@ include file="RangeConfig.ttinclude" #><# GenerateCopyrightHeader(); #>

using Xunit;

namespace System.Collections.Sequences.Tests
{
    /// <summary>
    /// Tests for the Range<T?> structure.
    /// </summary>
    public class RangeNullableTests
    {
        [Fact]
        public void IsEmpty()
        {
            Assert.Equal(false, new Range<Int32?>(null, null).IsEmpty());
            Assert.Equal(false, new Range<Int32?>(null, 1).IsEmpty());
            Assert.Equal(false, new Range<Int32?>(1, null).IsEmpty());
            Assert.Equal(true, new Range<Int32?>(1, 1).IsEmpty());
        }

        [Fact]
        public void IsNormalized()
        {
            Assert.Equal(true, new Range<Int32?>(null, null).IsNormalized());
            Assert.Equal(true, new Range<Int32?>(null, 1).IsNormalized());
            Assert.Equal(true, new Range<Int32?>(1, null).IsNormalized());
        }

        [Fact]
        public void Normalize()
        {
            var range = new Range<Int32?>(null, null).Normalize();
            Assert.Equal(null, range.From);
            Assert.Equal(null, range.To);

            range = new Range<Int32?>(null, 1).Normalize();
            Assert.Equal(null, range.From);
            Assert.Equal(1, range.To);

            range = new Range<Int32?>(1, null).Normalize();
            Assert.Equal(1, range.From);
            Assert.Equal(null, range.To);
        }

        [Fact]
        public void Contains()
        {
            var range = new Range<Int32?>(null, null);
            Assert.Equal(false, range.Contains(null));
            Assert.Equal(true, range.Contains(1));

            range = new Range<Int32?>(null, 1);
            Assert.Equal(false, range.Contains(null));
            Assert.Equal(true, range.Contains(0));
            Assert.Equal(false, range.Contains(1));

            range = new Range<Int32?>(1, null);
            Assert.Equal(false, range.Contains(null));
            Assert.Equal(false, range.Contains(0));
            Assert.Equal(true, range.Contains(1));
            Assert.Equal(true, range.Contains(2));
        }

        [Fact]
        public void Intersects()
        {
            var range1 = new Range<Int32?>(null, null);
            var range2 = new Range<Int32?>(null, null);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));

            range1 = new Range<Int32?>(null, 0);
            range2 = new Range<Int32?>(null, null);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));

            range1 = new Range<Int32?>(0, null);
            range2 = new Range<Int32?>(null, null);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));

            range1 = new Range<Int32?>(null, 0);
            range2 = new Range<Int32?>(0, null);
            Assert.Equal(false, range1.Intersects(range2));
            Assert.Equal(false, range2.Intersects(range1));

            range1 = new Range<Int32?>(null, 1);
            range2 = new Range<Int32?>(2, null);
            Assert.Equal(false, range1.Intersects(range2));
            Assert.Equal(false, range2.Intersects(range1));

            range1 = new Range<Int32?>(null, 2);
            range2 = new Range<Int32?>(1, null);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));
        }

        [Fact]
        public void Intersect()
        {
            var range1 = new Range<Int32?>(null, null);
            var range2 = new Range<Int32?>(null, null);
            var intersection1 = range1.Intersect(range2);
            var intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal(null, intersection1.From);
            Assert.Equal(null, intersection1.To);

            range1 = new Range<Int32?>(null, 0);
            range2 = new Range<Int32?>(null, null);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal(null, intersection1.From);
            Assert.Equal(0, intersection1.To);

            range1 = new Range<Int32?>(0, null);
            range2 = new Range<Int32?>(null, null);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal(0, intersection1.From);
            Assert.Equal(null, intersection1.To);

            range1 = new Range<Int32?>(null, 0);
            range2 = new Range<Int32?>(0, null);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(true, intersection1.IsEmpty());
            Assert.Equal(true, intersection2.IsEmpty());

            range1 = new Range<Int32?>(null, 1);
            range2 = new Range<Int32?>(2, null);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(true, intersection1.IsEmpty());
            Assert.Equal(true, intersection2.IsEmpty());

            range1 = new Range<Int32?>(null, 2);
            range2 = new Range<Int32?>(1, null);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal(1, intersection1.From);
            Assert.Equal(2, intersection1.To);
        }
    }
<#
    foreach (var testCase in TestCases)
    {
        var type = testCase.Type;
        var structName = $"Range<{type.Name}>";
        var testName = $"Range{type.Name}Tests";

        var i1 = GetValueInitializer(testCase.Value1);
        var i2 = GetValueInitializer(testCase.Value2);
        var i3 = GetValueInitializer(testCase.Value3);
        var i4 = GetValueInitializer(testCase.Value4);
#>

    /// <summary>
    /// Tests for the <#= structName #> structure.
    /// </summary>
    public class <#= testName #>
    {
        [Fact]
        public void IsEmpty()
        {
            Assert.Equal(true, new <#= structName #>(<#= i1 #>, <#= i1 #>).IsEmpty());
            Assert.Equal(false, new <#= structName #>(<#= i1 #>, <#= i2 #>).IsEmpty());
        }
        
<#
        if (HasLengthType(type))
        {
#>
        [Fact]
        public void Length()
        {
            var range = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            Assert.Equal<<#= GetLengthType(type).Name #>>(<#= GetValueInitializer(testCase.Length) #>, range.Length());
        }
<#
        }
#>

        [Fact]
        public void IsNormalized()
        {
            var range = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            Assert.Equal(true, range.IsNormalized());

            range = new <#= structName #>(<#= i2 #>, <#= i1 #>);
            Assert.Equal(false, range.IsNormalized());
        }

        [Fact]
        public void Normalize()
        {
            var range = new <#= structName #>(<#= i1 #>, <#= i2 #>).Normalize();
            Assert.Equal<<#= type.Name #>>(<#= i1 #>, range.From);
            Assert.Equal<<#= type.Name #>>(<#= i2 #>, range.To);

            range = new <#= structName #>(<#= i2 #>, <#= i1 #>).Normalize();
            Assert.Equal<<#= type.Name #>>(<#= i1 #>, range.From);
            Assert.Equal<<#= type.Name #>>(<#= i2 #>, range.To);
        }

        [Fact]
        public void Contains()
        {
            var range = new <#= structName #>(<#= i2 #>, <#= i2 #>);
            Assert.Equal(false, range.Contains(<#= i1 #>));
            Assert.Equal(false, range.Contains(<#= i2 #>));
            Assert.Equal(false, range.Contains(<#= i3 #>));

            range = new <#= structName #>(<#= i2 #>, <#= i3 #>);
            Assert.Equal(false, range.Contains(<#= i1 #>));
            Assert.Equal(true, range.Contains(<#= i2 #>));
            Assert.Equal(false, range.Contains(<#= i3 #>));
        }

        [Fact]
        public void Intersects()
        {
            var range1 = new <#= structName #>(<#= i1 #>, <#= i1 #>);
            var range2 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            Assert.Equal(false, range1.Intersects(range2));
            Assert.Equal(false, range2.Intersects(range1));

            range1 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            range2 = new <#= structName #>(<#= i2 #>, <#= i3 #>);
            Assert.Equal(false, range1.Intersects(range2));
            Assert.Equal(false, range2.Intersects(range1));
            
            range1 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            range2 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));
            
            range1 = new <#= structName #>(<#= i1 #>, <#= i4 #>);
            range2 = new <#= structName #>(<#= i2 #>, <#= i3 #>);
            Assert.Equal(true, range1.Intersects(range2));
            Assert.Equal(true, range2.Intersects(range1));
        }

        [Fact]
        public void Intersect()
        {
            var range1 = new <#= structName #>(<#= i1 #>, <#= i1 #>);
            var range2 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            var intersection1 = range1.Intersect(range2);
            var intersection2 = range2.Intersect(range1);
            Assert.Equal(true, intersection1.IsEmpty());
            Assert.Equal(true, intersection2.IsEmpty());

            range1 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            range2 = new <#= structName #>(<#= i2 #>, <#= i3 #>);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(true, intersection1.IsEmpty());
            Assert.Equal(true, intersection2.IsEmpty());
            
            range1 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            range2 = new <#= structName #>(<#= i1 #>, <#= i2 #>);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal<<#= type.Name #>>(<#= i1 #>, intersection1.From);
            Assert.Equal<<#= type.Name #>>(<#= i2 #>, intersection1.To);
            
            range1 = new <#= structName #>(<#= i1 #>, <#= i4 #>);
            range2 = new <#= structName #>(<#= i2 #>, <#= i3 #>);
            intersection1 = range1.Intersect(range2);
            intersection2 = range2.Intersect(range1);
            Assert.Equal(intersection1.From, intersection2.From);
            Assert.Equal(intersection1.To, intersection2.To);
            Assert.Equal<<#= type.Name #>>(<#= i2 #>, intersection1.From);
            Assert.Equal<<#= type.Name #>>(<#= i3 #>, intersection1.To);
        }
    }
<#
    }
#>
}
