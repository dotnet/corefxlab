// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// THIS FILE IS AUTOGENERATED

using System;
using System.Globalization;
using Xunit;
using System.Text;
using System.Buffers;
using System.Buffers.Text;

namespace System.Text.Formatting.Tests
{
    public partial class SystemTextFormattingTests
    {
        public void CheckByte(Byte value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void ByteFormatD()
        {
            
            // format D
            CheckByte(Byte.MinValue, "D");
            CheckByte(Byte.MaxValue, "D");
            CheckByte(0, "D");
            CheckByte(38, "D");
            CheckByte(60, "D");
            CheckByte(192, "D");
            CheckByte(0, "D");
            CheckByte(176, "D");
            
            // format D0
            CheckByte(Byte.MinValue, "D0");
            CheckByte(Byte.MaxValue, "D0");
            CheckByte(0, "D0");
            CheckByte(116, "D0");
            CheckByte(245, "D0");
            CheckByte(32, "D0");
            CheckByte(177, "D0");
            CheckByte(6, "D0");
            
            // format D1
            CheckByte(Byte.MinValue, "D1");
            CheckByte(Byte.MaxValue, "D1");
            CheckByte(0, "D1");
            CheckByte(5, "D1");
            CheckByte(46, "D1");
            CheckByte(21, "D1");
            CheckByte(184, "D1");
            CheckByte(243, "D1");
            
            // format D2
            CheckByte(Byte.MinValue, "D2");
            CheckByte(Byte.MaxValue, "D2");
            CheckByte(0, "D2");
            CheckByte(140, "D2");
            CheckByte(56, "D2");
            CheckByte(253, "D2");
            CheckByte(190, "D2");
            CheckByte(132, "D2");
            
            // format D3
            CheckByte(Byte.MinValue, "D3");
            CheckByte(Byte.MaxValue, "D3");
            CheckByte(0, "D3");
            CheckByte(175, "D3");
            CheckByte(47, "D3");
            CheckByte(254, "D3");
            CheckByte(96, "D3");
            CheckByte(179, "D3");
            
            // format D4
            CheckByte(Byte.MinValue, "D4");
            CheckByte(Byte.MaxValue, "D4");
            CheckByte(0, "D4");
            CheckByte(180, "D4");
            CheckByte(178, "D4");
            CheckByte(75, "D4");
            CheckByte(193, "D4");
            CheckByte(112, "D4");
            
            // format D5
            CheckByte(Byte.MinValue, "D5");
            CheckByte(Byte.MaxValue, "D5");
            CheckByte(0, "D5");
            CheckByte(93, "D5");
            CheckByte(219, "D5");
            CheckByte(107, "D5");
            CheckByte(15, "D5");
            CheckByte(209, "D5");
        }
        
        [Fact]
        public void ByteFormatd()
        {
            
            // format d
            CheckByte(Byte.MinValue, "d");
            CheckByte(Byte.MaxValue, "d");
            CheckByte(0, "d");
            CheckByte(25, "d");
            CheckByte(96, "d");
            CheckByte(224, "d");
            CheckByte(151, "d");
            CheckByte(193, "d");
            
            // format d0
            CheckByte(Byte.MinValue, "d0");
            CheckByte(Byte.MaxValue, "d0");
            CheckByte(0, "d0");
            CheckByte(51, "d0");
            CheckByte(137, "d0");
            CheckByte(67, "d0");
            CheckByte(111, "d0");
            CheckByte(36, "d0");
            
            // format d1
            CheckByte(Byte.MinValue, "d1");
            CheckByte(Byte.MaxValue, "d1");
            CheckByte(0, "d1");
            CheckByte(110, "d1");
            CheckByte(142, "d1");
            CheckByte(31, "d1");
            CheckByte(214, "d1");
            CheckByte(99, "d1");
            
            // format d2
            CheckByte(Byte.MinValue, "d2");
            CheckByte(Byte.MaxValue, "d2");
            CheckByte(0, "d2");
            CheckByte(150, "d2");
            CheckByte(106, "d2");
            CheckByte(96, "d2");
            CheckByte(54, "d2");
            CheckByte(108, "d2");
            
            // format d3
            CheckByte(Byte.MinValue, "d3");
            CheckByte(Byte.MaxValue, "d3");
            CheckByte(0, "d3");
            CheckByte(246, "d3");
            CheckByte(60, "d3");
            CheckByte(96, "d3");
            CheckByte(75, "d3");
            CheckByte(250, "d3");
            
            // format d4
            CheckByte(Byte.MinValue, "d4");
            CheckByte(Byte.MaxValue, "d4");
            CheckByte(0, "d4");
            CheckByte(193, "d4");
            CheckByte(170, "d4");
            CheckByte(93, "d4");
            CheckByte(64, "d4");
            CheckByte(168, "d4");
            
            // format d5
            CheckByte(Byte.MinValue, "d5");
            CheckByte(Byte.MaxValue, "d5");
            CheckByte(0, "d5");
            CheckByte(41, "d5");
            CheckByte(193, "d5");
            CheckByte(6, "d5");
            CheckByte(230, "d5");
            CheckByte(217, "d5");
        }
        
        [Fact]
        public void ByteFormatG()
        {
            
            // format G
            CheckByte(Byte.MinValue, "G");
            CheckByte(Byte.MaxValue, "G");
            CheckByte(0, "G");
            CheckByte(43, "G");
            CheckByte(87, "G");
            CheckByte(101, "G");
            CheckByte(251, "G");
            CheckByte(81, "G");
        }
        
        [Fact]
        public void ByteFormatN()
        {
            
            // format N
            CheckByte(Byte.MinValue, "N");
            CheckByte(Byte.MaxValue, "N");
            CheckByte(0, "N");
            CheckByte(37, "N");
            CheckByte(234, "N");
            CheckByte(142, "N");
            CheckByte(60, "N");
            CheckByte(69, "N");
            
            // format N0
            CheckByte(Byte.MinValue, "N0");
            CheckByte(Byte.MaxValue, "N0");
            CheckByte(0, "N0");
            CheckByte(38, "N0");
            CheckByte(146, "N0");
            CheckByte(116, "N0");
            CheckByte(94, "N0");
            CheckByte(217, "N0");
            
            // format N1
            CheckByte(Byte.MinValue, "N1");
            CheckByte(Byte.MaxValue, "N1");
            CheckByte(0, "N1");
            CheckByte(241, "N1");
            CheckByte(123, "N1");
            CheckByte(52, "N1");
            CheckByte(161, "N1");
            CheckByte(217, "N1");
            
            // format N2
            CheckByte(Byte.MinValue, "N2");
            CheckByte(Byte.MaxValue, "N2");
            CheckByte(0, "N2");
            CheckByte(219, "N2");
            CheckByte(0, "N2");
            CheckByte(149, "N2");
            CheckByte(156, "N2");
            CheckByte(0, "N2");
            
            // format N3
            CheckByte(Byte.MinValue, "N3");
            CheckByte(Byte.MaxValue, "N3");
            CheckByte(0, "N3");
            CheckByte(136, "N3");
            CheckByte(44, "N3");
            CheckByte(3, "N3");
            CheckByte(198, "N3");
            CheckByte(250, "N3");
            
            // format N4
            CheckByte(Byte.MinValue, "N4");
            CheckByte(Byte.MaxValue, "N4");
            CheckByte(0, "N4");
            CheckByte(171, "N4");
            CheckByte(136, "N4");
            CheckByte(56, "N4");
            CheckByte(251, "N4");
            CheckByte(55, "N4");
            
            // format N5
            CheckByte(Byte.MinValue, "N5");
            CheckByte(Byte.MaxValue, "N5");
            CheckByte(0, "N5");
            CheckByte(63, "N5");
            CheckByte(4, "N5");
            CheckByte(99, "N5");
            CheckByte(228, "N5");
            CheckByte(70, "N5");
        }
        
        [Fact]
        public void ByteFormatX()
        {
            
            // format X
            CheckByte(Byte.MinValue, "X");
            CheckByte(Byte.MaxValue, "X");
            CheckByte(0, "X");
            CheckByte(12, "X");
            CheckByte(173, "X");
            CheckByte(36, "X");
            CheckByte(6, "X");
            CheckByte(212, "X");
            
            // format X0
            CheckByte(Byte.MinValue, "X0");
            CheckByte(Byte.MaxValue, "X0");
            CheckByte(0, "X0");
            CheckByte(46, "X0");
            CheckByte(54, "X0");
            CheckByte(254, "X0");
            CheckByte(102, "X0");
            CheckByte(182, "X0");
            
            // format X1
            CheckByte(Byte.MinValue, "X1");
            CheckByte(Byte.MaxValue, "X1");
            CheckByte(0, "X1");
            CheckByte(173, "X1");
            CheckByte(141, "X1");
            CheckByte(99, "X1");
            CheckByte(12, "X1");
            CheckByte(252, "X1");
            
            // format X2
            CheckByte(Byte.MinValue, "X2");
            CheckByte(Byte.MaxValue, "X2");
            CheckByte(0, "X2");
            CheckByte(43, "X2");
            CheckByte(193, "X2");
            CheckByte(200, "X2");
            CheckByte(250, "X2");
            CheckByte(200, "X2");
            
            // format X3
            CheckByte(Byte.MinValue, "X3");
            CheckByte(Byte.MaxValue, "X3");
            CheckByte(0, "X3");
            CheckByte(248, "X3");
            CheckByte(231, "X3");
            CheckByte(199, "X3");
            CheckByte(64, "X3");
            CheckByte(152, "X3");
            
            // format X4
            CheckByte(Byte.MinValue, "X4");
            CheckByte(Byte.MaxValue, "X4");
            CheckByte(0, "X4");
            CheckByte(157, "X4");
            CheckByte(90, "X4");
            CheckByte(119, "X4");
            CheckByte(38, "X4");
            CheckByte(153, "X4");
            
            // format X5
            CheckByte(Byte.MinValue, "X5");
            CheckByte(Byte.MaxValue, "X5");
            CheckByte(0, "X5");
            CheckByte(236, "X5");
            CheckByte(23, "X5");
            CheckByte(78, "X5");
            CheckByte(91, "X5");
            CheckByte(205, "X5");
        }
        
        [Fact]
        public void ByteFormatx()
        {
            
            // format x
            CheckByte(Byte.MinValue, "x");
            CheckByte(Byte.MaxValue, "x");
            CheckByte(0, "x");
            CheckByte(46, "x");
            CheckByte(219, "x");
            CheckByte(142, "x");
            CheckByte(199, "x");
            CheckByte(209, "x");
            
            // format x0
            CheckByte(Byte.MinValue, "x0");
            CheckByte(Byte.MaxValue, "x0");
            CheckByte(0, "x0");
            CheckByte(82, "x0");
            CheckByte(44, "x0");
            CheckByte(155, "x0");
            CheckByte(16, "x0");
            CheckByte(76, "x0");
            
            // format x1
            CheckByte(Byte.MinValue, "x1");
            CheckByte(Byte.MaxValue, "x1");
            CheckByte(0, "x1");
            CheckByte(30, "x1");
            CheckByte(36, "x1");
            CheckByte(43, "x1");
            CheckByte(254, "x1");
            CheckByte(12, "x1");
            
            // format x2
            CheckByte(Byte.MinValue, "x2");
            CheckByte(Byte.MaxValue, "x2");
            CheckByte(0, "x2");
            CheckByte(125, "x2");
            CheckByte(59, "x2");
            CheckByte(103, "x2");
            CheckByte(28, "x2");
            CheckByte(77, "x2");
            
            // format x3
            CheckByte(Byte.MinValue, "x3");
            CheckByte(Byte.MaxValue, "x3");
            CheckByte(0, "x3");
            CheckByte(35, "x3");
            CheckByte(228, "x3");
            CheckByte(226, "x3");
            CheckByte(109, "x3");
            CheckByte(54, "x3");
            
            // format x4
            CheckByte(Byte.MinValue, "x4");
            CheckByte(Byte.MaxValue, "x4");
            CheckByte(0, "x4");
            CheckByte(210, "x4");
            CheckByte(189, "x4");
            CheckByte(216, "x4");
            CheckByte(203, "x4");
            CheckByte(200, "x4");
            
            // format x5
            CheckByte(Byte.MinValue, "x5");
            CheckByte(Byte.MaxValue, "x5");
            CheckByte(0, "x5");
            CheckByte(149, "x5");
            CheckByte(62, "x5");
            CheckByte(8, "x5");
            CheckByte(61, "x5");
            CheckByte(206, "x5");
        }
        
        public void CheckSByte(SByte value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void SByteFormatD()
        {
            
            // format D
            CheckSByte(SByte.MinValue, "D");
            CheckSByte(SByte.MaxValue, "D");
            CheckSByte(0, "D");
            CheckSByte(-50, "D");
            CheckSByte(-78, "D");
            CheckSByte(-127, "D");
            CheckSByte(-87, "D");
            CheckSByte(-11, "D");
            
            // format D0
            CheckSByte(SByte.MinValue, "D0");
            CheckSByte(SByte.MaxValue, "D0");
            CheckSByte(0, "D0");
            CheckSByte(75, "D0");
            CheckSByte(-53, "D0");
            CheckSByte(55, "D0");
            CheckSByte(115, "D0");
            CheckSByte(-7, "D0");
            
            // format D1
            CheckSByte(SByte.MinValue, "D1");
            CheckSByte(SByte.MaxValue, "D1");
            CheckSByte(0, "D1");
            CheckSByte(-8, "D1");
            CheckSByte(-81, "D1");
            CheckSByte(-8, "D1");
            CheckSByte(-103, "D1");
            CheckSByte(-100, "D1");
            
            // format D2
            CheckSByte(SByte.MinValue, "D2");
            CheckSByte(SByte.MaxValue, "D2");
            CheckSByte(0, "D2");
            CheckSByte(48, "D2");
            CheckSByte(47, "D2");
            CheckSByte(-78, "D2");
            CheckSByte(-114, "D2");
            CheckSByte(41, "D2");
            
            // format D3
            CheckSByte(SByte.MinValue, "D3");
            CheckSByte(SByte.MaxValue, "D3");
            CheckSByte(0, "D3");
            CheckSByte(-56, "D3");
            CheckSByte(120, "D3");
            CheckSByte(-95, "D3");
            CheckSByte(16, "D3");
            CheckSByte(125, "D3");
            
            // format D4
            CheckSByte(SByte.MinValue, "D4");
            CheckSByte(SByte.MaxValue, "D4");
            CheckSByte(0, "D4");
            CheckSByte(19, "D4");
            CheckSByte(-45, "D4");
            CheckSByte(78, "D4");
            CheckSByte(-58, "D4");
            CheckSByte(54, "D4");
            
            // format D5
            CheckSByte(SByte.MinValue, "D5");
            CheckSByte(SByte.MaxValue, "D5");
            CheckSByte(0, "D5");
            CheckSByte(95, "D5");
            CheckSByte(-100, "D5");
            CheckSByte(108, "D5");
            CheckSByte(-81, "D5");
            CheckSByte(60, "D5");
        }
        
        [Fact]
        public void SByteFormatd()
        {
            
            // format d
            CheckSByte(SByte.MinValue, "d");
            CheckSByte(SByte.MaxValue, "d");
            CheckSByte(0, "d");
            CheckSByte(-54, "d");
            CheckSByte(-71, "d");
            CheckSByte(-67, "d");
            CheckSByte(37, "d");
            CheckSByte(0, "d");
            
            // format d0
            CheckSByte(SByte.MinValue, "d0");
            CheckSByte(SByte.MaxValue, "d0");
            CheckSByte(0, "d0");
            CheckSByte(87, "d0");
            CheckSByte(-83, "d0");
            CheckSByte(110, "d0");
            CheckSByte(114, "d0");
            CheckSByte(61, "d0");
            
            // format d1
            CheckSByte(SByte.MinValue, "d1");
            CheckSByte(SByte.MaxValue, "d1");
            CheckSByte(0, "d1");
            CheckSByte(35, "d1");
            CheckSByte(-59, "d1");
            CheckSByte(62, "d1");
            CheckSByte(46, "d1");
            CheckSByte(-104, "d1");
            
            // format d2
            CheckSByte(SByte.MinValue, "d2");
            CheckSByte(SByte.MaxValue, "d2");
            CheckSByte(0, "d2");
            CheckSByte(101, "d2");
            CheckSByte(-117, "d2");
            CheckSByte(121, "d2");
            CheckSByte(18, "d2");
            CheckSByte(5, "d2");
            
            // format d3
            CheckSByte(SByte.MinValue, "d3");
            CheckSByte(SByte.MaxValue, "d3");
            CheckSByte(0, "d3");
            CheckSByte(-43, "d3");
            CheckSByte(-112, "d3");
            CheckSByte(-16, "d3");
            CheckSByte(-86, "d3");
            CheckSByte(97, "d3");
            
            // format d4
            CheckSByte(SByte.MinValue, "d4");
            CheckSByte(SByte.MaxValue, "d4");
            CheckSByte(0, "d4");
            CheckSByte(-8, "d4");
            CheckSByte(-5, "d4");
            CheckSByte(-15, "d4");
            CheckSByte(-68, "d4");
            CheckSByte(25, "d4");
            
            // format d5
            CheckSByte(SByte.MinValue, "d5");
            CheckSByte(SByte.MaxValue, "d5");
            CheckSByte(0, "d5");
            CheckSByte(-36, "d5");
            CheckSByte(-63, "d5");
            CheckSByte(-56, "d5");
            CheckSByte(-37, "d5");
            CheckSByte(80, "d5");
        }
        
        [Fact]
        public void SByteFormatG()
        {
            
            // format G
            CheckSByte(SByte.MinValue, "G");
            CheckSByte(SByte.MaxValue, "G");
            CheckSByte(0, "G");
            CheckSByte(-9, "G");
            CheckSByte(-15, "G");
            CheckSByte(11, "G");
            CheckSByte(12, "G");
            CheckSByte(81, "G");
        }
        
        [Fact]
        public void SByteFormatN()
        {
            
            // format N
            CheckSByte(SByte.MinValue, "N");
            CheckSByte(SByte.MaxValue, "N");
            CheckSByte(0, "N");
            CheckSByte(-102, "N");
            CheckSByte(-119, "N");
            CheckSByte(-82, "N");
            CheckSByte(82, "N");
            CheckSByte(-38, "N");
            
            // format N0
            CheckSByte(SByte.MinValue, "N0");
            CheckSByte(SByte.MaxValue, "N0");
            CheckSByte(0, "N0");
            CheckSByte(-51, "N0");
            CheckSByte(19, "N0");
            CheckSByte(-97, "N0");
            CheckSByte(-82, "N0");
            CheckSByte(79, "N0");
            
            // format N1
            CheckSByte(SByte.MinValue, "N1");
            CheckSByte(SByte.MaxValue, "N1");
            CheckSByte(0, "N1");
            CheckSByte(83, "N1");
            CheckSByte(-94, "N1");
            CheckSByte(-39, "N1");
            CheckSByte(41, "N1");
            CheckSByte(-26, "N1");
            
            // format N2
            CheckSByte(SByte.MinValue, "N2");
            CheckSByte(SByte.MaxValue, "N2");
            CheckSByte(0, "N2");
            CheckSByte(-70, "N2");
            CheckSByte(72, "N2");
            CheckSByte(-109, "N2");
            CheckSByte(66, "N2");
            CheckSByte(-120, "N2");
            
            // format N3
            CheckSByte(SByte.MinValue, "N3");
            CheckSByte(SByte.MaxValue, "N3");
            CheckSByte(0, "N3");
            CheckSByte(-37, "N3");
            CheckSByte(59, "N3");
            CheckSByte(49, "N3");
            CheckSByte(-40, "N3");
            CheckSByte(-31, "N3");
            
            // format N4
            CheckSByte(SByte.MinValue, "N4");
            CheckSByte(SByte.MaxValue, "N4");
            CheckSByte(0, "N4");
            CheckSByte(-31, "N4");
            CheckSByte(124, "N4");
            CheckSByte(-30, "N4");
            CheckSByte(92, "N4");
            CheckSByte(31, "N4");
            
            // format N5
            CheckSByte(SByte.MinValue, "N5");
            CheckSByte(SByte.MaxValue, "N5");
            CheckSByte(0, "N5");
            CheckSByte(-12, "N5");
            CheckSByte(-1, "N5");
            CheckSByte(-20, "N5");
            CheckSByte(64, "N5");
            CheckSByte(-22, "N5");
        }
        
        [Fact]
        public void SByteFormatX()
        {
            
            // format X
            CheckSByte(SByte.MinValue, "X");
            CheckSByte(SByte.MaxValue, "X");
            CheckSByte(0, "X");
            CheckSByte(-53, "X");
            CheckSByte(97, "X");
            CheckSByte(29, "X");
            CheckSByte(79, "X");
            CheckSByte(20, "X");
            
            // format X0
            CheckSByte(SByte.MinValue, "X0");
            CheckSByte(SByte.MaxValue, "X0");
            CheckSByte(0, "X0");
            CheckSByte(99, "X0");
            CheckSByte(-36, "X0");
            CheckSByte(-61, "X0");
            CheckSByte(-20, "X0");
            CheckSByte(69, "X0");
            
            // format X1
            CheckSByte(SByte.MinValue, "X1");
            CheckSByte(SByte.MaxValue, "X1");
            CheckSByte(0, "X1");
            CheckSByte(-71, "X1");
            CheckSByte(102, "X1");
            CheckSByte(30, "X1");
            CheckSByte(115, "X1");
            CheckSByte(22, "X1");
            
            // format X2
            CheckSByte(SByte.MinValue, "X2");
            CheckSByte(SByte.MaxValue, "X2");
            CheckSByte(0, "X2");
            CheckSByte(45, "X2");
            CheckSByte(-35, "X2");
            CheckSByte(72, "X2");
            CheckSByte(4, "X2");
            CheckSByte(-10, "X2");
            
            // format X3
            CheckSByte(SByte.MinValue, "X3");
            CheckSByte(SByte.MaxValue, "X3");
            CheckSByte(0, "X3");
            CheckSByte(-34, "X3");
            CheckSByte(-41, "X3");
            CheckSByte(84, "X3");
            CheckSByte(-15, "X3");
            CheckSByte(119, "X3");
            
            // format X4
            CheckSByte(SByte.MinValue, "X4");
            CheckSByte(SByte.MaxValue, "X4");
            CheckSByte(0, "X4");
            CheckSByte(-48, "X4");
            CheckSByte(-79, "X4");
            CheckSByte(-63, "X4");
            CheckSByte(13, "X4");
            CheckSByte(-38, "X4");
            
            // format X5
            CheckSByte(SByte.MinValue, "X5");
            CheckSByte(SByte.MaxValue, "X5");
            CheckSByte(0, "X5");
            CheckSByte(-44, "X5");
            CheckSByte(53, "X5");
            CheckSByte(24, "X5");
            CheckSByte(-66, "X5");
            CheckSByte(-101, "X5");
        }
        
        [Fact]
        public void SByteFormatx()
        {
            
            // format x
            CheckSByte(SByte.MinValue, "x");
            CheckSByte(SByte.MaxValue, "x");
            CheckSByte(0, "x");
            CheckSByte(-41, "x");
            CheckSByte(-85, "x");
            CheckSByte(-62, "x");
            CheckSByte(-82, "x");
            CheckSByte(-93, "x");
            
            // format x0
            CheckSByte(SByte.MinValue, "x0");
            CheckSByte(SByte.MaxValue, "x0");
            CheckSByte(0, "x0");
            CheckSByte(126, "x0");
            CheckSByte(-8, "x0");
            CheckSByte(-60, "x0");
            CheckSByte(18, "x0");
            CheckSByte(-89, "x0");
            
            // format x1
            CheckSByte(SByte.MinValue, "x1");
            CheckSByte(SByte.MaxValue, "x1");
            CheckSByte(0, "x1");
            CheckSByte(-6, "x1");
            CheckSByte(-34, "x1");
            CheckSByte(-18, "x1");
            CheckSByte(-58, "x1");
            CheckSByte(113, "x1");
            
            // format x2
            CheckSByte(SByte.MinValue, "x2");
            CheckSByte(SByte.MaxValue, "x2");
            CheckSByte(0, "x2");
            CheckSByte(-106, "x2");
            CheckSByte(54, "x2");
            CheckSByte(102, "x2");
            CheckSByte(-55, "x2");
            CheckSByte(-116, "x2");
            
            // format x3
            CheckSByte(SByte.MinValue, "x3");
            CheckSByte(SByte.MaxValue, "x3");
            CheckSByte(0, "x3");
            CheckSByte(115, "x3");
            CheckSByte(-116, "x3");
            CheckSByte(-84, "x3");
            CheckSByte(86, "x3");
            CheckSByte(-60, "x3");
            
            // format x4
            CheckSByte(SByte.MinValue, "x4");
            CheckSByte(SByte.MaxValue, "x4");
            CheckSByte(0, "x4");
            CheckSByte(50, "x4");
            CheckSByte(-102, "x4");
            CheckSByte(52, "x4");
            CheckSByte(-111, "x4");
            CheckSByte(-15, "x4");
            
            // format x5
            CheckSByte(SByte.MinValue, "x5");
            CheckSByte(SByte.MaxValue, "x5");
            CheckSByte(0, "x5");
            CheckSByte(3, "x5");
            CheckSByte(-51, "x5");
            CheckSByte(-33, "x5");
            CheckSByte(88, "x5");
            CheckSByte(-66, "x5");
        }
        
        public void CheckUInt16(UInt16 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt16FormatD()
        {
            
            // format D
            CheckUInt16(UInt16.MinValue, "D");
            CheckUInt16(UInt16.MaxValue, "D");
            CheckUInt16(0, "D");
            CheckUInt16(33469, "D");
            CheckUInt16(6930, "D");
            CheckUInt16(39442, "D");
            CheckUInt16(24891, "D");
            CheckUInt16(30737, "D");
            
            // format D0
            CheckUInt16(UInt16.MinValue, "D0");
            CheckUInt16(UInt16.MaxValue, "D0");
            CheckUInt16(0, "D0");
            CheckUInt16(58842, "D0");
            CheckUInt16(4850, "D0");
            CheckUInt16(16953, "D0");
            CheckUInt16(18948, "D0");
            CheckUInt16(32357, "D0");
            
            // format D1
            CheckUInt16(UInt16.MinValue, "D1");
            CheckUInt16(UInt16.MaxValue, "D1");
            CheckUInt16(0, "D1");
            CheckUInt16(61838, "D1");
            CheckUInt16(49869, "D1");
            CheckUInt16(64453, "D1");
            CheckUInt16(39791, "D1");
            CheckUInt16(17529, "D1");
            
            // format D2
            CheckUInt16(UInt16.MinValue, "D2");
            CheckUInt16(UInt16.MaxValue, "D2");
            CheckUInt16(0, "D2");
            CheckUInt16(40358, "D2");
            CheckUInt16(52783, "D2");
            CheckUInt16(20346, "D2");
            CheckUInt16(12965, "D2");
            CheckUInt16(9923, "D2");
            
            // format D3
            CheckUInt16(UInt16.MinValue, "D3");
            CheckUInt16(UInt16.MaxValue, "D3");
            CheckUInt16(0, "D3");
            CheckUInt16(19349, "D3");
            CheckUInt16(65384, "D3");
            CheckUInt16(27683, "D3");
            CheckUInt16(59959, "D3");
            CheckUInt16(28985, "D3");
            
            // format D4
            CheckUInt16(UInt16.MinValue, "D4");
            CheckUInt16(UInt16.MaxValue, "D4");
            CheckUInt16(0, "D4");
            CheckUInt16(58551, "D4");
            CheckUInt16(50005, "D4");
            CheckUInt16(13133, "D4");
            CheckUInt16(8577, "D4");
            CheckUInt16(41780, "D4");
            
            // format D5
            CheckUInt16(UInt16.MinValue, "D5");
            CheckUInt16(UInt16.MaxValue, "D5");
            CheckUInt16(0, "D5");
            CheckUInt16(11331, "D5");
            CheckUInt16(65286, "D5");
            CheckUInt16(38129, "D5");
            CheckUInt16(1883, "D5");
            CheckUInt16(28541, "D5");
        }
        
        [Fact]
        public void UInt16Formatd()
        {
            
            // format d
            CheckUInt16(UInt16.MinValue, "d");
            CheckUInt16(UInt16.MaxValue, "d");
            CheckUInt16(0, "d");
            CheckUInt16(64429, "d");
            CheckUInt16(7352, "d");
            CheckUInt16(34377, "d");
            CheckUInt16(53699, "d");
            CheckUInt16(9822, "d");
            
            // format d0
            CheckUInt16(UInt16.MinValue, "d0");
            CheckUInt16(UInt16.MaxValue, "d0");
            CheckUInt16(0, "d0");
            CheckUInt16(57700, "d0");
            CheckUInt16(51843, "d0");
            CheckUInt16(57897, "d0");
            CheckUInt16(22704, "d0");
            CheckUInt16(21233, "d0");
            
            // format d1
            CheckUInt16(UInt16.MinValue, "d1");
            CheckUInt16(UInt16.MaxValue, "d1");
            CheckUInt16(0, "d1");
            CheckUInt16(61431, "d1");
            CheckUInt16(7811, "d1");
            CheckUInt16(6704, "d1");
            CheckUInt16(52536, "d1");
            CheckUInt16(54262, "d1");
            
            // format d2
            CheckUInt16(UInt16.MinValue, "d2");
            CheckUInt16(UInt16.MaxValue, "d2");
            CheckUInt16(0, "d2");
            CheckUInt16(46613, "d2");
            CheckUInt16(65218, "d2");
            CheckUInt16(11549, "d2");
            CheckUInt16(45778, "d2");
            CheckUInt16(62328, "d2");
            
            // format d3
            CheckUInt16(UInt16.MinValue, "d3");
            CheckUInt16(UInt16.MaxValue, "d3");
            CheckUInt16(0, "d3");
            CheckUInt16(33619, "d3");
            CheckUInt16(44781, "d3");
            CheckUInt16(45017, "d3");
            CheckUInt16(61441, "d3");
            CheckUInt16(37720, "d3");
            
            // format d4
            CheckUInt16(UInt16.MinValue, "d4");
            CheckUInt16(UInt16.MaxValue, "d4");
            CheckUInt16(0, "d4");
            CheckUInt16(8837, "d4");
            CheckUInt16(57252, "d4");
            CheckUInt16(8376, "d4");
            CheckUInt16(42703, "d4");
            CheckUInt16(21025, "d4");
            
            // format d5
            CheckUInt16(UInt16.MinValue, "d5");
            CheckUInt16(UInt16.MaxValue, "d5");
            CheckUInt16(0, "d5");
            CheckUInt16(62086, "d5");
            CheckUInt16(11739, "d5");
            CheckUInt16(62570, "d5");
            CheckUInt16(11250, "d5");
            CheckUInt16(18635, "d5");
        }
        
        [Fact]
        public void UInt16FormatG()
        {
            
            // format G
            CheckUInt16(UInt16.MinValue, "G");
            CheckUInt16(UInt16.MaxValue, "G");
            CheckUInt16(0, "G");
            CheckUInt16(33006, "G");
            CheckUInt16(18405, "G");
            CheckUInt16(32181, "G");
            CheckUInt16(3143, "G");
            CheckUInt16(17757, "G");
        }
        
        [Fact]
        public void UInt16FormatN()
        {
            
            // format N
            CheckUInt16(UInt16.MinValue, "N");
            CheckUInt16(UInt16.MaxValue, "N");
            CheckUInt16(0, "N");
            CheckUInt16(33041, "N");
            CheckUInt16(7486, "N");
            CheckUInt16(4978, "N");
            CheckUInt16(38725, "N");
            CheckUInt16(33088, "N");
            
            // format N0
            CheckUInt16(UInt16.MinValue, "N0");
            CheckUInt16(UInt16.MaxValue, "N0");
            CheckUInt16(0, "N0");
            CheckUInt16(50740, "N0");
            CheckUInt16(43300, "N0");
            CheckUInt16(26131, "N0");
            CheckUInt16(19850, "N0");
            CheckUInt16(60701, "N0");
            
            // format N1
            CheckUInt16(UInt16.MinValue, "N1");
            CheckUInt16(UInt16.MaxValue, "N1");
            CheckUInt16(0, "N1");
            CheckUInt16(11648, "N1");
            CheckUInt16(53737, "N1");
            CheckUInt16(57885, "N1");
            CheckUInt16(5089, "N1");
            CheckUInt16(60456, "N1");
            
            // format N2
            CheckUInt16(UInt16.MinValue, "N2");
            CheckUInt16(UInt16.MaxValue, "N2");
            CheckUInt16(0, "N2");
            CheckUInt16(19647, "N2");
            CheckUInt16(27869, "N2");
            CheckUInt16(38471, "N2");
            CheckUInt16(15979, "N2");
            CheckUInt16(984, "N2");
            
            // format N3
            CheckUInt16(UInt16.MinValue, "N3");
            CheckUInt16(UInt16.MaxValue, "N3");
            CheckUInt16(0, "N3");
            CheckUInt16(448, "N3");
            CheckUInt16(43467, "N3");
            CheckUInt16(15194, "N3");
            CheckUInt16(1678, "N3");
            CheckUInt16(24682, "N3");
            
            // format N4
            CheckUInt16(UInt16.MinValue, "N4");
            CheckUInt16(UInt16.MaxValue, "N4");
            CheckUInt16(0, "N4");
            CheckUInt16(49692, "N4");
            CheckUInt16(10776, "N4");
            CheckUInt16(60989, "N4");
            CheckUInt16(33901, "N4");
            CheckUInt16(21256, "N4");
            
            // format N5
            CheckUInt16(UInt16.MinValue, "N5");
            CheckUInt16(UInt16.MaxValue, "N5");
            CheckUInt16(0, "N5");
            CheckUInt16(28207, "N5");
            CheckUInt16(33036, "N5");
            CheckUInt16(8405, "N5");
            CheckUInt16(28021, "N5");
            CheckUInt16(29287, "N5");
        }
        
        [Fact]
        public void UInt16FormatX()
        {
            
            // format X
            CheckUInt16(UInt16.MinValue, "X");
            CheckUInt16(UInt16.MaxValue, "X");
            CheckUInt16(0, "X");
            CheckUInt16(26133, "X");
            CheckUInt16(39802, "X");
            CheckUInt16(6292, "X");
            CheckUInt16(28352, "X");
            CheckUInt16(52514, "X");
            
            // format X0
            CheckUInt16(UInt16.MinValue, "X0");
            CheckUInt16(UInt16.MaxValue, "X0");
            CheckUInt16(0, "X0");
            CheckUInt16(31071, "X0");
            CheckUInt16(31120, "X0");
            CheckUInt16(54061, "X0");
            CheckUInt16(47536, "X0");
            CheckUInt16(9377, "X0");
            
            // format X1
            CheckUInt16(UInt16.MinValue, "X1");
            CheckUInt16(UInt16.MaxValue, "X1");
            CheckUInt16(0, "X1");
            CheckUInt16(8349, "X1");
            CheckUInt16(19389, "X1");
            CheckUInt16(57480, "X1");
            CheckUInt16(16328, "X1");
            CheckUInt16(64522, "X1");
            
            // format X2
            CheckUInt16(UInt16.MinValue, "X2");
            CheckUInt16(UInt16.MaxValue, "X2");
            CheckUInt16(0, "X2");
            CheckUInt16(5136, "X2");
            CheckUInt16(45469, "X2");
            CheckUInt16(16202, "X2");
            CheckUInt16(2158, "X2");
            CheckUInt16(17309, "X2");
            
            // format X3
            CheckUInt16(UInt16.MinValue, "X3");
            CheckUInt16(UInt16.MaxValue, "X3");
            CheckUInt16(0, "X3");
            CheckUInt16(55108, "X3");
            CheckUInt16(57827, "X3");
            CheckUInt16(3300, "X3");
            CheckUInt16(14043, "X3");
            CheckUInt16(48931, "X3");
            
            // format X4
            CheckUInt16(UInt16.MinValue, "X4");
            CheckUInt16(UInt16.MaxValue, "X4");
            CheckUInt16(0, "X4");
            CheckUInt16(39964, "X4");
            CheckUInt16(47846, "X4");
            CheckUInt16(57765, "X4");
            CheckUInt16(64128, "X4");
            CheckUInt16(32494, "X4");
            
            // format X5
            CheckUInt16(UInt16.MinValue, "X5");
            CheckUInt16(UInt16.MaxValue, "X5");
            CheckUInt16(0, "X5");
            CheckUInt16(44146, "X5");
            CheckUInt16(45331, "X5");
            CheckUInt16(29864, "X5");
            CheckUInt16(41337, "X5");
            CheckUInt16(34323, "X5");
        }
        
        [Fact]
        public void UInt16Formatx()
        {
            
            // format x
            CheckUInt16(UInt16.MinValue, "x");
            CheckUInt16(UInt16.MaxValue, "x");
            CheckUInt16(0, "x");
            CheckUInt16(45380, "x");
            CheckUInt16(21577, "x");
            CheckUInt16(10118, "x");
            CheckUInt16(28999, "x");
            CheckUInt16(35448, "x");
            
            // format x0
            CheckUInt16(UInt16.MinValue, "x0");
            CheckUInt16(UInt16.MaxValue, "x0");
            CheckUInt16(0, "x0");
            CheckUInt16(34863, "x0");
            CheckUInt16(54941, "x0");
            CheckUInt16(33193, "x0");
            CheckUInt16(57836, "x0");
            CheckUInt16(16332, "x0");
            
            // format x1
            CheckUInt16(UInt16.MinValue, "x1");
            CheckUInt16(UInt16.MaxValue, "x1");
            CheckUInt16(0, "x1");
            CheckUInt16(30302, "x1");
            CheckUInt16(18830, "x1");
            CheckUInt16(44661, "x1");
            CheckUInt16(34913, "x1");
            CheckUInt16(16120, "x1");
            
            // format x2
            CheckUInt16(UInt16.MinValue, "x2");
            CheckUInt16(UInt16.MaxValue, "x2");
            CheckUInt16(0, "x2");
            CheckUInt16(48273, "x2");
            CheckUInt16(16834, "x2");
            CheckUInt16(6246, "x2");
            CheckUInt16(10711, "x2");
            CheckUInt16(39713, "x2");
            
            // format x3
            CheckUInt16(UInt16.MinValue, "x3");
            CheckUInt16(UInt16.MaxValue, "x3");
            CheckUInt16(0, "x3");
            CheckUInt16(33841, "x3");
            CheckUInt16(36502, "x3");
            CheckUInt16(57783, "x3");
            CheckUInt16(44956, "x3");
            CheckUInt16(12550, "x3");
            
            // format x4
            CheckUInt16(UInt16.MinValue, "x4");
            CheckUInt16(UInt16.MaxValue, "x4");
            CheckUInt16(0, "x4");
            CheckUInt16(48760, "x4");
            CheckUInt16(38889, "x4");
            CheckUInt16(55467, "x4");
            CheckUInt16(15041, "x4");
            CheckUInt16(30765, "x4");
            
            // format x5
            CheckUInt16(UInt16.MinValue, "x5");
            CheckUInt16(UInt16.MaxValue, "x5");
            CheckUInt16(0, "x5");
            CheckUInt16(28553, "x5");
            CheckUInt16(55060, "x5");
            CheckUInt16(16142, "x5");
            CheckUInt16(47540, "x5");
            CheckUInt16(19142, "x5");
        }
        
        public void CheckInt16(Int16 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int16FormatD()
        {
            
            // format D
            CheckInt16(Int16.MinValue, "D");
            CheckInt16(Int16.MaxValue, "D");
            CheckInt16(0, "D");
            CheckInt16(16325, "D");
            CheckInt16(2582, "D");
            CheckInt16(19969, "D");
            CheckInt16(-523, "D");
            CheckInt16(15213, "D");
            
            // format D0
            CheckInt16(Int16.MinValue, "D0");
            CheckInt16(Int16.MaxValue, "D0");
            CheckInt16(0, "D0");
            CheckInt16(-32601, "D0");
            CheckInt16(-8134, "D0");
            CheckInt16(-21769, "D0");
            CheckInt16(30478, "D0");
            CheckInt16(-14140, "D0");
            
            // format D1
            CheckInt16(Int16.MinValue, "D1");
            CheckInt16(Int16.MaxValue, "D1");
            CheckInt16(0, "D1");
            CheckInt16(-11635, "D1");
            CheckInt16(-29583, "D1");
            CheckInt16(-9916, "D1");
            CheckInt16(15240, "D1");
            CheckInt16(16988, "D1");
            
            // format D2
            CheckInt16(Int16.MinValue, "D2");
            CheckInt16(Int16.MaxValue, "D2");
            CheckInt16(0, "D2");
            CheckInt16(-5456, "D2");
            CheckInt16(6316, "D2");
            CheckInt16(-13616, "D2");
            CheckInt16(-31144, "D2");
            CheckInt16(-32287, "D2");
            
            // format D3
            CheckInt16(Int16.MinValue, "D3");
            CheckInt16(Int16.MaxValue, "D3");
            CheckInt16(0, "D3");
            CheckInt16(-23891, "D3");
            CheckInt16(-3440, "D3");
            CheckInt16(-2071, "D3");
            CheckInt16(-16319, "D3");
            CheckInt16(19454, "D3");
            
            // format D4
            CheckInt16(Int16.MinValue, "D4");
            CheckInt16(Int16.MaxValue, "D4");
            CheckInt16(0, "D4");
            CheckInt16(28740, "D4");
            CheckInt16(32240, "D4");
            CheckInt16(-14617, "D4");
            CheckInt16(-5698, "D4");
            CheckInt16(20546, "D4");
            
            // format D5
            CheckInt16(Int16.MinValue, "D5");
            CheckInt16(Int16.MaxValue, "D5");
            CheckInt16(0, "D5");
            CheckInt16(8009, "D5");
            CheckInt16(-30080, "D5");
            CheckInt16(29887, "D5");
            CheckInt16(-16998, "D5");
            CheckInt16(-207, "D5");
        }
        
        [Fact]
        public void Int16Formatd()
        {
            
            // format d
            CheckInt16(Int16.MinValue, "d");
            CheckInt16(Int16.MaxValue, "d");
            CheckInt16(0, "d");
            CheckInt16(-19846, "d");
            CheckInt16(-3137, "d");
            CheckInt16(6768, "d");
            CheckInt16(-4503, "d");
            CheckInt16(6777, "d");
            
            // format d0
            CheckInt16(Int16.MinValue, "d0");
            CheckInt16(Int16.MaxValue, "d0");
            CheckInt16(0, "d0");
            CheckInt16(-23561, "d0");
            CheckInt16(-7265, "d0");
            CheckInt16(27304, "d0");
            CheckInt16(-6440, "d0");
            CheckInt16(24183, "d0");
            
            // format d1
            CheckInt16(Int16.MinValue, "d1");
            CheckInt16(Int16.MaxValue, "d1");
            CheckInt16(0, "d1");
            CheckInt16(12807, "d1");
            CheckInt16(-16732, "d1");
            CheckInt16(-25309, "d1");
            CheckInt16(-1948, "d1");
            CheckInt16(-29315, "d1");
            
            // format d2
            CheckInt16(Int16.MinValue, "d2");
            CheckInt16(Int16.MaxValue, "d2");
            CheckInt16(0, "d2");
            CheckInt16(22236, "d2");
            CheckInt16(3140, "d2");
            CheckInt16(-18250, "d2");
            CheckInt16(14290, "d2");
            CheckInt16(-22503, "d2");
            
            // format d3
            CheckInt16(Int16.MinValue, "d3");
            CheckInt16(Int16.MaxValue, "d3");
            CheckInt16(0, "d3");
            CheckInt16(-13003, "d3");
            CheckInt16(-28115, "d3");
            CheckInt16(3520, "d3");
            CheckInt16(12789, "d3");
            CheckInt16(19239, "d3");
            
            // format d4
            CheckInt16(Int16.MinValue, "d4");
            CheckInt16(Int16.MaxValue, "d4");
            CheckInt16(0, "d4");
            CheckInt16(-32074, "d4");
            CheckInt16(-26286, "d4");
            CheckInt16(16695, "d4");
            CheckInt16(-22836, "d4");
            CheckInt16(10617, "d4");
            
            // format d5
            CheckInt16(Int16.MinValue, "d5");
            CheckInt16(Int16.MaxValue, "d5");
            CheckInt16(0, "d5");
            CheckInt16(-14323, "d5");
            CheckInt16(-26704, "d5");
            CheckInt16(-25687, "d5");
            CheckInt16(-17322, "d5");
            CheckInt16(4066, "d5");
        }
        
        [Fact]
        public void Int16FormatG()
        {
            
            // format G
            CheckInt16(Int16.MinValue, "G");
            CheckInt16(Int16.MaxValue, "G");
            CheckInt16(0, "G");
            CheckInt16(30448, "G");
            CheckInt16(32315, "G");
            CheckInt16(23653, "G");
            CheckInt16(-5155, "G");
            CheckInt16(24041, "G");
        }
        
        [Fact]
        public void Int16FormatN()
        {
            
            // format N
            CheckInt16(Int16.MinValue, "N");
            CheckInt16(Int16.MaxValue, "N");
            CheckInt16(0, "N");
            CheckInt16(16141, "N");
            CheckInt16(2022, "N");
            CheckInt16(-28399, "N");
            CheckInt16(-7736, "N");
            CheckInt16(-26121, "N");
            
            // format N0
            CheckInt16(Int16.MinValue, "N0");
            CheckInt16(Int16.MaxValue, "N0");
            CheckInt16(0, "N0");
            CheckInt16(12704, "N0");
            CheckInt16(24781, "N0");
            CheckInt16(20097, "N0");
            CheckInt16(-9151, "N0");
            CheckInt16(31077, "N0");
            
            // format N1
            CheckInt16(Int16.MinValue, "N1");
            CheckInt16(Int16.MaxValue, "N1");
            CheckInt16(0, "N1");
            CheckInt16(-27899, "N1");
            CheckInt16(20936, "N1");
            CheckInt16(-17171, "N1");
            CheckInt16(-27263, "N1");
            CheckInt16(-19972, "N1");
            
            // format N2
            CheckInt16(Int16.MinValue, "N2");
            CheckInt16(Int16.MaxValue, "N2");
            CheckInt16(0, "N2");
            CheckInt16(-24500, "N2");
            CheckInt16(26109, "N2");
            CheckInt16(26745, "N2");
            CheckInt16(9025, "N2");
            CheckInt16(6083, "N2");
            
            // format N3
            CheckInt16(Int16.MinValue, "N3");
            CheckInt16(Int16.MaxValue, "N3");
            CheckInt16(0, "N3");
            CheckInt16(-30044, "N3");
            CheckInt16(8806, "N3");
            CheckInt16(17372, "N3");
            CheckInt16(15709, "N3");
            CheckInt16(5738, "N3");
            
            // format N4
            CheckInt16(Int16.MinValue, "N4");
            CheckInt16(Int16.MaxValue, "N4");
            CheckInt16(0, "N4");
            CheckInt16(6743, "N4");
            CheckInt16(-23813, "N4");
            CheckInt16(24779, "N4");
            CheckInt16(26753, "N4");
            CheckInt16(-26997, "N4");
            
            // format N5
            CheckInt16(Int16.MinValue, "N5");
            CheckInt16(Int16.MaxValue, "N5");
            CheckInt16(0, "N5");
            CheckInt16(22687, "N5");
            CheckInt16(12253, "N5");
            CheckInt16(19671, "N5");
            CheckInt16(23015, "N5");
            CheckInt16(-5877, "N5");
        }
        
        [Fact]
        public void Int16FormatX()
        {
            
            // format X
            CheckInt16(Int16.MinValue, "X");
            CheckInt16(Int16.MaxValue, "X");
            CheckInt16(0, "X");
            CheckInt16(17741, "X");
            CheckInt16(-32484, "X");
            CheckInt16(-21512, "X");
            CheckInt16(6141, "X");
            CheckInt16(-26234, "X");
            
            // format X0
            CheckInt16(Int16.MinValue, "X0");
            CheckInt16(Int16.MaxValue, "X0");
            CheckInt16(0, "X0");
            CheckInt16(-24089, "X0");
            CheckInt16(-13617, "X0");
            CheckInt16(-6922, "X0");
            CheckInt16(-21146, "X0");
            CheckInt16(5748, "X0");
            
            // format X1
            CheckInt16(Int16.MinValue, "X1");
            CheckInt16(Int16.MaxValue, "X1");
            CheckInt16(0, "X1");
            CheckInt16(-2493, "X1");
            CheckInt16(23233, "X1");
            CheckInt16(-31193, "X1");
            CheckInt16(-30118, "X1");
            CheckInt16(-4203, "X1");
            
            // format X2
            CheckInt16(Int16.MinValue, "X2");
            CheckInt16(Int16.MaxValue, "X2");
            CheckInt16(0, "X2");
            CheckInt16(-28429, "X2");
            CheckInt16(-27199, "X2");
            CheckInt16(-18141, "X2");
            CheckInt16(21528, "X2");
            CheckInt16(21317, "X2");
            
            // format X3
            CheckInt16(Int16.MinValue, "X3");
            CheckInt16(Int16.MaxValue, "X3");
            CheckInt16(0, "X3");
            CheckInt16(-25434, "X3");
            CheckInt16(17417, "X3");
            CheckInt16(-11342, "X3");
            CheckInt16(19293, "X3");
            CheckInt16(-97, "X3");
            
            // format X4
            CheckInt16(Int16.MinValue, "X4");
            CheckInt16(Int16.MaxValue, "X4");
            CheckInt16(0, "X4");
            CheckInt16(3749, "X4");
            CheckInt16(-32766, "X4");
            CheckInt16(26111, "X4");
            CheckInt16(-14923, "X4");
            CheckInt16(-24379, "X4");
            
            // format X5
            CheckInt16(Int16.MinValue, "X5");
            CheckInt16(Int16.MaxValue, "X5");
            CheckInt16(0, "X5");
            CheckInt16(-7386, "X5");
            CheckInt16(-31504, "X5");
            CheckInt16(-7419, "X5");
            CheckInt16(11381, "X5");
            CheckInt16(-4946, "X5");
        }
        
        [Fact]
        public void Int16Formatx()
        {
            
            // format x
            CheckInt16(Int16.MinValue, "x");
            CheckInt16(Int16.MaxValue, "x");
            CheckInt16(0, "x");
            CheckInt16(-24784, "x");
            CheckInt16(14852, "x");
            CheckInt16(-12165, "x");
            CheckInt16(2491, "x");
            CheckInt16(-2596, "x");
            
            // format x0
            CheckInt16(Int16.MinValue, "x0");
            CheckInt16(Int16.MaxValue, "x0");
            CheckInt16(0, "x0");
            CheckInt16(16339, "x0");
            CheckInt16(-17040, "x0");
            CheckInt16(5750, "x0");
            CheckInt16(-22808, "x0");
            CheckInt16(-24538, "x0");
            
            // format x1
            CheckInt16(Int16.MinValue, "x1");
            CheckInt16(Int16.MaxValue, "x1");
            CheckInt16(0, "x1");
            CheckInt16(16276, "x1");
            CheckInt16(-25389, "x1");
            CheckInt16(22128, "x1");
            CheckInt16(-1813, "x1");
            CheckInt16(-31336, "x1");
            
            // format x2
            CheckInt16(Int16.MinValue, "x2");
            CheckInt16(Int16.MaxValue, "x2");
            CheckInt16(0, "x2");
            CheckInt16(17118, "x2");
            CheckInt16(-2374, "x2");
            CheckInt16(30910, "x2");
            CheckInt16(-31070, "x2");
            CheckInt16(-13212, "x2");
            
            // format x3
            CheckInt16(Int16.MinValue, "x3");
            CheckInt16(Int16.MaxValue, "x3");
            CheckInt16(0, "x3");
            CheckInt16(-32445, "x3");
            CheckInt16(11624, "x3");
            CheckInt16(-8038, "x3");
            CheckInt16(-26530, "x3");
            CheckInt16(2784, "x3");
            
            // format x4
            CheckInt16(Int16.MinValue, "x4");
            CheckInt16(Int16.MaxValue, "x4");
            CheckInt16(0, "x4");
            CheckInt16(-24092, "x4");
            CheckInt16(-6961, "x4");
            CheckInt16(-24768, "x4");
            CheckInt16(-29536, "x4");
            CheckInt16(-19635, "x4");
            
            // format x5
            CheckInt16(Int16.MinValue, "x5");
            CheckInt16(Int16.MaxValue, "x5");
            CheckInt16(0, "x5");
            CheckInt16(-3758, "x5");
            CheckInt16(-2116, "x5");
            CheckInt16(-9808, "x5");
            CheckInt16(7594, "x5");
            CheckInt16(-12188, "x5");
        }
        
        public void CheckUInt32(UInt32 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt32FormatD()
        {
            
            // format D
            CheckUInt32(UInt32.MinValue, "D");
            CheckUInt32(UInt32.MaxValue, "D");
            CheckUInt32(0, "D");
            CheckUInt32(729213789, "D");
            CheckUInt32(1654825975, "D");
            CheckUInt32(1471414376, "D");
            CheckUInt32(790527484, "D");
            CheckUInt32(163112133, "D");
            
            // format D0
            CheckUInt32(UInt32.MinValue, "D0");
            CheckUInt32(UInt32.MaxValue, "D0");
            CheckUInt32(0, "D0");
            CheckUInt32(1872432339, "D0");
            CheckUInt32(382300904, "D0");
            CheckUInt32(375719024, "D0");
            CheckUInt32(1436265686, "D0");
            CheckUInt32(1610969219, "D0");
            
            // format D1
            CheckUInt32(UInt32.MinValue, "D1");
            CheckUInt32(UInt32.MaxValue, "D1");
            CheckUInt32(0, "D1");
            CheckUInt32(954792541, "D1");
            CheckUInt32(348677594, "D1");
            CheckUInt32(915026399, "D1");
            CheckUInt32(537849796, "D1");
            CheckUInt32(787668470, "D1");
            
            // format D2
            CheckUInt32(UInt32.MinValue, "D2");
            CheckUInt32(UInt32.MaxValue, "D2");
            CheckUInt32(0, "D2");
            CheckUInt32(1983249801, "D2");
            CheckUInt32(102297252, "D2");
            CheckUInt32(775001052, "D2");
            CheckUInt32(805881441, "D2");
            CheckUInt32(901089862, "D2");
            
            // format D3
            CheckUInt32(UInt32.MinValue, "D3");
            CheckUInt32(UInt32.MaxValue, "D3");
            CheckUInt32(0, "D3");
            CheckUInt32(954447276, "D3");
            CheckUInt32(750088757, "D3");
            CheckUInt32(470740892, "D3");
            CheckUInt32(2137856234, "D3");
            CheckUInt32(704369110, "D3");
            
            // format D4
            CheckUInt32(UInt32.MinValue, "D4");
            CheckUInt32(UInt32.MaxValue, "D4");
            CheckUInt32(0, "D4");
            CheckUInt32(763518239, "D4");
            CheckUInt32(253207750, "D4");
            CheckUInt32(1156256309, "D4");
            CheckUInt32(2043520471, "D4");
            CheckUInt32(1466540324, "D4");
            
            // format D5
            CheckUInt32(UInt32.MinValue, "D5");
            CheckUInt32(UInt32.MaxValue, "D5");
            CheckUInt32(0, "D5");
            CheckUInt32(602692228, "D5");
            CheckUInt32(1636909444, "D5");
            CheckUInt32(476253928, "D5");
            CheckUInt32(339977407, "D5");
            CheckUInt32(1465197681, "D5");
        }
        
        [Fact]
        public void UInt32Formatd()
        {
            
            // format d
            CheckUInt32(UInt32.MinValue, "d");
            CheckUInt32(UInt32.MaxValue, "d");
            CheckUInt32(0, "d");
            CheckUInt32(2127369182, "d");
            CheckUInt32(1672054066, "d");
            CheckUInt32(1296105929, "d");
            CheckUInt32(2040025699, "d");
            CheckUInt32(915895489, "d");
            
            // format d0
            CheckUInt32(UInt32.MinValue, "d0");
            CheckUInt32(UInt32.MaxValue, "d0");
            CheckUInt32(0, "d0");
            CheckUInt32(1775792020, "d0");
            CheckUInt32(1078958036, "d0");
            CheckUInt32(1521592696, "d0");
            CheckUInt32(740929323, "d0");
            CheckUInt32(210219759, "d0");
            
            // format d1
            CheckUInt32(UInt32.MinValue, "d1");
            CheckUInt32(UInt32.MaxValue, "d1");
            CheckUInt32(0, "d1");
            CheckUInt32(2083136547, "d1");
            CheckUInt32(2078117421, "d1");
            CheckUInt32(1871811508, "d1");
            CheckUInt32(1465755602, "d1");
            CheckUInt32(594603426, "d1");
            
            // format d2
            CheckUInt32(UInt32.MinValue, "d2");
            CheckUInt32(UInt32.MaxValue, "d2");
            CheckUInt32(0, "d2");
            CheckUInt32(848346458, "d2");
            CheckUInt32(229425210, "d2");
            CheckUInt32(2093992361, "d2");
            CheckUInt32(421542736, "d2");
            CheckUInt32(1867436148, "d2");
            
            // format d3
            CheckUInt32(UInt32.MinValue, "d3");
            CheckUInt32(UInt32.MaxValue, "d3");
            CheckUInt32(0, "d3");
            CheckUInt32(2126608679, "d3");
            CheckUInt32(1184085083, "d3");
            CheckUInt32(1481041789, "d3");
            CheckUInt32(86158374, "d3");
            CheckUInt32(1547077541, "d3");
            
            // format d4
            CheckUInt32(UInt32.MinValue, "d4");
            CheckUInt32(UInt32.MaxValue, "d4");
            CheckUInt32(0, "d4");
            CheckUInt32(1619224589, "d4");
            CheckUInt32(1373528242, "d4");
            CheckUInt32(479682200, "d4");
            CheckUInt32(2117209009, "d4");
            CheckUInt32(1008276991, "d4");
            
            // format d5
            CheckUInt32(UInt32.MinValue, "d5");
            CheckUInt32(UInt32.MaxValue, "d5");
            CheckUInt32(0, "d5");
            CheckUInt32(1465366744, "d5");
            CheckUInt32(2019907313, "d5");
            CheckUInt32(575048992, "d5");
            CheckUInt32(1220135762, "d5");
            CheckUInt32(807782935, "d5");
        }
        
        [Fact]
        public void UInt32FormatG()
        {
            
            // format G
            CheckUInt32(UInt32.MinValue, "G");
            CheckUInt32(UInt32.MaxValue, "G");
            CheckUInt32(0, "G");
            CheckUInt32(311195735, "G");
            CheckUInt32(953674970, "G");
            CheckUInt32(882459000, "G");
            CheckUInt32(2037469599, "G");
            CheckUInt32(1272781489, "G");
        }
        
        [Fact]
        public void UInt32FormatN()
        {
            
            // format N
            CheckUInt32(UInt32.MinValue, "N");
            CheckUInt32(UInt32.MaxValue, "N");
            CheckUInt32(0, "N");
            CheckUInt32(2022972887, "N");
            CheckUInt32(1375979708, "N");
            CheckUInt32(1877295216, "N");
            CheckUInt32(1927636475, "N");
            CheckUInt32(768716210, "N");
            
            // format N0
            CheckUInt32(UInt32.MinValue, "N0");
            CheckUInt32(UInt32.MaxValue, "N0");
            CheckUInt32(0, "N0");
            CheckUInt32(832884465, "N0");
            CheckUInt32(528879889, "N0");
            CheckUInt32(1837984354, "N0");
            CheckUInt32(1448917045, "N0");
            CheckUInt32(618193866, "N0");
            
            // format N1
            CheckUInt32(UInt32.MinValue, "N1");
            CheckUInt32(UInt32.MaxValue, "N1");
            CheckUInt32(0, "N1");
            CheckUInt32(373267018, "N1");
            CheckUInt32(1690400730, "N1");
            CheckUInt32(54711192, "N1");
            CheckUInt32(620024906, "N1");
            CheckUInt32(1486072649, "N1");
            
            // format N2
            CheckUInt32(UInt32.MinValue, "N2");
            CheckUInt32(UInt32.MaxValue, "N2");
            CheckUInt32(0, "N2");
            CheckUInt32(943284099, "N2");
            CheckUInt32(191012277, "N2");
            CheckUInt32(1209947555, "N2");
            CheckUInt32(492948158, "N2");
            CheckUInt32(1444154547, "N2");
            
            // format N3
            CheckUInt32(UInt32.MinValue, "N3");
            CheckUInt32(UInt32.MaxValue, "N3");
            CheckUInt32(0, "N3");
            CheckUInt32(402263778, "N3");
            CheckUInt32(599275836, "N3");
            CheckUInt32(1551867334, "N3");
            CheckUInt32(1880135979, "N3");
            CheckUInt32(892336662, "N3");
            
            // format N4
            CheckUInt32(UInt32.MinValue, "N4");
            CheckUInt32(UInt32.MaxValue, "N4");
            CheckUInt32(0, "N4");
            CheckUInt32(63229234, "N4");
            CheckUInt32(1503068429, "N4");
            CheckUInt32(651675746, "N4");
            CheckUInt32(657972667, "N4");
            CheckUInt32(283407691, "N4");
            
            // format N5
            CheckUInt32(UInt32.MinValue, "N5");
            CheckUInt32(UInt32.MaxValue, "N5");
            CheckUInt32(0, "N5");
            CheckUInt32(2042155135, "N5");
            CheckUInt32(1494449857, "N5");
            CheckUInt32(56522762, "N5");
            CheckUInt32(1296244894, "N5");
            CheckUInt32(1991946908, "N5");
        }
        
        [Fact]
        public void UInt32FormatX()
        {
            
            // format X
            CheckUInt32(UInt32.MinValue, "X");
            CheckUInt32(UInt32.MaxValue, "X");
            CheckUInt32(0, "X");
            CheckUInt32(750628971, "X");
            CheckUInt32(1454273514, "X");
            CheckUInt32(1700888961, "X");
            CheckUInt32(1464925811, "X");
            CheckUInt32(714193076, "X");
            
            // format X0
            CheckUInt32(UInt32.MinValue, "X0");
            CheckUInt32(UInt32.MaxValue, "X0");
            CheckUInt32(0, "X0");
            CheckUInt32(1090344700, "X0");
            CheckUInt32(1683027535, "X0");
            CheckUInt32(1178248802, "X0");
            CheckUInt32(1499015143, "X0");
            CheckUInt32(635009973, "X0");
            
            // format X1
            CheckUInt32(UInt32.MinValue, "X1");
            CheckUInt32(UInt32.MaxValue, "X1");
            CheckUInt32(0, "X1");
            CheckUInt32(1922449661, "X1");
            CheckUInt32(1965196121, "X1");
            CheckUInt32(2102507733, "X1");
            CheckUInt32(1881546760, "X1");
            CheckUInt32(2011982483, "X1");
            
            // format X2
            CheckUInt32(UInt32.MinValue, "X2");
            CheckUInt32(UInt32.MaxValue, "X2");
            CheckUInt32(0, "X2");
            CheckUInt32(120183458, "X2");
            CheckUInt32(1891211062, "X2");
            CheckUInt32(389510842, "X2");
            CheckUInt32(593315052, "X2");
            CheckUInt32(870517711, "X2");
            
            // format X3
            CheckUInt32(UInt32.MinValue, "X3");
            CheckUInt32(UInt32.MaxValue, "X3");
            CheckUInt32(0, "X3");
            CheckUInt32(1423697051, "X3");
            CheckUInt32(1971596021, "X3");
            CheckUInt32(2144642884, "X3");
            CheckUInt32(1035299813, "X3");
            CheckUInt32(705486975, "X3");
            
            // format X4
            CheckUInt32(UInt32.MinValue, "X4");
            CheckUInt32(UInt32.MaxValue, "X4");
            CheckUInt32(0, "X4");
            CheckUInt32(1477299683, "X4");
            CheckUInt32(2024687790, "X4");
            CheckUInt32(1180011687, "X4");
            CheckUInt32(1165509354, "X4");
            CheckUInt32(723522378, "X4");
            
            // format X5
            CheckUInt32(UInt32.MinValue, "X5");
            CheckUInt32(UInt32.MaxValue, "X5");
            CheckUInt32(0, "X5");
            CheckUInt32(1026300808, "X5");
            CheckUInt32(1633877968, "X5");
            CheckUInt32(905949945, "X5");
            CheckUInt32(775561645, "X5");
            CheckUInt32(735443678, "X5");
        }
        
        [Fact]
        public void UInt32Formatx()
        {
            
            // format x
            CheckUInt32(UInt32.MinValue, "x");
            CheckUInt32(UInt32.MaxValue, "x");
            CheckUInt32(0, "x");
            CheckUInt32(1636494232, "x");
            CheckUInt32(637606963, "x");
            CheckUInt32(1892505391, "x");
            CheckUInt32(1926238729, "x");
            CheckUInt32(353809847, "x");
            
            // format x0
            CheckUInt32(UInt32.MinValue, "x0");
            CheckUInt32(UInt32.MaxValue, "x0");
            CheckUInt32(0, "x0");
            CheckUInt32(866719890, "x0");
            CheckUInt32(1568510681, "x0");
            CheckUInt32(52852191, "x0");
            CheckUInt32(1245126006, "x0");
            CheckUInt32(1117370648, "x0");
            
            // format x1
            CheckUInt32(UInt32.MinValue, "x1");
            CheckUInt32(UInt32.MaxValue, "x1");
            CheckUInt32(0, "x1");
            CheckUInt32(245516760, "x1");
            CheckUInt32(1548044343, "x1");
            CheckUInt32(917612633, "x1");
            CheckUInt32(793473831, "x1");
            CheckUInt32(163224233, "x1");
            
            // format x2
            CheckUInt32(UInt32.MinValue, "x2");
            CheckUInt32(UInt32.MaxValue, "x2");
            CheckUInt32(0, "x2");
            CheckUInt32(150944073, "x2");
            CheckUInt32(1104939015, "x2");
            CheckUInt32(1610691357, "x2");
            CheckUInt32(425727183, "x2");
            CheckUInt32(568249857, "x2");
            
            // format x3
            CheckUInt32(UInt32.MinValue, "x3");
            CheckUInt32(UInt32.MaxValue, "x3");
            CheckUInt32(0, "x3");
            CheckUInt32(926516597, "x3");
            CheckUInt32(1457114277, "x3");
            CheckUInt32(665589148, "x3");
            CheckUInt32(759438835, "x3");
            CheckUInt32(1384377040, "x3");
            
            // format x4
            CheckUInt32(UInt32.MinValue, "x4");
            CheckUInt32(UInt32.MaxValue, "x4");
            CheckUInt32(0, "x4");
            CheckUInt32(1213140557, "x4");
            CheckUInt32(503015848, "x4");
            CheckUInt32(12739448, "x4");
            CheckUInt32(775492765, "x4");
            CheckUInt32(1756192812, "x4");
            
            // format x5
            CheckUInt32(UInt32.MinValue, "x5");
            CheckUInt32(UInt32.MaxValue, "x5");
            CheckUInt32(0, "x5");
            CheckUInt32(288571693, "x5");
            CheckUInt32(1059246176, "x5");
            CheckUInt32(1326946088, "x5");
            CheckUInt32(1146103082, "x5");
            CheckUInt32(375488251, "x5");
        }
        
        public void CheckInt32(Int32 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int32FormatD()
        {
            
            // format D
            CheckInt32(Int32.MinValue, "D");
            CheckInt32(Int32.MaxValue, "D");
            CheckInt32(0, "D");
            CheckInt32(-1630060144, "D");
            CheckInt32(610755759, "D");
            CheckInt32(3797820, "D");
            CheckInt32(-1918743832, "D");
            CheckInt32(-2065412814, "D");
            
            // format D0
            CheckInt32(Int32.MinValue, "D0");
            CheckInt32(Int32.MaxValue, "D0");
            CheckInt32(0, "D0");
            CheckInt32(2076738986, "D0");
            CheckInt32(386537855, "D0");
            CheckInt32(-572578307, "D0");
            CheckInt32(-23186613, "D0");
            CheckInt32(-207311790, "D0");
            
            // format D1
            CheckInt32(Int32.MinValue, "D1");
            CheckInt32(Int32.MaxValue, "D1");
            CheckInt32(0, "D1");
            CheckInt32(-179379957, "D1");
            CheckInt32(1133066555, "D1");
            CheckInt32(-1288152939, "D1");
            CheckInt32(1555771232, "D1");
            CheckInt32(1636416840, "D1");
            
            // format D2
            CheckInt32(Int32.MinValue, "D2");
            CheckInt32(Int32.MaxValue, "D2");
            CheckInt32(0, "D2");
            CheckInt32(1333754230, "D2");
            CheckInt32(-1918993200, "D2");
            CheckInt32(-680647740, "D2");
            CheckInt32(-494183257, "D2");
            CheckInt32(421929361, "D2");
            
            // format D3
            CheckInt32(Int32.MinValue, "D3");
            CheckInt32(Int32.MaxValue, "D3");
            CheckInt32(0, "D3");
            CheckInt32(1155256413, "D3");
            CheckInt32(747659982, "D3");
            CheckInt32(-1455121702, "D3");
            CheckInt32(-116477994, "D3");
            CheckInt32(202914459, "D3");
            
            // format D4
            CheckInt32(Int32.MinValue, "D4");
            CheckInt32(Int32.MaxValue, "D4");
            CheckInt32(0, "D4");
            CheckInt32(-265385084, "D4");
            CheckInt32(1119634299, "D4");
            CheckInt32(196108295, "D4");
            CheckInt32(1013122761, "D4");
            CheckInt32(-1098835917, "D4");
            
            // format D5
            CheckInt32(Int32.MinValue, "D5");
            CheckInt32(Int32.MaxValue, "D5");
            CheckInt32(0, "D5");
            CheckInt32(446898783, "D5");
            CheckInt32(1410583683, "D5");
            CheckInt32(-1273699634, "D5");
            CheckInt32(1335565605, "D5");
            CheckInt32(321637382, "D5");
        }
        
        [Fact]
        public void Int32Formatd()
        {
            
            // format d
            CheckInt32(Int32.MinValue, "d");
            CheckInt32(Int32.MaxValue, "d");
            CheckInt32(0, "d");
            CheckInt32(-1574662187, "d");
            CheckInt32(-58293402, "d");
            CheckInt32(801154313, "d");
            CheckInt32(1371841478, "d");
            CheckInt32(1234223635, "d");
            
            // format d0
            CheckInt32(Int32.MinValue, "d0");
            CheckInt32(Int32.MaxValue, "d0");
            CheckInt32(0, "d0");
            CheckInt32(247226049, "d0");
            CheckInt32(1221928612, "d0");
            CheckInt32(563413872, "d0");
            CheckInt32(1248947601, "d0");
            CheckInt32(-221877286, "d0");
            
            // format d1
            CheckInt32(Int32.MinValue, "d1");
            CheckInt32(Int32.MaxValue, "d1");
            CheckInt32(0, "d1");
            CheckInt32(-1286599289, "d1");
            CheckInt32(272350236, "d1");
            CheckInt32(266164702, "d1");
            CheckInt32(1294497361, "d1");
            CheckInt32(1173252633, "d1");
            
            // format d2
            CheckInt32(Int32.MinValue, "d2");
            CheckInt32(Int32.MaxValue, "d2");
            CheckInt32(0, "d2");
            CheckInt32(-917983443, "d2");
            CheckInt32(-836300593, "d2");
            CheckInt32(260168833, "d2");
            CheckInt32(520730013, "d2");
            CheckInt32(-536021689, "d2");
            
            // format d3
            CheckInt32(Int32.MinValue, "d3");
            CheckInt32(Int32.MaxValue, "d3");
            CheckInt32(0, "d3");
            CheckInt32(286200847, "d3");
            CheckInt32(982154081, "d3");
            CheckInt32(1540351375, "d3");
            CheckInt32(-1419455793, "d3");
            CheckInt32(673199983, "d3");
            
            // format d4
            CheckInt32(Int32.MinValue, "d4");
            CheckInt32(Int32.MaxValue, "d4");
            CheckInt32(0, "d4");
            CheckInt32(606693129, "d4");
            CheckInt32(-1894158641, "d4");
            CheckInt32(1281224262, "d4");
            CheckInt32(-527133871, "d4");
            CheckInt32(1375567244, "d4");
            
            // format d5
            CheckInt32(Int32.MinValue, "d5");
            CheckInt32(Int32.MaxValue, "d5");
            CheckInt32(0, "d5");
            CheckInt32(474768840, "d5");
            CheckInt32(-1807828952, "d5");
            CheckInt32(-264104098, "d5");
            CheckInt32(-1709016317, "d5");
            CheckInt32(1688900634, "d5");
        }
        
        [Fact]
        public void Int32FormatG()
        {
            
            // format G
            CheckInt32(Int32.MinValue, "G");
            CheckInt32(Int32.MaxValue, "G");
            CheckInt32(0, "G");
            CheckInt32(-234000805, "G");
            CheckInt32(45795509, "G");
            CheckInt32(-883888212, "G");
            CheckInt32(1590618748, "G");
            CheckInt32(-1388967856, "G");
        }
        
        [Fact]
        public void Int32FormatN()
        {
            
            // format N
            CheckInt32(Int32.MinValue, "N");
            CheckInt32(Int32.MaxValue, "N");
            CheckInt32(0, "N");
            CheckInt32(1389383512, "N");
            CheckInt32(985329788, "N");
            CheckInt32(-1140271487, "N");
            CheckInt32(-401250726, "N");
            CheckInt32(-648833943, "N");
            
            // format N0
            CheckInt32(Int32.MinValue, "N0");
            CheckInt32(Int32.MaxValue, "N0");
            CheckInt32(0, "N0");
            CheckInt32(1086250753, "N0");
            CheckInt32(-249818756, "N0");
            CheckInt32(-99556901, "N0");
            CheckInt32(519179521, "N0");
            CheckInt32(-1800127931, "N0");
            
            // format N1
            CheckInt32(Int32.MinValue, "N1");
            CheckInt32(Int32.MaxValue, "N1");
            CheckInt32(0, "N1");
            CheckInt32(-487532859, "N1");
            CheckInt32(-2067580876, "N1");
            CheckInt32(284968011, "N1");
            CheckInt32(-707952901, "N1");
            CheckInt32(415143761, "N1");
            
            // format N2
            CheckInt32(Int32.MinValue, "N2");
            CheckInt32(Int32.MaxValue, "N2");
            CheckInt32(0, "N2");
            CheckInt32(-1706237901, "N2");
            CheckInt32(34973609, "N2");
            CheckInt32(897898790, "N2");
            CheckInt32(875465563, "N2");
            CheckInt32(-494471185, "N2");
            
            // format N3
            CheckInt32(Int32.MinValue, "N3");
            CheckInt32(Int32.MaxValue, "N3");
            CheckInt32(0, "N3");
            CheckInt32(1845533256, "N3");
            CheckInt32(790520114, "N3");
            CheckInt32(11262142, "N3");
            CheckInt32(1521226495, "N3");
            CheckInt32(-1695478294, "N3");
            
            // format N4
            CheckInt32(Int32.MinValue, "N4");
            CheckInt32(Int32.MaxValue, "N4");
            CheckInt32(0, "N4");
            CheckInt32(-587894942, "N4");
            CheckInt32(702957576, "N4");
            CheckInt32(-1877049970, "N4");
            CheckInt32(-1912885922, "N4");
            CheckInt32(-369315809, "N4");
            
            // format N5
            CheckInt32(Int32.MinValue, "N5");
            CheckInt32(Int32.MaxValue, "N5");
            CheckInt32(0, "N5");
            CheckInt32(-1603765782, "N5");
            CheckInt32(-1269608506, "N5");
            CheckInt32(-1699525230, "N5");
            CheckInt32(-1209298589, "N5");
            CheckInt32(1645807885, "N5");
        }
        
        [Fact]
        public void Int32FormatX()
        {
            
            // format X
            CheckInt32(Int32.MinValue, "X");
            CheckInt32(Int32.MaxValue, "X");
            CheckInt32(0, "X");
            CheckInt32(-1844907227, "X");
            CheckInt32(1000423877, "X");
            CheckInt32(-1743001434, "X");
            CheckInt32(1337065266, "X");
            CheckInt32(-1711908593, "X");
            
            // format X0
            CheckInt32(Int32.MinValue, "X0");
            CheckInt32(Int32.MaxValue, "X0");
            CheckInt32(0, "X0");
            CheckInt32(1609388677, "X0");
            CheckInt32(-551128805, "X0");
            CheckInt32(1733738507, "X0");
            CheckInt32(-1616058082, "X0");
            CheckInt32(-1428901748, "X0");
            
            // format X1
            CheckInt32(Int32.MinValue, "X1");
            CheckInt32(Int32.MaxValue, "X1");
            CheckInt32(0, "X1");
            CheckInt32(1023867067, "X1");
            CheckInt32(784229323, "X1");
            CheckInt32(643586930, "X1");
            CheckInt32(902139191, "X1");
            CheckInt32(-878579576, "X1");
            
            // format X2
            CheckInt32(Int32.MinValue, "X2");
            CheckInt32(Int32.MaxValue, "X2");
            CheckInt32(0, "X2");
            CheckInt32(-2075397315, "X2");
            CheckInt32(151248240, "X2");
            CheckInt32(613575489, "X2");
            CheckInt32(1242783456, "X2");
            CheckInt32(-352399029, "X2");
            
            // format X3
            CheckInt32(Int32.MinValue, "X3");
            CheckInt32(Int32.MaxValue, "X3");
            CheckInt32(0, "X3");
            CheckInt32(72216510, "X3");
            CheckInt32(-1845217760, "X3");
            CheckInt32(695234926, "X3");
            CheckInt32(-1898482122, "X3");
            CheckInt32(888429278, "X3");
            
            // format X4
            CheckInt32(Int32.MinValue, "X4");
            CheckInt32(Int32.MaxValue, "X4");
            CheckInt32(0, "X4");
            CheckInt32(1446144310, "X4");
            CheckInt32(-1957416237, "X4");
            CheckInt32(-433904139, "X4");
            CheckInt32(728888713, "X4");
            CheckInt32(1056671933, "X4");
            
            // format X5
            CheckInt32(Int32.MinValue, "X5");
            CheckInt32(Int32.MaxValue, "X5");
            CheckInt32(0, "X5");
            CheckInt32(-1708613265, "X5");
            CheckInt32(758380144, "X5");
            CheckInt32(-1367325742, "X5");
            CheckInt32(-907132180, "X5");
            CheckInt32(1638052850, "X5");
        }
        
        [Fact]
        public void Int32Formatx()
        {
            
            // format x
            CheckInt32(Int32.MinValue, "x");
            CheckInt32(Int32.MaxValue, "x");
            CheckInt32(0, "x");
            CheckInt32(367730753, "x");
            CheckInt32(-1882141420, "x");
            CheckInt32(1563884148, "x");
            CheckInt32(1915572397, "x");
            CheckInt32(-1789579947, "x");
            
            // format x0
            CheckInt32(Int32.MinValue, "x0");
            CheckInt32(Int32.MaxValue, "x0");
            CheckInt32(0, "x0");
            CheckInt32(1792407507, "x0");
            CheckInt32(1574890342, "x0");
            CheckInt32(-1945366384, "x0");
            CheckInt32(472459573, "x0");
            CheckInt32(-1951286599, "x0");
            
            // format x1
            CheckInt32(Int32.MinValue, "x1");
            CheckInt32(Int32.MaxValue, "x1");
            CheckInt32(0, "x1");
            CheckInt32(-493371837, "x1");
            CheckInt32(-93510427, "x1");
            CheckInt32(-1852651546, "x1");
            CheckInt32(1665029702, "x1");
            CheckInt32(-2001717957, "x1");
            
            // format x2
            CheckInt32(Int32.MinValue, "x2");
            CheckInt32(Int32.MaxValue, "x2");
            CheckInt32(0, "x2");
            CheckInt32(-1785736832, "x2");
            CheckInt32(-1674894608, "x2");
            CheckInt32(-1868763912, "x2");
            CheckInt32(1387584017, "x2");
            CheckInt32(593306723, "x2");
            
            // format x3
            CheckInt32(Int32.MinValue, "x3");
            CheckInt32(Int32.MaxValue, "x3");
            CheckInt32(0, "x3");
            CheckInt32(-463511967, "x3");
            CheckInt32(-1020996357, "x3");
            CheckInt32(554671589, "x3");
            CheckInt32(1593822595, "x3");
            CheckInt32(-669998812, "x3");
            
            // format x4
            CheckInt32(Int32.MinValue, "x4");
            CheckInt32(Int32.MaxValue, "x4");
            CheckInt32(0, "x4");
            CheckInt32(854536941, "x4");
            CheckInt32(509618765, "x4");
            CheckInt32(18106123, "x4");
            CheckInt32(-372365298, "x4");
            CheckInt32(309952688, "x4");
            
            // format x5
            CheckInt32(Int32.MinValue, "x5");
            CheckInt32(Int32.MaxValue, "x5");
            CheckInt32(0, "x5");
            CheckInt32(1230394810, "x5");
            CheckInt32(1855918614, "x5");
            CheckInt32(-459948389, "x5");
            CheckInt32(209264422, "x5");
            CheckInt32(-1068288296, "x5");
        }
        
        public void CheckUInt64(UInt64 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt64FormatD()
        {
            
            // format D
            CheckUInt64(UInt64.MinValue, "D");
            CheckUInt64(UInt64.MaxValue, "D");
            CheckUInt64(0, "D");
            CheckUInt64(1713055153, "D");
            CheckUInt64(677647572, "D");
            CheckUInt64(1695717938, "D");
            CheckUInt64(117839680, "D");
            CheckUInt64(2065946456, "D");
            
            // format D0
            CheckUInt64(UInt64.MinValue, "D0");
            CheckUInt64(UInt64.MaxValue, "D0");
            CheckUInt64(0, "D0");
            CheckUInt64(1474636044, "D0");
            CheckUInt64(1706178096, "D0");
            CheckUInt64(1282523708, "D0");
            CheckUInt64(1745615633, "D0");
            CheckUInt64(2028197310, "D0");
            
            // format D1
            CheckUInt64(UInt64.MinValue, "D1");
            CheckUInt64(UInt64.MaxValue, "D1");
            CheckUInt64(0, "D1");
            CheckUInt64(1752131917, "D1");
            CheckUInt64(1696218115, "D1");
            CheckUInt64(707337403, "D1");
            CheckUInt64(1587547739, "D1");
            CheckUInt64(661185116, "D1");
            
            // format D2
            CheckUInt64(UInt64.MinValue, "D2");
            CheckUInt64(UInt64.MaxValue, "D2");
            CheckUInt64(0, "D2");
            CheckUInt64(1020145667, "D2");
            CheckUInt64(1075441638, "D2");
            CheckUInt64(418816529, "D2");
            CheckUInt64(358845196, "D2");
            CheckUInt64(2080723960, "D2");
            
            // format D3
            CheckUInt64(UInt64.MinValue, "D3");
            CheckUInt64(UInt64.MaxValue, "D3");
            CheckUInt64(0, "D3");
            CheckUInt64(607903294, "D3");
            CheckUInt64(1805729823, "D3");
            CheckUInt64(1632342960, "D3");
            CheckUInt64(227893441, "D3");
            CheckUInt64(603052106, "D3");
            
            // format D4
            CheckUInt64(UInt64.MinValue, "D4");
            CheckUInt64(UInt64.MaxValue, "D4");
            CheckUInt64(0, "D4");
            CheckUInt64(2072759427, "D4");
            CheckUInt64(1457784470, "D4");
            CheckUInt64(747138468, "D4");
            CheckUInt64(498521977, "D4");
            CheckUInt64(347324486, "D4");
            
            // format D5
            CheckUInt64(UInt64.MinValue, "D5");
            CheckUInt64(UInt64.MaxValue, "D5");
            CheckUInt64(0, "D5");
            CheckUInt64(1762673458, "D5");
            CheckUInt64(395883573, "D5");
            CheckUInt64(1048006941, "D5");
            CheckUInt64(1852384665, "D5");
            CheckUInt64(848598710, "D5");
        }
        
        [Fact]
        public void UInt64Formatd()
        {
            
            // format d
            CheckUInt64(UInt64.MinValue, "d");
            CheckUInt64(UInt64.MaxValue, "d");
            CheckUInt64(0, "d");
            CheckUInt64(176889370, "d");
            CheckUInt64(1217356872, "d");
            CheckUInt64(391779086, "d");
            CheckUInt64(1337615268, "d");
            CheckUInt64(690953727, "d");
            
            // format d0
            CheckUInt64(UInt64.MinValue, "d0");
            CheckUInt64(UInt64.MaxValue, "d0");
            CheckUInt64(0, "d0");
            CheckUInt64(229345501, "d0");
            CheckUInt64(1237325235, "d0");
            CheckUInt64(2131205856, "d0");
            CheckUInt64(429239026, "d0");
            CheckUInt64(760765013, "d0");
            
            // format d1
            CheckUInt64(UInt64.MinValue, "d1");
            CheckUInt64(UInt64.MaxValue, "d1");
            CheckUInt64(0, "d1");
            CheckUInt64(1681660343, "d1");
            CheckUInt64(1978382429, "d1");
            CheckUInt64(268370876, "d1");
            CheckUInt64(1760156418, "d1");
            CheckUInt64(1587286367, "d1");
            
            // format d2
            CheckUInt64(UInt64.MinValue, "d2");
            CheckUInt64(UInt64.MaxValue, "d2");
            CheckUInt64(0, "d2");
            CheckUInt64(1279389113, "d2");
            CheckUInt64(1937931541, "d2");
            CheckUInt64(839093827, "d2");
            CheckUInt64(1135047981, "d2");
            CheckUInt64(357194498, "d2");
            
            // format d3
            CheckUInt64(UInt64.MinValue, "d3");
            CheckUInt64(UInt64.MaxValue, "d3");
            CheckUInt64(0, "d3");
            CheckUInt64(2054808977, "d3");
            CheckUInt64(1192788259, "d3");
            CheckUInt64(1467824497, "d3");
            CheckUInt64(1662271221, "d3");
            CheckUInt64(2140670676, "d3");
            
            // format d4
            CheckUInt64(UInt64.MinValue, "d4");
            CheckUInt64(UInt64.MaxValue, "d4");
            CheckUInt64(0, "d4");
            CheckUInt64(16851574, "d4");
            CheckUInt64(959039628, "d4");
            CheckUInt64(784001731, "d4");
            CheckUInt64(1398291147, "d4");
            CheckUInt64(265523852, "d4");
            
            // format d5
            CheckUInt64(UInt64.MinValue, "d5");
            CheckUInt64(UInt64.MaxValue, "d5");
            CheckUInt64(0, "d5");
            CheckUInt64(1356248344, "d5");
            CheckUInt64(648211174, "d5");
            CheckUInt64(1002436385, "d5");
            CheckUInt64(738949029, "d5");
            CheckUInt64(484295746, "d5");
        }
        
        [Fact]
        public void UInt64FormatG()
        {
            
            // format G
            CheckUInt64(UInt64.MinValue, "G");
            CheckUInt64(UInt64.MaxValue, "G");
            CheckUInt64(0, "G");
            CheckUInt64(1950272442, "G");
            CheckUInt64(683662552, "G");
            CheckUInt64(1228684908, "G");
            CheckUInt64(1815375116, "G");
            CheckUInt64(1851378459, "G");
        }
        
        [Fact]
        public void UInt64FormatN()
        {
            
            // format N
            CheckUInt64(UInt64.MinValue, "N");
            CheckUInt64(UInt64.MaxValue, "N");
            CheckUInt64(0, "N");
            CheckUInt64(1518061706, "N");
            CheckUInt64(1822007614, "N");
            CheckUInt64(1203103934, "N");
            CheckUInt64(1614612075, "N");
            CheckUInt64(1068875410, "N");
            
            // format N0
            CheckUInt64(UInt64.MinValue, "N0");
            CheckUInt64(UInt64.MaxValue, "N0");
            CheckUInt64(0, "N0");
            CheckUInt64(94376998, "N0");
            CheckUInt64(1189413594, "N0");
            CheckUInt64(1134465697, "N0");
            CheckUInt64(1058719257, "N0");
            CheckUInt64(1215419020, "N0");
            
            // format N1
            CheckUInt64(UInt64.MinValue, "N1");
            CheckUInt64(UInt64.MaxValue, "N1");
            CheckUInt64(0, "N1");
            CheckUInt64(1972225564, "N1");
            CheckUInt64(1704273393, "N1");
            CheckUInt64(2060442607, "N1");
            CheckUInt64(1495190167, "N1");
            CheckUInt64(941273380, "N1");
            
            // format N2
            CheckUInt64(UInt64.MinValue, "N2");
            CheckUInt64(UInt64.MaxValue, "N2");
            CheckUInt64(0, "N2");
            CheckUInt64(1131584758, "N2");
            CheckUInt64(1897016022, "N2");
            CheckUInt64(876991512, "N2");
            CheckUInt64(1344428239, "N2");
            CheckUInt64(674102153, "N2");
            
            // format N3
            CheckUInt64(UInt64.MinValue, "N3");
            CheckUInt64(UInt64.MaxValue, "N3");
            CheckUInt64(0, "N3");
            CheckUInt64(1417789520, "N3");
            CheckUInt64(453323504, "N3");
            CheckUInt64(732914709, "N3");
            CheckUInt64(163715174, "N3");
            CheckUInt64(1552000316, "N3");
            
            // format N4
            CheckUInt64(UInt64.MinValue, "N4");
            CheckUInt64(UInt64.MaxValue, "N4");
            CheckUInt64(0, "N4");
            CheckUInt64(1033449169, "N4");
            CheckUInt64(975946044, "N4");
            CheckUInt64(1676905494, "N4");
            CheckUInt64(1275860672, "N4");
            CheckUInt64(1784497572, "N4");
            
            // format N5
            CheckUInt64(UInt64.MinValue, "N5");
            CheckUInt64(UInt64.MaxValue, "N5");
            CheckUInt64(0, "N5");
            CheckUInt64(595726561, "N5");
            CheckUInt64(709246633, "N5");
            CheckUInt64(1171202358, "N5");
            CheckUInt64(1431153169, "N5");
            CheckUInt64(986616439, "N5");
        }
        
        [Fact]
        public void UInt64FormatX()
        {
            
            // format X
            CheckUInt64(UInt64.MinValue, "X");
            CheckUInt64(UInt64.MaxValue, "X");
            CheckUInt64(0, "X");
            CheckUInt64(232801363, "X");
            CheckUInt64(2137167972, "X");
            CheckUInt64(2000696069, "X");
            CheckUInt64(593395811, "X");
            CheckUInt64(2046293678, "X");
            
            // format X0
            CheckUInt64(UInt64.MinValue, "X0");
            CheckUInt64(UInt64.MaxValue, "X0");
            CheckUInt64(0, "X0");
            CheckUInt64(974921627, "X0");
            CheckUInt64(1972057578, "X0");
            CheckUInt64(1872766121, "X0");
            CheckUInt64(182872127, "X0");
            CheckUInt64(440781935, "X0");
            
            // format X1
            CheckUInt64(UInt64.MinValue, "X1");
            CheckUInt64(UInt64.MaxValue, "X1");
            CheckUInt64(0, "X1");
            CheckUInt64(1799458598, "X1");
            CheckUInt64(735252214, "X1");
            CheckUInt64(1654729865, "X1");
            CheckUInt64(1945159296, "X1");
            CheckUInt64(1500194635, "X1");
            
            // format X2
            CheckUInt64(UInt64.MinValue, "X2");
            CheckUInt64(UInt64.MaxValue, "X2");
            CheckUInt64(0, "X2");
            CheckUInt64(53256420, "X2");
            CheckUInt64(1954154687, "X2");
            CheckUInt64(2031740316, "X2");
            CheckUInt64(1141272963, "X2");
            CheckUInt64(433588939, "X2");
            
            // format X3
            CheckUInt64(UInt64.MinValue, "X3");
            CheckUInt64(UInt64.MaxValue, "X3");
            CheckUInt64(0, "X3");
            CheckUInt64(1064738202, "X3");
            CheckUInt64(1089092905, "X3");
            CheckUInt64(1039388760, "X3");
            CheckUInt64(62611759, "X3");
            CheckUInt64(35426241, "X3");
            
            // format X4
            CheckUInt64(UInt64.MinValue, "X4");
            CheckUInt64(UInt64.MaxValue, "X4");
            CheckUInt64(0, "X4");
            CheckUInt64(1265914601, "X4");
            CheckUInt64(1659991747, "X4");
            CheckUInt64(2006088672, "X4");
            CheckUInt64(1421705332, "X4");
            CheckUInt64(619692459, "X4");
            
            // format X5
            CheckUInt64(UInt64.MinValue, "X5");
            CheckUInt64(UInt64.MaxValue, "X5");
            CheckUInt64(0, "X5");
            CheckUInt64(1262978931, "X5");
            CheckUInt64(533071035, "X5");
            CheckUInt64(629289438, "X5");
            CheckUInt64(508573728, "X5");
            CheckUInt64(708472017, "X5");
        }
        
        [Fact]
        public void UInt64Formatx()
        {
            
            // format x
            CheckUInt64(UInt64.MinValue, "x");
            CheckUInt64(UInt64.MaxValue, "x");
            CheckUInt64(0, "x");
            CheckUInt64(1141900433, "x");
            CheckUInt64(2043803600, "x");
            CheckUInt64(283595701, "x");
            CheckUInt64(1445618208, "x");
            CheckUInt64(1846664173, "x");
            
            // format x0
            CheckUInt64(UInt64.MinValue, "x0");
            CheckUInt64(UInt64.MaxValue, "x0");
            CheckUInt64(0, "x0");
            CheckUInt64(1593215589, "x0");
            CheckUInt64(728041030, "x0");
            CheckUInt64(550042582, "x0");
            CheckUInt64(1870416886, "x0");
            CheckUInt64(1900025365, "x0");
            
            // format x1
            CheckUInt64(UInt64.MinValue, "x1");
            CheckUInt64(UInt64.MaxValue, "x1");
            CheckUInt64(0, "x1");
            CheckUInt64(298196955, "x1");
            CheckUInt64(1468699826, "x1");
            CheckUInt64(1879229845, "x1");
            CheckUInt64(1923149684, "x1");
            CheckUInt64(1731241152, "x1");
            
            // format x2
            CheckUInt64(UInt64.MinValue, "x2");
            CheckUInt64(UInt64.MaxValue, "x2");
            CheckUInt64(0, "x2");
            CheckUInt64(789055521, "x2");
            CheckUInt64(824989964, "x2");
            CheckUInt64(29929395, "x2");
            CheckUInt64(997564230, "x2");
            CheckUInt64(2069361884, "x2");
            
            // format x3
            CheckUInt64(UInt64.MinValue, "x3");
            CheckUInt64(UInt64.MaxValue, "x3");
            CheckUInt64(0, "x3");
            CheckUInt64(1291192105, "x3");
            CheckUInt64(1097779212, "x3");
            CheckUInt64(1938084310, "x3");
            CheckUInt64(557969570, "x3");
            CheckUInt64(780379077, "x3");
            
            // format x4
            CheckUInt64(UInt64.MinValue, "x4");
            CheckUInt64(UInt64.MaxValue, "x4");
            CheckUInt64(0, "x4");
            CheckUInt64(1462413527, "x4");
            CheckUInt64(2113452553, "x4");
            CheckUInt64(451060789, "x4");
            CheckUInt64(1710663315, "x4");
            CheckUInt64(1325286651, "x4");
            
            // format x5
            CheckUInt64(UInt64.MinValue, "x5");
            CheckUInt64(UInt64.MaxValue, "x5");
            CheckUInt64(0, "x5");
            CheckUInt64(1266387563, "x5");
            CheckUInt64(105962776, "x5");
            CheckUInt64(1146156137, "x5");
            CheckUInt64(1236687279, "x5");
            CheckUInt64(358294202, "x5");
        }
        
        public void CheckInt64(Int64 value, string format)
        {
            var parsed = StandardFormat.Parse(format);
            var formatter = new StringFormatter();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int64FormatD()
        {
            
            // format D
            CheckInt64(Int64.MinValue, "D");
            CheckInt64(Int64.MaxValue, "D");
            CheckInt64(0, "D");
            CheckInt64(-156936469, "D");
            CheckInt64(586122107, "D");
            CheckInt64(-987856999, "D");
            CheckInt64(539050322, "D");
            CheckInt64(310070040, "D");
            
            // format D0
            CheckInt64(Int64.MinValue, "D0");
            CheckInt64(Int64.MaxValue, "D0");
            CheckInt64(0, "D0");
            CheckInt64(1944698421, "D0");
            CheckInt64(82938987, "D0");
            CheckInt64(1978120584, "D0");
            CheckInt64(503141639, "D0");
            CheckInt64(586695490, "D0");
            
            // format D1
            CheckInt64(Int64.MinValue, "D1");
            CheckInt64(Int64.MaxValue, "D1");
            CheckInt64(0, "D1");
            CheckInt64(-44121223, "D1");
            CheckInt64(1873109777, "D1");
            CheckInt64(384250645, "D1");
            CheckInt64(-276980243, "D1");
            CheckInt64(-545130237, "D1");
            
            // format D2
            CheckInt64(Int64.MinValue, "D2");
            CheckInt64(Int64.MaxValue, "D2");
            CheckInt64(0, "D2");
            CheckInt64(192234178, "D2");
            CheckInt64(-642542568, "D2");
            CheckInt64(-1574304687, "D2");
            CheckInt64(238867855, "D2");
            CheckInt64(-9707235, "D2");
            
            // format D3
            CheckInt64(Int64.MinValue, "D3");
            CheckInt64(Int64.MaxValue, "D3");
            CheckInt64(0, "D3");
            CheckInt64(-752141784, "D3");
            CheckInt64(-1628014271, "D3");
            CheckInt64(983164301, "D3");
            CheckInt64(2030513564, "D3");
            CheckInt64(-1880026379, "D3");
            
            // format D4
            CheckInt64(Int64.MinValue, "D4");
            CheckInt64(Int64.MaxValue, "D4");
            CheckInt64(0, "D4");
            CheckInt64(-763245925, "D4");
            CheckInt64(559460645, "D4");
            CheckInt64(314172980, "D4");
            CheckInt64(-1944932857, "D4");
            CheckInt64(1057841790, "D4");
            
            // format D5
            CheckInt64(Int64.MinValue, "D5");
            CheckInt64(Int64.MaxValue, "D5");
            CheckInt64(0, "D5");
            CheckInt64(-59716933, "D5");
            CheckInt64(-771325288, "D5");
            CheckInt64(1692478753, "D5");
            CheckInt64(1285702982, "D5");
            CheckInt64(263643141, "D5");
        }
        
        [Fact]
        public void Int64Formatd()
        {
            
            // format d
            CheckInt64(Int64.MinValue, "d");
            CheckInt64(Int64.MaxValue, "d");
            CheckInt64(0, "d");
            CheckInt64(-199121113, "d");
            CheckInt64(-1769501624, "d");
            CheckInt64(-812621779, "d");
            CheckInt64(-625188670, "d");
            CheckInt64(-1829558478, "d");
            
            // format d0
            CheckInt64(Int64.MinValue, "d0");
            CheckInt64(Int64.MaxValue, "d0");
            CheckInt64(0, "d0");
            CheckInt64(1744216764, "d0");
            CheckInt64(-1254320186, "d0");
            CheckInt64(-2017875528, "d0");
            CheckInt64(-1910566692, "d0");
            CheckInt64(-1250682503, "d0");
            
            // format d1
            CheckInt64(Int64.MinValue, "d1");
            CheckInt64(Int64.MaxValue, "d1");
            CheckInt64(0, "d1");
            CheckInt64(1468530973, "d1");
            CheckInt64(1824962460, "d1");
            CheckInt64(1672947780, "d1");
            CheckInt64(-1157482054, "d1");
            CheckInt64(-1275745179, "d1");
            
            // format d2
            CheckInt64(Int64.MinValue, "d2");
            CheckInt64(Int64.MaxValue, "d2");
            CheckInt64(0, "d2");
            CheckInt64(-395948644, "d2");
            CheckInt64(-496953469, "d2");
            CheckInt64(-688176575, "d2");
            CheckInt64(852219592, "d2");
            CheckInt64(1006785589, "d2");
            
            // format d3
            CheckInt64(Int64.MinValue, "d3");
            CheckInt64(Int64.MaxValue, "d3");
            CheckInt64(0, "d3");
            CheckInt64(1573512155, "d3");
            CheckInt64(238808147, "d3");
            CheckInt64(1911360842, "d3");
            CheckInt64(445350871, "d3");
            CheckInt64(1953524006, "d3");
            
            // format d4
            CheckInt64(Int64.MinValue, "d4");
            CheckInt64(Int64.MaxValue, "d4");
            CheckInt64(0, "d4");
            CheckInt64(1859071689, "d4");
            CheckInt64(1562368298, "d4");
            CheckInt64(1391093075, "d4");
            CheckInt64(90342220, "d4");
            CheckInt64(1476050291, "d4");
            
            // format d5
            CheckInt64(Int64.MinValue, "d5");
            CheckInt64(Int64.MaxValue, "d5");
            CheckInt64(0, "d5");
            CheckInt64(1252799124, "d5");
            CheckInt64(-1924107966, "d5");
            CheckInt64(454134025, "d5");
            CheckInt64(-1166913814, "d5");
            CheckInt64(-1117139627, "d5");
        }
        
        [Fact]
        public void Int64FormatG()
        {
            
            // format G
            CheckInt64(Int64.MinValue, "G");
            CheckInt64(Int64.MaxValue, "G");
            CheckInt64(0, "G");
            CheckInt64(1013260664, "G");
            CheckInt64(-2111316905, "G");
            CheckInt64(2097058998, "G");
            CheckInt64(-79176733, "G");
            CheckInt64(-885219725, "G");
        }
        
        [Fact]
        public void Int64FormatN()
        {
            
            // format N
            CheckInt64(Int64.MinValue, "N");
            CheckInt64(Int64.MaxValue, "N");
            CheckInt64(0, "N");
            CheckInt64(754603500, "N");
            CheckInt64(2145541669, "N");
            CheckInt64(1796905172, "N");
            CheckInt64(1950061759, "N");
            CheckInt64(1924276544, "N");
            
            // format N0
            CheckInt64(Int64.MinValue, "N0");
            CheckInt64(Int64.MaxValue, "N0");
            CheckInt64(0, "N0");
            CheckInt64(905082666, "N0");
            CheckInt64(-229379577, "N0");
            CheckInt64(946059972, "N0");
            CheckInt64(1115939043, "N0");
            CheckInt64(-1901108746, "N0");
            
            // format N1
            CheckInt64(Int64.MinValue, "N1");
            CheckInt64(Int64.MaxValue, "N1");
            CheckInt64(0, "N1");
            CheckInt64(-1523903136, "N1");
            CheckInt64(2143836756, "N1");
            CheckInt64(961221477, "N1");
            CheckInt64(351250880, "N1");
            CheckInt64(938463928, "N1");
            
            // format N2
            CheckInt64(Int64.MinValue, "N2");
            CheckInt64(Int64.MaxValue, "N2");
            CheckInt64(0, "N2");
            CheckInt64(-1949443150, "N2");
            CheckInt64(-235184982, "N2");
            CheckInt64(-1005547552, "N2");
            CheckInt64(823032261, "N2");
            CheckInt64(671643733, "N2");
            
            // format N3
            CheckInt64(Int64.MinValue, "N3");
            CheckInt64(Int64.MaxValue, "N3");
            CheckInt64(0, "N3");
            CheckInt64(-576692242, "N3");
            CheckInt64(-309641314, "N3");
            CheckInt64(117367970, "N3");
            CheckInt64(2123240894, "N3");
            CheckInt64(-253247079, "N3");
            
            // format N4
            CheckInt64(Int64.MinValue, "N4");
            CheckInt64(Int64.MaxValue, "N4");
            CheckInt64(0, "N4");
            CheckInt64(1607512215, "N4");
            CheckInt64(-1863578243, "N4");
            CheckInt64(1753194994, "N4");
            CheckInt64(47636206, "N4");
            CheckInt64(-487525205, "N4");
            
            // format N5
            CheckInt64(Int64.MinValue, "N5");
            CheckInt64(Int64.MaxValue, "N5");
            CheckInt64(0, "N5");
            CheckInt64(1877097270, "N5");
            CheckInt64(-817933906, "N5");
            CheckInt64(1005080839, "N5");
            CheckInt64(-1644113559, "N5");
            CheckInt64(-388570638, "N5");
        }
        
        [Fact]
        public void Int64FormatX()
        {
            
            // format X
            CheckInt64(Int64.MinValue, "X");
            CheckInt64(Int64.MaxValue, "X");
            CheckInt64(0, "X");
            CheckInt64(2076873255, "X");
            CheckInt64(1393582800, "X");
            CheckInt64(955398249, "X");
            CheckInt64(49275349, "X");
            CheckInt64(-813705400, "X");
            
            // format X0
            CheckInt64(Int64.MinValue, "X0");
            CheckInt64(Int64.MaxValue, "X0");
            CheckInt64(0, "X0");
            CheckInt64(1678177618, "X0");
            CheckInt64(-109814174, "X0");
            CheckInt64(1355096893, "X0");
            CheckInt64(904527935, "X0");
            CheckInt64(740724461, "X0");
            
            // format X1
            CheckInt64(Int64.MinValue, "X1");
            CheckInt64(Int64.MaxValue, "X1");
            CheckInt64(0, "X1");
            CheckInt64(-1161173603, "X1");
            CheckInt64(-2135319729, "X1");
            CheckInt64(-643655899, "X1");
            CheckInt64(740065721, "X1");
            CheckInt64(1452502090, "X1");
            
            // format X2
            CheckInt64(Int64.MinValue, "X2");
            CheckInt64(Int64.MaxValue, "X2");
            CheckInt64(0, "X2");
            CheckInt64(1784815864, "X2");
            CheckInt64(-328628083, "X2");
            CheckInt64(1415247518, "X2");
            CheckInt64(-915334691, "X2");
            CheckInt64(545214629, "X2");
            
            // format X3
            CheckInt64(Int64.MinValue, "X3");
            CheckInt64(Int64.MaxValue, "X3");
            CheckInt64(0, "X3");
            CheckInt64(346411488, "X3");
            CheckInt64(-400762905, "X3");
            CheckInt64(-612276336, "X3");
            CheckInt64(1477186338, "X3");
            CheckInt64(-1901537837, "X3");
            
            // format X4
            CheckInt64(Int64.MinValue, "X4");
            CheckInt64(Int64.MaxValue, "X4");
            CheckInt64(0, "X4");
            CheckInt64(-1527415850, "X4");
            CheckInt64(-1289702952, "X4");
            CheckInt64(-723560213, "X4");
            CheckInt64(652741680, "X4");
            CheckInt64(884183325, "X4");
            
            // format X5
            CheckInt64(Int64.MinValue, "X5");
            CheckInt64(Int64.MaxValue, "X5");
            CheckInt64(0, "X5");
            CheckInt64(-1373321435, "X5");
            CheckInt64(-381235384, "X5");
            CheckInt64(-42443487, "X5");
            CheckInt64(1452907729, "X5");
            CheckInt64(326062928, "X5");
        }
        
        [Fact]
        public void Int64Formatx()
        {
            
            // format x
            CheckInt64(Int64.MinValue, "x");
            CheckInt64(Int64.MaxValue, "x");
            CheckInt64(0, "x");
            CheckInt64(-872674618, "x");
            CheckInt64(-336841119, "x");
            CheckInt64(-263449224, "x");
            CheckInt64(1355284704, "x");
            CheckInt64(2063880740, "x");
            
            // format x0
            CheckInt64(Int64.MinValue, "x0");
            CheckInt64(Int64.MaxValue, "x0");
            CheckInt64(0, "x0");
            CheckInt64(-1807472686, "x0");
            CheckInt64(1593919688, "x0");
            CheckInt64(452975632, "x0");
            CheckInt64(-950594182, "x0");
            CheckInt64(1939920347, "x0");
            
            // format x1
            CheckInt64(Int64.MinValue, "x1");
            CheckInt64(Int64.MaxValue, "x1");
            CheckInt64(0, "x1");
            CheckInt64(-314192776, "x1");
            CheckInt64(-1599039341, "x1");
            CheckInt64(-413970056, "x1");
            CheckInt64(-2127630648, "x1");
            CheckInt64(765306014, "x1");
            
            // format x2
            CheckInt64(Int64.MinValue, "x2");
            CheckInt64(Int64.MaxValue, "x2");
            CheckInt64(0, "x2");
            CheckInt64(790137376, "x2");
            CheckInt64(-898044176, "x2");
            CheckInt64(-491880568, "x2");
            CheckInt64(-425216695, "x2");
            CheckInt64(-1662744352, "x2");
            
            // format x3
            CheckInt64(Int64.MinValue, "x3");
            CheckInt64(Int64.MaxValue, "x3");
            CheckInt64(0, "x3");
            CheckInt64(1113024589, "x3");
            CheckInt64(948512278, "x3");
            CheckInt64(-158233839, "x3");
            CheckInt64(1402349077, "x3");
            CheckInt64(527821930, "x3");
            
            // format x4
            CheckInt64(Int64.MinValue, "x4");
            CheckInt64(Int64.MaxValue, "x4");
            CheckInt64(0, "x4");
            CheckInt64(-634769958, "x4");
            CheckInt64(1948864205, "x4");
            CheckInt64(-73969667, "x4");
            CheckInt64(-1117233228, "x4");
            CheckInt64(686946567, "x4");
            
            // format x5
            CheckInt64(Int64.MinValue, "x5");
            CheckInt64(Int64.MaxValue, "x5");
            CheckInt64(0, "x5");
            CheckInt64(-819644223, "x5");
            CheckInt64(-562264214, "x5");
            CheckInt64(-1905440709, "x5");
            CheckInt64(765398091, "x5");
            CheckInt64(-1743549992, "x5");
        }
        
    }
}
