<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Numerics.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Numerics" #>
<#

List<TypeToParse> unsignedTypes = new List<TypeToParse>();

unsignedTypes.Add(new TypeToParse {
    PrimitiveName = "byte",
    ClassName = "Byte",
    MinValueText = byte.MinValue.ToString(),
    MaxValueText = byte.MaxValue.ToString(),
    MinValueTextHex = byte.MinValue.ToString("X"),
    MaxValueTextHex = byte.MaxValue.ToString("X")
});

unsignedTypes.Add(new TypeToParse {
    PrimitiveName = "ushort",
    ClassName = "UInt16",
    MinValueText = ushort.MinValue.ToString(),
    MaxValueText = ushort.MaxValue.ToString(),
    MinValueTextHex = ushort.MinValue.ToString("X"),
    MaxValueTextHex = ushort.MaxValue.ToString("X")
});

unsignedTypes.Add(new TypeToParse {
    PrimitiveName = "uint",
    ClassName = "UInt32",
    MinValueText = uint.MinValue.ToString(),
    MaxValueText = uint.MaxValue.ToString(),
    MinValueTextHex = uint.MinValue.ToString("X"),
    MaxValueTextHex = uint.MaxValue.ToString("X")
});

unsignedTypes.Add(new TypeToParse {
    PrimitiveName = "ulong",
    ClassName = "UInt64",
    MinValueText = ulong.MinValue.ToString(),
    MaxValueText = ulong.MaxValue.ToString(),
    MinValueTextHex = ulong.MinValue.ToString("X"),
    MaxValueTextHex = ulong.MaxValue.ToString("X")
});

List<TypeToParse> signedTypes = new List<TypeToParse>();

signedTypes.Add(new TypeToParse {
    PrimitiveName = "sbyte",
    ClassName = "SByte",
    MinValueText = sbyte.MinValue.ToString(),
    MaxValueText = sbyte.MaxValue.ToString(),
    MinValueTextHex = sbyte.MinValue.ToString("X"),
    MaxValueTextHex = sbyte.MaxValue.ToString("X")
});

signedTypes.Add(new TypeToParse {
    PrimitiveName = "short",
    ClassName = "Int16",
    MinValueText = short.MinValue.ToString(),
    MaxValueText = short.MaxValue.ToString(),
    MinValueTextHex = short.MinValue.ToString("X"),
    MaxValueTextHex = short.MaxValue.ToString("X")
});

signedTypes.Add(new TypeToParse {
    PrimitiveName = "int",
    ClassName = "Int32",
    MinValueText = int.MinValue.ToString(),
    MaxValueText = int.MaxValue.ToString(),
    MinValueTextHex = int.MinValue.ToString("X"),
    MaxValueTextHex = int.MaxValue.ToString("X")
});

signedTypes.Add(new TypeToParse {
    PrimitiveName = "long",
    ClassName = "Int64",
    MinValueText = long.MinValue.ToString(),
    MaxValueText = long.MaxValue.ToString(),
    MinValueTextHex = long.MinValue.ToString("X"),
    MaxValueTextHex = long.MaxValue.ToString("X")
});
#>
// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in ParserTests.tt.

using Xunit;

namespace System.Text.Primitives.Tests
{
    public partial class PrimitiveParserTests
    {
        private byte[] UtfEncode(string s, bool utf16)
        {
            if (utf16)
                return Encoding.Unicode.GetBytes(s);
            else
                return Encoding.UTF8.GetBytes(s);
        }

<#
    foreach (TypeToParse unsignedType in unsignedTypes)
    {
        BigInteger overflowValue = BigInteger.Parse(unsignedType.MaxValueText) + 1;

        string randValueText = GenerateRandomIntegerText(unsignedType.MaxValueText.Length - 1);
        string randValueTextHex = GenerateRandomIntegerTextHex(unsignedType.MaxValueTextHex.Length - 1);
#>
        #region <#= unsignedType.PrimitiveName #>

        [Theory]
        [InlineData("111", true, 111, 3)]
        [InlineData("<#= randValueText #>abhced", true, <#= randValueText #>, <#= randValueText.Length #>)]
        [InlineData("<#= unsignedType.MinValueText #>", true, <#= unsignedType.MinValueText #>, <#= unsignedType.MinValueText.Length #>)] // min value
        [InlineData("<#= unsignedType.MaxValueText #>", true, <#= unsignedType.MaxValueText #>, <#= unsignedType.MaxValueText.Length #>)] // max value
        [InlineData("I am 1", false, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue.ToString() #>", false, 0, 0)] // overflow test
        public unsafe void Parse<#= unsignedType.ClassName #>Invariant(string text, bool expectSuccess, <#= unsignedType.PrimitiveName #> expectedValue, int expectedConsumed)
        {
            <#= unsignedType.PrimitiveName #> parsedValue;
            int consumed;
            ReadOnlySpan<byte> utf8Span = UtfEncode(text, false);
            ReadOnlySpan<char> utf16Span = new ReadOnlySpan<byte>(UtfEncode(text, true)).Cast<byte, char>();
            byte[] textBytes = utf8Span.ToArray();
            char[] textChars = utf16Span.ToArray();
            bool result;

            result = PrimitiveParser.InvariantUtf8.TryParse<#= unsignedType.ClassName #>(utf8Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf8.TryParse<#= unsignedType.ClassName #>(utf8Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (byte* arrayPointer = textBytes)
            {
                result = PrimitiveParser.InvariantUtf8.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf8.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }

            result = PrimitiveParser.InvariantUtf16.TryParse<#= unsignedType.ClassName #>(utf16Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf16.TryParse<#= unsignedType.ClassName #>(utf16Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (char* arrayPointer = textChars)
            {
                result = PrimitiveParser.InvariantUtf16.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf16.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }
        }

        [Theory]
        [InlineData("af", true, 0xaf, 2)]
        [InlineData("<#= randValueTextHex #>ghijzl", true, 0x<#= randValueTextHex #>, <#= randValueTextHex.Length #>)]
        [InlineData("<#= unsignedType.MinValueTextHex #>", true, 0x<#= unsignedType.MinValueTextHex #>, <#= unsignedType.MinValueTextHex.Length #>)] // min value
        [InlineData("<#= unsignedType.MaxValueTextHex #>", true, 0x<#= unsignedType.MaxValueTextHex #>, <#= unsignedType.MaxValueTextHex.Length #>)] // max value
        [InlineData("I am 1", false, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue.ToString("X") #>", false, 0, 0)] // overflow test
        public unsafe void Parse<#= unsignedType.ClassName #>InvariantHex(string text, bool expectSuccess, <#= unsignedType.ClassName #> expectedValue, int expectedConsumed)
        {
            <#= unsignedType.PrimitiveName #> parsedValue;
            int consumed;
            ReadOnlySpan<byte> utf8Span = UtfEncode(text, false);
            ReadOnlySpan<char> utf16Span = new ReadOnlySpan<byte>(UtfEncode(text, true)).Cast<byte, char>();
            byte[] textBytes = utf8Span.ToArray();
            char[] textChars = utf16Span.ToArray();
            bool result;

            result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#= unsignedType.ClassName #>(utf8Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#= unsignedType.ClassName #>(utf8Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (byte* arrayPointer = textBytes)
            {
                result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }

            result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#= unsignedType.ClassName #>(utf16Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#= unsignedType.ClassName #>(utf16Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (char* arrayPointer = textChars)
            {
                result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#= unsignedType.ClassName #>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }
        }

        #endregion

<#
        }
#>
<#
    foreach (TypeToParse signedType in signedTypes)
    {
        BigInteger overflowValue = BigInteger.Parse(signedType.MaxValueText) + 1;
        BigInteger underflowValue = BigInteger.Parse(signedType.MinValueText) - 1;

        // Signed hex parsing is just unsigned parsing with a cast afterward
        // Signed hex parsing cannot have underflow
        BigInteger overflowValueHex = overflowValue * 2;

        string randValueText = GenerateRandomIntegerText(signedType.MaxValueText.Length - 1);
        string randValueTextHex = GenerateRandomIntegerTextHex(signedType.MaxValueTextHex.Length - 1);
#>
        #region <#= signedType.PrimitiveName #>

        [Theory]
        [InlineData("111", true, 111, 3)]
        [InlineData("<#= randValueText #>abcdefg", true, <#= randValueText #>, <#= randValueText.Length #>)]
        [InlineData("<#= signedType.MaxValueText #>", true, <#= signedType.MaxValueText #>, <#= signedType.MaxValueText.Length #>)] // max
        [InlineData("<#= signedType.MinValueText #>", true, <#= signedType.MinValueText #>, <#= signedType.MinValueText.Length #>)] // min
        [InlineData("-A", false, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue.ToString() #>", false, 0, 0)] // positive overflow test
        [InlineData("<#= underflowValue.ToString() #>", false, 0, 0)] // negative overflow test
        public unsafe void Parse<#= signedType.ClassName #>Invariant(string text, bool expectSuccess, <#= signedType.PrimitiveName #> expectedValue, int expectedConsumed)
        {
            <#= signedType.PrimitiveName #> parsedValue;
            int consumed;
            ReadOnlySpan<byte> utf8Span = UtfEncode(text, false);
            ReadOnlySpan<char> utf16Span = new ReadOnlySpan<byte>(UtfEncode(text, true)).Cast<byte, char>();
            byte[] textBytes = utf8Span.ToArray();
            char[] textChars = utf16Span.ToArray();
            bool result;

            result = PrimitiveParser.InvariantUtf8.TryParse<#=signedType.ClassName#>(utf8Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf8.TryParse<#=signedType.ClassName#>(utf8Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (byte* arrayPointer = textBytes)
            {
                result = PrimitiveParser.InvariantUtf8.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf8.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }

            result = PrimitiveParser.InvariantUtf16.TryParse<#=signedType.ClassName#>(utf16Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf16.TryParse<#=signedType.ClassName#>(utf16Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (char* arrayPointer = textChars)
            {
                result = PrimitiveParser.InvariantUtf16.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf16.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }
        }

        [Theory]
        [InlineData("1f", true, 0x1f, 2)]
        [InlineData("<#= randValueTextHex #>ghijzl", true, 0x<#= randValueTextHex #>, <#= randValueTextHex.Length #>)]
        [InlineData("<#= signedType.MaxValueTextHex #>", true, 0x<#= signedType.MaxValueTextHex #>, <#= signedType.MaxValueTextHex.Length #>)] // positive max
        [InlineData("<#= signedType.MinValueTextHex #>", true, -0x<#= signedType.MinValueTextHex #>, <#= signedType.MinValueTextHex.Length #>)] // negative min
        [InlineData("-G", false, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValueHex.ToString("X") #>", false, 0, 0)] // overflow test
        public unsafe void Parse<#= signedType.ClassName #>InvariantHex(string text, bool expectSuccess, <#= signedType.PrimitiveName #> expectedValue, int expectedConsumed)
        {
            <#= signedType.PrimitiveName #> parsedValue;
            int consumed;
            ReadOnlySpan<byte> utf8Span = UtfEncode(text, false);
            ReadOnlySpan<char> utf16Span = new ReadOnlySpan<byte>(UtfEncode(text, true)).Cast<byte, char>();
            byte[] textBytes = utf8Span.ToArray();
            char[] textChars = utf16Span.ToArray();
            bool result;

            result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#=signedType.ClassName#>(utf8Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#=signedType.ClassName#>(utf8Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (byte* arrayPointer = textBytes)
            {
                result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf8.Hex.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }

            result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#=signedType.ClassName#>(utf16Span, out parsedValue);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);

            result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#=signedType.ClassName#>(utf16Span, out parsedValue, out consumed);
            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedConsumed, consumed);

            fixed (char* arrayPointer = textChars)
            {
                result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);

                result = PrimitiveParser.InvariantUtf16.Hex.TryParse<#=signedType.ClassName#>(arrayPointer, textBytes.Length, out parsedValue, out consumed);
                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedConsumed, consumed);
            }
        }

        #endregion

<#
        }
#>
    }
}
<#+
struct TypeToParse
{
    internal string PrimitiveName;
    internal string ClassName;
    internal string MinValueText;
    internal string MaxValueText;
    internal string MinValueTextHex;
    internal string MaxValueTextHex;
}
string GenerateRandomIntegerText(int length)
{
    StringBuilder randValueSB = new StringBuilder();
    Random r = new Random(55);
    for (int i=0; i < length; i++)
    {
        randValueSB.Append(r.Next(0, 10).ToString());
    }
    return randValueSB.ToString();
}
string GenerateRandomIntegerTextHex(int length)
{
    StringBuilder randValueSB = new StringBuilder();
    Random r = new Random(55);
    for (int i=0; i < length; i++)
    {
        randValueSB.Append(r.Next(0, 16).ToString("X"));
    }
    return randValueSB.ToString();
}
#>