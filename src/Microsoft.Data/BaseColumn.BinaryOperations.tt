<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude"#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from BaseColumn.BinaryOperations.tt. Do not modify directly

using System;
using System.Collections.Generic;

namespace Microsoft.Data
{
    public abstract partial class BaseColumn
    {
<# foreach (MethodConfiguration method in methodConfiguration) { #>
<# if (method.MethodType == MethodType.BinaryScalar) { #>
        public virtual BaseColumn <#=method.MethodName#><T>(T value, bool inPlace = false)
            where T : unmanaged
<# } #>
<# if (method.MethodType == MethodType.ComparisonScalar) { #>
        public virtual PrimitiveColumn<bool> <#=method.MethodName#><T>(T value)
            where T : unmanaged
<# } #>
<# if (method.MethodType == MethodType.Binary) {#>
        public virtual BaseColumn <#=method.MethodName#>(BaseColumn column, bool inPlace = false)
<# } #>
<# if (method.MethodType == MethodType.Comparison) {#>
        public virtual PrimitiveColumn<bool> <#=method.MethodName#>(BaseColumn column)
<# } #>
<# if (method.MethodType == MethodType.BinaryInt ) {#>
        public virtual BaseColumn <#=method.MethodName#>(int value, bool inPlace = false)
<# } #>
        {
            throw new NotImplementedException();
        }

<# } #>
    }
}
