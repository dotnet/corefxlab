<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="PrimitiveParserHelpers.t4" #>
<#

List<IntegerTypeToParse> typesToParse = new List<IntegerTypeToParse>();

typesToParse.Add(new IntegerTypeToParse { PrimitiveName = "sbyte", ClassName = "SByte", ValueCalculationTypeName = "int" });
typesToParse.Add(new IntegerTypeToParse { PrimitiveName = "short", ClassName = "Int16", ValueCalculationTypeName = "int" });
typesToParse.Add(new IntegerTypeToParse { PrimitiveName = "int", ClassName = "Int32", ValueCalculationTypeName = "int" });
typesToParse.Add(new IntegerTypeToParse { PrimitiveName = "long", ClassName = "Int64", ValueCalculationTypeName = "long" });

#>
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in Signed.tt.

namespace System.Text
{
    public static partial class PrimitiveParser
    {
<#
foreach (IntegerTypeToParse typeToParse in typesToParse)
{
#>
        public static bool TryParse<#=typeToParse.ClassName#>(ReadOnlySpan<byte> text, out <#=typeToParse.PrimitiveName#> value, out int bytesConsumed, TextFormat format = default(TextFormat), EncodingData encoding = default(EncodingData))
        {
            if (encoding == default(EncodingData))
            {
                encoding = EncodingData.InvariantUtf8;
            }

            if (!format.IsDefault && format.HasPrecision)
            {
                throw new NotImplementedException("Format with precision not supported.");
            }

            if (encoding.IsInvariantUtf8)
            {
                if (format.IsHexadecimal)
                {
                    return InvariantUtf8.Hex.TryParse<#=typeToParse.ClassName#>(text, out value, out bytesConsumed);
                }
                else
                {
                    return InvariantUtf8.TryParse<#=typeToParse.ClassName#>(text, out value, out bytesConsumed);
                }
            }
            else if (encoding.IsInvariantUtf16)
            {
                ReadOnlySpan<char> utf16Text = text.Cast<byte, char>();
                int charsConsumed;
                bool result;
                if (format.IsHexadecimal)
                {
                    result = InvariantUtf16.Hex.TryParse<#=typeToParse.ClassName#>(utf16Text, out value, out charsConsumed);
                }
                else
                {
                    result = InvariantUtf16.TryParse<#=typeToParse.ClassName#>(utf16Text, out value, out charsConsumed);
                }
                bytesConsumed = charsConsumed * sizeof(char);
                return result;
            }

            if (format.IsHexadecimal)
            {
                throw new NotImplementedException("The only supported encodings for hexadecimal parsing are InvariantUtf8 and InvariantUtf16.");
            }

            if (!(format.IsDefault || format.Symbol == 'G' || format.Symbol == 'g'))
            {
                throw new NotImplementedException(String.Format("Format '{0}' not supported.", format.Symbol));
            }

            uint nextSymbol;
            int thisSymbolConsumed;
            if (!encoding.TryParseSymbol(text, out nextSymbol, out thisSymbolConsumed))
            {
                value = default(<#=typeToParse.PrimitiveName#>);
                bytesConsumed = 0;
                return false;
            }

            int sign = 1;
            if ((EncodingData.Symbol)nextSymbol == EncodingData.Symbol.MinusSign)
            {
                sign = -1;
            }

            int signConsumed = 0;
            if ((EncodingData.Symbol)nextSymbol == EncodingData.Symbol.PlusSign || (EncodingData.Symbol)nextSymbol == EncodingData.Symbol.MinusSign)
            {
                signConsumed = thisSymbolConsumed;
                if (!encoding.TryParseSymbol(text.Slice(signConsumed), out nextSymbol, out thisSymbolConsumed))
                {
                    value = default(<#=typeToParse.PrimitiveName#>);
                    bytesConsumed = 0;
                    return false;
                }
            }

            if (nextSymbol > 9)
            {
                value = default(<#=typeToParse.PrimitiveName#>);
                bytesConsumed = 0;
                return false;
            }

            <#=typeToParse.ValueCalculationTypeName#> parsedValue = (<#=typeToParse.ValueCalculationTypeName#>)nextSymbol;
            int index = signConsumed + thisSymbolConsumed;

            while (index < text.Length)
            {
                bool success = encoding.TryParseSymbol(text.Slice(index), out nextSymbol, out thisSymbolConsumed);
                if (!success || nextSymbol > 9)
                {
                    bytesConsumed = index;
                    value = (<#=typeToParse.PrimitiveName#>)(parsedValue * sign);
                    return true;
                }

                // If parsedValue > (<#=typeToParse.PrimitiveName#>.MaxValue / 10), any more appended digits will cause overflow.
                // if parsedValue == (<#=typeToParse.PrimitiveName#>.MaxValue / 10), any nextDigit greater than 7 or 8 (depending on sign) implies overflow.
                bool positive = sign > 0;
                bool nextDigitTooLarge = nextSymbol > 8 || (positive && nextSymbol > 7);
                if (parsedValue > <#=typeToParse.PrimitiveName#>.MaxValue / 10 || (parsedValue == <#=typeToParse.PrimitiveName#>.MaxValue / 10 && nextDigitTooLarge))
                {
                    bytesConsumed = 0;
                    value = default(<#=typeToParse.PrimitiveName#>);
                    return false;
                }

                index += thisSymbolConsumed;
                parsedValue = parsedValue * 10 + (<#=typeToParse.ValueCalculationTypeName#>)nextSymbol;
            }

            bytesConsumed = text.Length;
            value = (<#=typeToParse.PrimitiveName#>)(parsedValue * sign);
            return true;
        }

<#
}
#>
    }
}