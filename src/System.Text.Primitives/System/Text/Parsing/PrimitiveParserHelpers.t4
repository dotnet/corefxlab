<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#+
enum BufferType
{
	ArrayPointer,
	ReadOnlySpan
}

enum UtfEncoding
{
	Utf8,
	Utf16
}

struct IntegerTypeToParse
{
	internal string PrimitiveName;
	internal string ClassName;
	internal string ValueCalculationTypeName;
}

class TryParseSignature
{
	// Given in the constructor
	internal BufferType BufferType { get; }
	internal bool ConsumedParameterExists { get; }
	internal UtfEncoding UtfEncoding { get; }

	// Depend on constructor parameters
	internal string CharacterPrimitive { get; }
	internal string BufferParamsText { get; }
	internal string ConsumedParamText { get; }
	internal string LengthName { get; }
	internal string UnsafeModifier { get; }

	internal TryParseSignature(BufferType bufferType, bool consumedParameterExists, UtfEncoding utfEncoding)
	{
		this.BufferType = bufferType;
		this.ConsumedParameterExists = consumedParameterExists;
		this.UtfEncoding = utfEncoding;

		CharacterPrimitive = "";
		BufferParamsText = "";
		ConsumedParamText = "";
		LengthName = "";
		UnsafeModifier = "";

		switch (this.UtfEncoding)
		{
			case UtfEncoding.Utf8:
				CharacterPrimitive = "byte";
				break;
			case UtfEncoding.Utf16:
				CharacterPrimitive = "char";
				break;
		}
		
		if (this.ConsumedParameterExists)
		{
			ConsumedParamText = string.Format(", out int {0}sConsumed", CharacterPrimitive);
		}

		switch (this.BufferType)
		{
			case BufferType.ArrayPointer:
				BufferParamsText = string.Format("{0}* text, int length", CharacterPrimitive);
				LengthName = "length";
				UnsafeModifier = "unsafe ";
				break;
			case BufferType.ReadOnlySpan:
				BufferParamsText = String.Format("ReadOnlySpan<{0}> text", CharacterPrimitive);
				LengthName = "text.Length";
				UnsafeModifier = "";
				break;
		}
	}
}

class TryParseIntegerOverload
{
	// Given in the constructor
	internal IntegerTypeToParse TypeToParseInfo { get; }
	internal TryParseSignature SignatureInfo { get; }
	internal bool Signed { get; }

	// Information depending on the type to parse
	internal string OverflowLengthName { get; }

	internal TryParseIntegerOverload(IntegerTypeToParse typeToParse, TryParseSignature tryParseSignature, bool signed)
	{
		TypeToParseInfo = typeToParse;
		SignatureInfo = tryParseSignature;
		Signed = signed;

		OverflowLengthName = String.Format("{0}OverflowLength", TypeToParseInfo.ClassName);
	}

	internal string SetOutParamsAndReturnFalse(int indents)
	{
		StringBuilder generatedText = new StringBuilder();

		// Each indent is four spaces
		string indentString = new String(' ', indents * 4);

		if (SignatureInfo.ConsumedParameterExists)
		{
			generatedText.AppendFormat("{0}{1}sConsumed = 0;", indentString, SignatureInfo.CharacterPrimitive);
			generatedText.AppendLine();
		}

		generatedText.AppendFormat("{0}value = default({1});", indentString, TypeToParseInfo.PrimitiveName);
		generatedText.AppendLine();
		generatedText.AppendFormat("{0}return false;", indentString);

		return generatedText.ToString();
	}

	internal string SetOutParamsAndReturnTrue(bool usedFullLength, int indents)
	{
		StringBuilder generatedText = new StringBuilder();

		// Each indent is four spaces
		string indentString = new String(' ', indents * 4);
		string consumedSource;

		if (usedFullLength)
		{
			consumedSource = SignatureInfo.LengthName;
		}
		else
		{
			consumedSource = "index";
		}

		if (SignatureInfo.ConsumedParameterExists)
		{
			generatedText.AppendFormat("{0}{1}sConsumed = {2};", indentString, SignatureInfo.CharacterPrimitive, consumedSource);
			generatedText.AppendLine();
		}

		generatedText.Append(AssignValue(indents));
		generatedText.AppendLine();

		generatedText.AppendFormat("{0}return true;", indentString);

		return generatedText.ToString();
	}

	internal string AssignValue(int indents)
	{
		StringBuilder generatedText = new StringBuilder();

		// Each indent is four spaces
		string indentString = new String(' ', indents * 4);
		
		string parsedValueFormula;
		if (Signed)
		{
			parsedValueFormula = "parsedValue * sign";
		}
		else
		{
			parsedValueFormula = "parsedValue";
		}

		if (TypeToParseInfo.PrimitiveName == TypeToParseInfo.ValueCalculationTypeName)
		{
			generatedText.AppendFormat("{0}value = {1};", indentString, parsedValueFormula);
		}
		else
		{
			generatedText.AppendFormat("{0}value = ({1})({2});", indentString, TypeToParseInfo.PrimitiveName, parsedValueFormula);
		}

		return generatedText.ToString();
	}

	internal string ParseOneHexCharacter(string index, int indents)
	{
		StringBuilder generatedText = new StringBuilder();

		// Each indent is four spaces
		string indentString = new String(' ', indents * 4);

		generatedText.AppendFormat("{0}nextCharacter = text[{1}];", indentString, index);
		generatedText.AppendLine();

		if (SignatureInfo.CharacterPrimitive == "byte")
		{
			generatedText.AppendFormat("{0}nextDigit = hexLookup[nextCharacter];", indentString);
			generatedText.AppendLine();
			generatedText.AppendFormat("{0}if (nextDigit == 0xFF)", indentString);
		}
		else if (SignatureInfo.CharacterPrimitive == "char")
		{
			generatedText.AppendFormat("{0}nextDigit = hexLookup[(byte)nextCharacter];", indentString);
			generatedText.AppendLine();
			generatedText.AppendFormat("{0}if (nextDigit == 0xFF || (nextCharacter >> 8) != 0)", indentString);
		}

		return generatedText.ToString();
	}
}
#>