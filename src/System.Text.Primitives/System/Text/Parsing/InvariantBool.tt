<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="PrimitiveParserHelpers.t4" #>
<#

List<UtfEncoding> utfEncodings = new List<UtfEncoding> { UtfEncoding.Utf8, UtfEncoding.Utf16 };
List<bool> consumedParamTypes = new List<bool> { false, true };
List<BufferType> bufferTypes = new List<BufferType> { BufferType.ArrayPointer, BufferType.ReadOnlySpan };

#>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in InvariantBool.tt.

namespace System.Text
{
    public static partial class PrimitiveParser
    {
<#
foreach (UtfEncoding utfEncoding in utfEncodings)
{
#>
        public static partial class Invariant<#=utfEncoding#>
        {
<#
    foreach (BufferType bufferType in bufferTypes)
    {
        foreach (bool consumedParamType in consumedParamTypes)
        {
            TryParseSignature tryParseSignature = new TryParseSignature(bufferType, consumedParamType, utfEncoding);
#>
            public <#=tryParseSignature.UnsafeModifier#>static bool TryParseBoolean(<#=tryParseSignature.BufferParamsText#>, out bool value<#=tryParseSignature.ConsumedParamText#>)
            {
                if (<#=tryParseSignature.LengthName#> >= 4)
                {
                    if ((text[0] == 'T' || text[0] == 't') &&
                        (text[1] == 'R' || text[1] == 'r') &&
                        (text[2] == 'U' || text[2] == 'u') &&
                        (text[3] == 'E' || text[3] == 'e'))
                    {
                        <#=SetConsumedIfApplicable(consumedParamType, tryParseSignature.CharacterPrimitive, "4")#>
                        value = true;
                        return true;
                    }
                    if (<#=tryParseSignature.LengthName#> >= 5)
                    {
                        if ((text[0] == 'F' || text[0] == 'f') &&
                            (text[1] == 'A' || text[1] == 'a') &&
                            (text[2] == 'L' || text[2] == 'l') &&
                            (text[3] == 'S' || text[3] == 's') &&
                            (text[4] == 'E' || text[4] == 'e'))
                        {
                            <#=SetConsumedIfApplicable(consumedParamType, tryParseSignature.CharacterPrimitive, "5")#>
                            value = false;
                            return true;
                        }
                    }
                }
                <#=SetConsumedIfApplicable(consumedParamType, tryParseSignature.CharacterPrimitive, "0")#>
                value = default(bool);
                return false;
            }
<#
        }
    }
#>
        }
<#
}
#>
    }
}
<#+
string SetConsumedIfApplicable(bool applicable, string characterPrimitive, string value)
{
    if (applicable)
    {
        return string.Format("{0}sConsumed = {1};", characterPrimitive, value);
    }
    return "// No need to set consumed";
}
#>