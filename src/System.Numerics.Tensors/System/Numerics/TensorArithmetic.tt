<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ include file="TensorTemplate.ttinclude" #>// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Text;

namespace System.Numerics
{
    internal interface ITensorArithmetic<T>
    {
        T One { get; }
<# foreach (MethodConfiguration method in methodConfiguration) { #>
        <#= method.GetResultMethodSignature("T")#>;
<# } #>
    }

    internal static class TensorArithmetic<T>
    {
        public static ITensorArithmetic<T> Instance => TensorArithmetic.GetArithmetic<T>();
    }

    internal static class TensorArithmetic
    { 
        public static ITensorArithmetic<T> GetArithmetic<T>()
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            <#=GenerateIfStatementHeader(type)#>
            {
                return (ITensorArithmetic<T>)new <#=type.ClassPrefix#>Arithmetic();
            }
<# } #>
            return null;
        }
    }
    
<# foreach (TypeConfiguration type in typeConfiguration) { #>
    internal class <#=type.ClassPrefix#>Arithmetic : ITensorArithmetic<<#=type.TypeName#>>
    {
        public <#=type.TypeName#> One => <#=type.OneLiteral#>;

<# foreach (MethodConfiguration method in methodConfiguration) { #>
        public <#= method.GetResultMethodSignature(type.TypeName)#>
        {
<# if ((method.IsNumeric && !type.SupportsNumeric) ||  (method.IsBitwise && !type.SupportsBitwise) || (type.UnsupportedMethods.Contains(method.MethodName))) { #>
            throw new NotSupportedException();
<# } else if (method.Operator != null) { #>
            for(int i = 0; i < <#= method.ResultName #>.Length; i++)
            {
                // TODO: vectorize
                <#=method.GetElementOperation(type.TypeName, ".Buffer[i]")#>;
            }
<# } else if (method.MethodName == "Contract") {#>
            var summingDimensions = new int[leftAxes.Length];
            for(int i = 0; i < leftAxes.Length; i++)
            {
                summingDimensions[i] = left.Dimensions[leftAxes[i]];
            }

            var summingStrides = ArrayUtilities.GetStrides(summingDimensions);
            int summingLength = (int)ArrayUtilities.GetProduct(summingDimensions);

            var resultStrides = ArrayUtilities.GetStrides(result.Dimensions);

            // translates from result index to left non-summing dimensions' index portion
            // since left non-summing dimensions are given precedence in result, the end is zero-padded
            int[] leftNonSummingStrides = new int[result.Rank];

            // translates from summing index to left summing dimensions' index portion
            int[] leftSummingStrides = new int[leftAxes.Length];
            ArrayUtilities.GetSplitStrides(left.Dimensions, leftAxes, leftNonSummingStrides, 0, leftSummingStrides, 0);

            // translates from result index to right non-summing dimensions' index portion
            // since right non-summing dimensions are given not precedence in result, the begingin is zero-padded to account for dimensions that come from left.
            int[] rightNonSummingStrides = new int[result.Rank];
            int rightNonSummingStridesOffset = result.Rank - (left.Rank - leftAxes.Length);

            // translates from summing index to right summing dimensions' index portion
            int[] rightSummingStrides = new int[rightAxes.Length];
            ArrayUtilities.GetSplitStrides(right.Dimensions, rightAxes, rightNonSummingStrides, rightNonSummingStridesOffset, rightSummingStrides, 0);

            for (int resultIndex = 0; resultIndex < result.Length; resultIndex++)
            {
                <#=type.TypeName#> sum = (<#=type.TypeName#>)0;

                int leftIndexNonSumming = ArrayUtilities.TransformIndexByStrides(resultIndex, resultStrides, leftNonSummingStrides);
                int rightIndexNonSumming = ArrayUtilities.TransformIndexByStrides(resultIndex, resultStrides, rightNonSummingStrides);

                for (int summingIndex = 0; summingIndex < summingLength; summingIndex++)
                {
                    int leftIndexSumming = ArrayUtilities.TransformIndexByStrides(summingIndex, summingStrides, leftSummingStrides);
                    int rightIndexSumming = ArrayUtilities.TransformIndexByStrides(summingIndex, summingStrides, rightSummingStrides);

                    int leftIndex = leftIndexNonSumming + leftIndexSumming;
                    int rightIndex = rightIndexNonSumming + rightIndexSumming;

                    sum += (<#=type.TypeName#>)(left.Buffer[leftIndex] * right.Buffer[rightIndex]);
                }

                result.Buffer[resultIndex] = sum;
            }
<# } #>
        }
<# } #>
    }
<# } #>
}
