<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Adds the specified event handler, which is called when specified source raises the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
      <returns>A new object to contain listeners to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Removes the specified event handler from the specified source.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</param>
      <param name="handler">The source object that the raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</summary>
      <returns>A new object to contain listeners to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Removes the specified event handler from the specified source.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Provides information for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class with the specified <paramref name="isCancelable" /> value.</summary>
      <param name="isCancelable">A value that indicates whether the event is cancelable.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether to cancel the event.</summary>
      <returns>
        <see langword="true" /> if the event is to be canceled; otherwise, <see langword="false" />. The default value is <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">If the value of <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> is <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether the event is cancelable.</summary>
      <returns>
        <see langword="true" /> if the event is cancelable, otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
      <returns>A new object to contain listeners to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Removes the specified event handler from the specified source.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The listener to remove.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event on the specified source.</summary>
      <param name="source">The object with the event.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>Provides an extension of <see cref="T:System.ComponentModel.PropertyDescriptor" /> that accounts for the additional property characteristics of a dependency property.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to add the handler for.</param>
      <param name="handler">The delegate to add as a listener.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>Gets the collection of attributes for this member.</summary>
      <returns>The <see cref="T:System.ComponentModel.AttributeCollection" /> collection of attributes.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Returns whether resetting an object changes its value.</summary>
      <param name="component">The component to test for reset capability.</param>
      <returns>
        <see langword="true" /> if resetting the component changes its value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>Gets the name of the category that the member belongs to, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute" />, the category name is set to the default category, <see langword="Misc" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>Gets the type of the component this property is bound to.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> are invoked, the object specified might be an instance of this type.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>Gets the type converter for this property.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> that is used to convert the <see cref="T:System.Type" /> of this property.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>Returns the dependency property identifier.</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute" />, the property value is set to the default, which is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</summary>
      <returns>A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" /> if this member should be set only at design time; <see langword="false" /> if the member can be set during run time. If there is no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, the return value is the default, which is <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
      <returns>The name to display for the property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> instances for equality.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the values are equivalent; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided property name.</summary>
      <param name="name">The registered name of a dependency property or an attached property.</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns the property definition.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object you want to set the property for.</param>
      <param name="ignorePropertyType">Specifies to ignore the property type.</param>
      <returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to check.</param>
      <returns>If the property described by <paramref name="property" /> is a dependency property, returns a valid <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />. Otherwise, returns a <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for a provided dependency property and target type.</summary>
      <param name="dependencyProperty">The identifier for a dependency property.</param>
      <param name="targetType">The type of the object where the property is set.</param>
      <returns>A <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> for the provided dependency property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="instance">A component to get the properties for.</param>
      <param name="filter">An array of type <see cref="T:System.Attribute" /> to use as a filter.</param>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>Gets an editor of the specified type.</summary>
      <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
      <returns>An instance of the requested editor type, or <see langword="null" /> if an editor cannot be found.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>Returns the current value of the property on a component.</summary>
      <param name="component">The component instance.</param>
      <returns>The requested value.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.</summary>
      <returns>
        <see langword="true" /> if the property is an attached property; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>Gets a value that indicates the value of the <see cref="T:System.ComponentModel.BrowsableAttribute" /> on the property.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.ComponentModel.BrowsableAttribute" /> was specified on the property; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>
        <see langword="true" /> if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" /> constructor of the value true; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>Gets a value indicating whether this property is read-only.</summary>
      <returns>
        <see langword="true" /> if the property is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>Gets the metadata associated with the dependency property.</summary>
      <returns>The dependency property metadata.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>Gets the represented <see cref="T:System.Type" /> of the dependency property.</summary>
      <returns>The <see cref="T:System.Type" /> of the dependency property.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Enables other objects to be notified when this property changes.</summary>
      <param name="component">The component to add the handler for.</param>
      <param name="handler">The delegate to add as a listener.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>Resets the value for this property of the component to the default value.</summary>
      <param name="component">The component with the property value that is to be reset to the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the component to a different value.</summary>
      <param name="component">The component with the property value that is to be set.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the value of this property needs to be persisted by serialization processes.</summary>
      <param name="component">The component with the property to be examined for persistence.</param>
      <returns>
        <see langword="true" /> if the property should be persisted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</summary>
      <returns>
        <see langword="true" /> if notifications for this property may originate from outside the property descriptor, such as from the component itself. <see langword="false" /> if notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>Returns the <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> value.</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the weak event listener pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</summary>
      <param name="source">The source object that raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</summary>
      <returns>A new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Removes the specified event handler from the specified source.</summary>
      <param name="source">The source object that raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event on the specified source.</summary>
      <param name="source">The source object that raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event on the specified source.</summary>
      <param name="source">The source object that raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Provides an abstract base class for types that describe how to divide the items in a collection into groups.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class.</summary>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>Gets or sets a custom comparer that sorts groups using an object that implements <see cref="T:System.Collections.IComparer" />.</summary>
      <returns>A custom comparer that sorts groups using an object that implements <see cref="T:System.Collections.IComparer" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name(s) for the given item.</summary>
      <param name="item">The item to return group names for.</param>
      <param name="level">The level of grouping.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to supply to the converter.</param>
      <returns>The group name(s) for the given item.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.</summary>
      <returns>The collection of names that are used to initialize a group with a set of subgroups with the given names.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.</summary>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
      <returns>
        <see langword="true" /> if the names match and the item belongs to the group; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property on instances of this class.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> property on instances of this class.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>Gets the collection of sort criteria in which to sort the groups.</summary>
      <returns>The collection of sort criteria in which to sort the groups.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
      <returns>
        <see langword="true" /> if this view support filtering; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
      <returns>
        <see langword="true" /> if this view supports grouping; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
      <returns>
        <see langword="true" /> if this view supports sorting; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Returns a value that indicates whether a given item belongs to this collection view.</summary>
      <param name="item">The object to check.</param>
      <returns>
        <see langword="true" /> if the item belongs to this collection view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.</summary>
      <returns>The culture to use during sorting.</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>When implementing this interface, raise this event after the current item has been changed.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Gets the current item in the view.</summary>
      <returns>The current item of the view or <see langword="null" /> if there is no current item.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</summary>
      <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> within the view.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view.</summary>
      <returns>A method used to determine if an item is suitable for inclusion in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Gets the top-level groups.</summary>
      <returns>A read-only collection of the top-level groups or <see langword="null" /> if there are no groups.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the beginning of the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Returns a value that indicates whether the resulting view is empty.</summary>
      <returns>
        <see langword="true" /> if the resulting view is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item within the view; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recreates the view.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Returns the underlying collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object that is the underlying collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
      <returns>The newly created view.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>Defines properties that enables sorting, grouping, and filtering on a <see cref="T:System.Windows.Data.CollectionView" /> in real time.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>Gets a value that indicates whether the collection view supports turning filtering data in real time on or off.</summary>
      <returns>
        <see langword="true" /> if the collection view supports turning live filtering on or off; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>Gets a value that indicates whether the collection view supports turning grouping data in real time on or off.</summary>
      <returns>
        <see langword="true" /> if the collection view supports turning live grouping on or off; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>Gets a value that indicates whether the collection view supports turning sorting data in real time on or off.</summary>
      <returns>
        <see langword="true" /> if the collection view supports turning live sorting on or off; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>Gets or sets a value that indicates whether filtering data in real time is enabled.</summary>
      <returns>
        <see langword="true" /> if filtering data in real time is enabled; <see langword="false" /> if live filtering is not enabled; <see langword="null" /> if it cannot be determined whether the collection view implements live filtering.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>Gets or sets a value that indicates whether grouping data in real time is enabled.</summary>
      <returns>
        <see langword="true" /> if grouping data in real time is enable; <see langword="false" /> if live grouping is not enabled; <see langword="null" /> if it cannot be determined whether the collection view implements live grouping.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>Gets or sets a value that indicates whether sorting in real time is enabled.</summary>
      <returns>
        <see langword="true" /> if sorting data in real time is enable; <see langword="false" /> if live sorting is not enabled; <see langword="null" /> if it cannot be determined whether the collection view implements live sorting.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>Gets a collection of strings that specify the properties that participate in filtering data in real time.</summary>
      <returns>A collection of strings that specify the properties that participate in filtering data in real time.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>Gets a collection of strings that specify the properties that participate in grouping data in real time.</summary>
      <returns>A collection of strings that specify the properties that participate in grouping data in real time.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>Gets a collection of strings that specify the properties that participate in sorting data in real time.</summary>
      <returns>A collection of strings that specify the properties that participate in sorting data in real time.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to provide editing capabilities to a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Adds a new item to the collection.</summary>
      <returns>The new item that is added to the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
      <returns>
        <see langword="true" /> if a new item can be added to the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
      <returns>
        <see langword="true" /> if the collection view can discard pending changes and restore the original values of an edited object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Ends the edit transaction and, if possible, restores the original value to the item.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Ends the add transaction and discards the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
      <returns>
        <see langword="true" /> if an item can be removed from the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Ends the edit transaction and saves the pending changes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Ends the add transaction and saves the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Gets the item that is being added during the current add transaction.</summary>
      <returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> is <see langword="true" />; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Gets the item in the collection that is being edited.</summary>
      <returns>The item in the collection that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> is <see langword="true" />; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Begins an edit transaction of the specified item.</summary>
      <param name="item">The item to edit.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
      <returns>
        <see langword="true" /> if an add transaction is in progress; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
      <returns>
        <see langword="true" /> if an edit transaction is in progress; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Gets or sets the position of the new item placeholder in the collection view.</summary>
      <returns>One of the enumeration values that specifies the position of the new item placeholder in the collection view.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Removes the specified item from the collection.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position from the collection.</summary>
      <param name="index">The position of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than the number of items in the collection view.</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" /> implements to enable specifying adding items of a specific type.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>Adds the specified object to the collection.</summary>
      <param name="newItem">The object to add to the collection.</param>
      <returns>The object that is added to the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>Gets a value that indicates whether a specified object can be added to the collection.</summary>
      <returns>
        <see langword="true" /> if a specified object can be added to the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>Defines a property that provides information about an object's properties.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>Gets a collection that contains information about the properties that are available on the items in a collection.</summary>
      <returns>A collection that contains information about the properties that are available on the items in a collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>Contains information about a property.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ItemPropertyInfo" /> class.</summary>
      <param name="name">The name of the property.</param>
      <param name="type">The type of the property.</param>
      <param name="descriptor">An object that contains additional information about the property.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>Gets an object that contains additional information about the property.</summary>
      <returns>An object that contains additional information about the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>Gets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>Gets the type of the property.</summary>
      <returns>The type of the property.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Specifies where the placeholder for a new item appears in the collection.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>Provides a <see cref="T:System.Windows.WeakEventManager" /> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Adds the specified event handler, which is called when specified source raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event for the specified property.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to listen for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">More than one method is associated with <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Adds the specified listener to the list of listeners on the specified source.</summary>
      <param name="source">The object with the event.</param>
      <param name="listener">The object to add as a listener.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to listen for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</summary>
      <returns>A new object to contain listeners to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes listeners that are no longer active from the data for the provided source.</summary>
      <param name="source">Source object to remove all listeners from.</param>
      <param name="data">The data to purge. This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <param name="purgeAll">Set to <see langword="true" /> to stop listening and to completely remove all data.</param>
      <returns>
        <see langword="true" /> if some entries were removed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Removes the specified event handler from the specified source.</summary>
      <param name="source">The source object that the raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</param>
      <param name="handler">The delegate that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">More than one method is associated with <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Removes the specified listener from the list of listeners on the provided source.</summary>
      <param name="source">The object to remove the listener from.</param>
      <param name="listener">The listener to remove.</param>
      <param name="propertyName">The name of the property that exists on <paramref name="source" /> upon which to stop listening for changes. Set to <see cref="F:System.String.Empty" /> to indicate "any property".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event on the provided source.</summary>
      <param name="source">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> class.</summary>
      <param name="filter">The options that describe this property filter.</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <param name="value">The object to compare to this <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> is equal to the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>Gets the filter options for this <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute.</summary>
      <returns>The property filter options.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute.</summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>Returns a value that indicates whether the property filter options of the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework attribute match the property filter options of the provided object.</summary>
      <param name="value">The object to compare. This object is expected to be a <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>
        <see langword="true" /> if a match exists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> method. This enumeration is used to specify the value of the <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> property.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>Return all properties.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>Return only those properties that are not valid given the current context of the object.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>Return no properties</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>Return only those properties that have local values currently set.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>Return any property that is valid on the  object in the current scope.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Defines the direction and the property name to be used as the criteria for sorting a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure.</summary>
      <param name="propertyName">The name of the property to sort the list by.</param>
      <param name="direction">The sort order.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="direction" /> parameter does not specify a valid value.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
      <returns>A <see cref="T:System.ComponentModel.ListSortDirection" /> value to indicate whether to sort in ascending or descending order.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.</summary>
      <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance of <see cref="T:System.ComponentModel.SortDescription" /> have the same values.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Returns the hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <returns>The hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Gets a value that indicates whether this object is in an immutable state.</summary>
      <returns>
        <see langword="true" /> if this object is in use; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value equality.</summary>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> objects for value inequality.</summary>
      <param name="sd1">The first instance to compare.</param>
      <param name="sd2">The second instance to compare.</param>
      <returns>
        <see langword="true" /> if the values are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Gets or sets the property name being used as the sorting criteria.</summary>
      <returns>The default value is null.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Gets an empty and non-modifiable instance of <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the <paramref name="item" /> is inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>Describes the level of detail to trace about a particular object.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>Traces all additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>Traces some additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>Traces a medium amount of additional information.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>Traces no available additional information.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>Gets an animation trace source.</summary>
      <returns>An animation trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>Gets a data-binding trace source.</summary>
      <returns>A data-binding trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>Gets a dependency property trace source.</summary>
      <returns>A dependency property trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>Gets a document trace source.</summary>
      <returns>A document trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Gets a Freezable trace source.</summary>
      <returns>A Freezable trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>Gets the value of the <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> attached property for a specified element.</summary>
      <param name="element">The element from which the property value is read.</param>
      <returns>The <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> property value for the element.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>Gets an hwnd host trace source.</summary>
      <returns>An hwnd host trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>Gets a markup trace source.</summary>
      <returns>A markup trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>Gets a name scope trace source.</summary>
      <returns>A name scope trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>Refreshes trace sources, by forcing the app.config file to be re-read.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>Gets a resource dictionary trace source.</summary>
      <returns>A resource dictionary trace source.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>Gets a routed event trace source.</summary>
      <returns>A routed event trace source.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>Sets the value of the <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> attached property to a specified element.</summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="traceLevel">The needed <see cref="T:System.Diagnostics.PresentationTraceLevel" /> value.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>Gets a shell trace source.</summary>
      <returns>A shell trace source.</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>Identifies the <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> attached property.</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>The exception that is thrown when an input file or a data stream that is supposed to conform to a certain file format specification is malformed.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class and initializes it with serialized data. This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a specified error message and exception type.</summary>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value and a specified error message.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" /> class with a source URI value, a specified error message, and an exception type.</summary>
      <param name="sourceUri">The <see cref="T:System.Uri" /> value of the file that caused this error.</param>
      <param name="message">A <see cref="T:System.String" /> value that represents the error message.</param>
      <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" /> property, which represents the cause of the current exception.</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>Gets the name of a file that caused the <see cref="T:System.IO.FileFormatException" />.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the name the file that caused the exception.</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>Specifies the location where the X.509 certificate that is used in signing is stored.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>The certificate is embedded in its own <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>The certificate is embedded in the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> that is created for the signature being added.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>The certificate in not embedded in the package.</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>Specifies the compression level for content that is stored in a <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>Compression is optimized for performance.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>Compression is optimized for size.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>Compression is optimized for a balance between size and performance.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>Compression is turned off.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>Compression is optimized for high performance.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>Represents an OLE compound file that contains an encrypted package.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>Closes the encrypted package and the OLE compound file that holds it.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> on the specified stream.</summary>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and gives it the specified file name.</summary>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (on the specified stream) that uses the specified unencrypted package as its content.</summary>
      <param name="envelopeStream">The stream on which to create the file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> or <paramref name="packageStream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> does not provide read/write access.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses the specified unencrypted package as its content, and gives it the specified file name.</summary>
      <param name="envelopeFileName">The name of the OLE compound file.</param>
      <param name="packageStream">The stream representing the existing unencrypted package.</param>
      <param name="publishLicense">The publish license that is embedded in the compound file.</param>
      <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
      <returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> or <paramref name="packageStream" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>Gets a value that specifies whether the file was opened with access to read, write, or both.</summary>
      <returns>The <see cref="T:System.IO.FileAccess" /> value that was used to open the file.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and its package content.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
      <returns>The <see cref="T:System.IO.Packaging.Package" /> in the envelope.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</summary>
      <param name="stream">The stream that is tested.</param>
      <returns>
        <see langword="true" /> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</summary>
      <param name="fileName">The file that is tested.</param>
      <returns>
        <see langword="true" /> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>Open the encrypted package in the specified stream.</summary>
      <param name="envelopeStream">The stream containing the encrypted package.</param>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>Open the encrypted package in the specified file as read only and unshared.</summary>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>Open the encrypted package in the specified file as unshared and with the specified access.</summary>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Open the encrypted package in the specified file and gives it the specified access and sharing.</summary>
      <param name="envelopeFileName">The file containing the encrypted package.</param>
      <param name="access">The type of access.</param>
      <param name="sharing">The type of sharing.</param>
      <returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>Gets the core package properties (such as Title and Subject) of the rights managed document.</summary>
      <returns>The <see cref="T:System.IO.Packaging.PackageProperties" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" /> and the <see cref="T:System.Security.RightsManagement.UseLicense" />s stored in the OLE compound file that embodies the rights-management protected package</summary>
      <returns>The <see cref="T:System.IO.Packaging.RightsManagementInformation" /> for the package.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>Gets an object that provides access to the compound file streams outside the encrypted package.</summary>
      <returns>A <see cref="T:System.IO.Packaging.StorageInfo" /> representing streams in the OLE compound file that are outside the encrypted package.</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>Specifies the encryption option for parts in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>No encryption.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>Encryption supported through rights management.</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> that is raised when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detects an invalid signature.</summary>
      <param name="sender">The invalid <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>Represents a container that can store multiple data objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package" /> class that uses a given <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="openFileAccess">The file IO permissions for the package.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="openFileAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>Saves and closes the package plus all underlying part streams.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>Creates a new uncompressed part with a given URI and content type.</summary>
      <param name="partUri">The uniform resource identifier (URI) of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <returns>The new created part.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Creates a new part with a given URI, content type, and compression option.</summary>
      <param name="partUri">The URI of the new part.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> or <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> compression.</param>
      <returns>The new created part.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> or <paramref name="contentType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is already present in the package.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>When overridden in a derived class, creates a new part in the package.</summary>
      <param name="partUri">The uniform resource identifier (URI) for the part being created.</param>
      <param name="contentType">The content type of the data stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
      <returns>The created part.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, and relationship type.</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <returns>The package-level relationship to the specified part.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).</summary>
      <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
      <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the package.</param>
      <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
      <param name="id">A unique XML identifier.</param>
      <returns>The package-level relationship to the specified part.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="targetUri" /> part is a <see cref="T:System.IO.Packaging.PackageRelationship" />, or <paramref name="targetMode" /> is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> and <paramref name="targetUri" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" /> is not valid.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier; or a part with the specified <paramref name="id" /> already occurs in the package.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>Deletes a part with a given URI from the package.</summary>
      <param name="partUri">The URI of the part to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>When overridden in a derived class, deletes a part with a given URI.</summary>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to delete.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>Deletes a package-level relationship.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the <see cref="T:System.IO.Packaging.PackageRelationship" /> to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>Flushes and saves the content of all parts and relationships, closes the package, and releases all resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>Gets the file access setting for the package.</summary>
      <returns>One of the <see cref="T:System.IO.FileAccess" /> values: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />, or <see cref="F:System.IO.FileAccess.ReadWrite" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>When overridden in a derived class, saves the content of all parts and relationships to the derived class store.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>Returns the part with a given URI.</summary>
      <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
      <returns>The part with the specified <paramref name="partUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>When overridden in a derived class, returns the part addressed by a given URI.</summary>
      <param name="partUri">The uniform resource identifier (URI) of the part to retrieve.</param>
      <returns>The requested part; or <see langword="null" />, if a part with the specified <paramref name="partUri" /> is not in the package.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>Returns a collection of all the parts in the package.</summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> elements that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>When overridden in a derived class, returns an array of all the parts in the package.</summary>
      <returns>An array of all the parts that are contained in the package.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>Returns the package-level relationship with a given identifier.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <returns>The package-level relationship with the specified <paramref name="id" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">A relationship with the specified <paramref name="id" /> is not in the package.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>Returns a collection of all the package-level relationships.</summary>
      <returns>A collection of all the package-level relationships that are contained in the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of all the package-level relationships that match a given <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> to match and return in the collection.</param>
      <returns>A collection of package-level relationships that match the specified <paramref name="relationshipType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>Opens a package on a given IO stream.</summary>
      <param name="stream">The IO stream on which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>Opens a package with a given IO stream and file mode.</summary>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> value is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package with a given IO stream, file mode, and file access setting.</summary>
      <param name="stream">The IO stream on which to open the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
      <exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" /> is write-only; or the package to open requires write or read/write permission and the specified <paramref name="stream" /> is read-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>Opens a package at a given path and file name.</summary>
      <param name="path">The path and file name of the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>Opens a package at a given path using a given file mode.</summary>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a package at a given path using a given file mode and file access setting.</summary>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" /> or <paramref name="packageAccess" /> is not valid.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a package at a given path using a given file mode, file access, and file share setting.</summary>
      <param name="path">The path and file name of the package.</param>
      <param name="packageMode">The file mode in which to open the package.</param>
      <param name="packageAccess">The file access in which to open the package.</param>
      <param name="packageShare">The file sharing mode in which to open the package.</param>
      <returns>The opened package.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" />, <paramref name="packageAccess" />, or <paramref name="packageShare" /> is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>Gets the core properties of the package.</summary>
      <returns>The core properties of the package.</returns>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>Indicates whether a part with a given URI is in the package.</summary>
      <param name="partUri">The <see cref="T:System.Uri" /> of the part to check for.</param>
      <returns>
        <see langword="true" /> if a part with the specified <paramref name="partUri" /> is in the package; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> uniform resource identifier (URI).</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>Indicates whether a package-level relationship with a given ID is contained in the package.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <returns>
        <see langword="true" /> if a package-level relationship with the specified <paramref name="id" /> is in the package; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended for application use.  Use the type-safe <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> method instead.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>Represents a digital signature that is applied to a set of package parts and relationships.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>Gets the X.509 certificate embedding option.</summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values that specifies the option for the digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>Returns an ordered list of the <see cref="T:System.Security.Cryptography.Xml.Transform" /> operations applied to a given part.</summary>
      <param name="partName">The <see cref="T:System.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the transform list for.</param>
      <returns>An ordered list of URI strings, such as <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> or <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, that represents the canonical XML transformations applied to the part with the given <paramref name="partName" /> URI.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>Gets or sets the XML digital signature.</summary>
      <returns>The XML digital signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackagePart" /> that contains the signature.</summary>
      <returns>The package part that contains the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>Gets the URI string that identifies the signature type.</summary>
      <returns>A URI string that identifies the signature type. The default is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>Gets the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</summary>
      <returns>A byte array that contains the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>Gets a collection of all the <see cref="T:System.IO.Packaging.PackagePart" /> objects signed with the signature.</summary>
      <returns>A collection that contains all the package parts signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>Gets the list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</summary>
      <returns>The list of the <see cref="T:System.IO.Packaging.PackageRelationship" /> parts that have been signed with the signature.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>Gets the X.509 certificate of the signer.</summary>
      <returns>The digital certificate of the signer, or <see langword="null" /> if the certificate is not stored in the <see cref="T:System.IO.Packaging.Package" />.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>Gets the date and time that the signature was created.</summary>
      <returns>The date and time that the signature was created.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>Gets the format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property.</summary>
      <returns>The format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>Verifies the digital signature against an X.509 certificate.</summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies the digital signature against a given X.509 certificate.</summary>
      <param name="signingCertificate">The signer's X.509 certificate to verify the digital signature against.</param>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" /> values that identifies a problem.</returns>
      <exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> has been deleted.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> class for use with a specified <see cref="T:System.IO.Packaging.Package" />.</summary>
      <param name="package">The package associated with this signature manager.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> method to digitally sign package parts.</summary>
      <returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> values.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
      <returns>The signature that was added as a countersign; or <see langword="null" /> if no certificate could be located or the user canceled the certificate selection dialog.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Countersigns all the signatures in the package with a specified X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate to add as a countersign signature.</param>
      <returns>The signature that was added as a countersign.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" /></exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Countersigns a list of signatures with a given X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate to countersign each of the specified <paramref name="signatures" />.</param>
      <param name="signatures">The list of signatures to countersign.</param>
      <returns>The digital signature used to countersign each of the <paramref name="signatures" />.</returns>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="certificate" /> or <paramref name="signatures" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The package contains no signed <see cref="T:System.IO.Packaging.PackagePart" /> objects.</exception>
      <exception cref="T:System.ArgumentException">The package contains no <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> parts.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>Gets a URI string that identifies the default hash algorithm used to create and verify signatures.</summary>
      <returns>A URI string that identifies the default hash algorithm used to create and verify signatures.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>Returns the digital signature for a given signature uniform resource identifier (URI).</summary>
      <param name="signatureUri">The URI of the digital signature to return.</param>
      <returns>The digital signature for the specified <paramref name="signatureUri" />, or <see langword="null" /> if a signature for the given <paramref name="signatureUri" /> cannot be found.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>Gets or sets the URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures.</returns>
      <exception cref="T:System.ArgumentNullException">The string for the URI to set is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The string for the URI to set is empty.</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>Occurs when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> encounters an invalid signature.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>Gets a value that indicates whether the package contains any signatures.</summary>
      <returns>
        <see langword="true" /> if the package contains signatures; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box.</summary>
      <returns>The handle of the parent window to use to display the certificate selection dialog box.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>Removes all digital signatures from the package.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>Removes the digital signature with a given signature uniform resource identifier (URI).</summary>
      <param name="signatureUri">The URI of the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> to remove.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.</summary>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
      <returns>The digital signature used to sign the list of <paramref name="parts" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Signs a list of package parts with a given X.509 certificate.</summary>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified <paramref name="parts" />.</param>
      <returns>The digital signature used to sign the given list of <paramref name="parts" />; or <see langword="null" /> if no certificate could be found or the user clicked "Cancel" in the certificate selection dialog box.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate.</summary>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any objects to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).</summary>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any elements to sign.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).</summary>
      <param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
      <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
      <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
      <param name="signatureId">An identification string to associate with the signature.</param>
      <param name="signatureObjects">A list of custom data objects to sign.</param>
      <param name="objectReferences">A list of references to custom objects to sign.</param>
      <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" />, nor <paramref name="objectReferences" /> specify any elements to sign.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> of a part being signed references an empty, <see langword="null" />, or undefined <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> is not <see langword="null" /> and is not a valid XML schema ID (for example, begins with a leading numeric digit).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>Gets the uniform resource identifier (URI) of the signature origin part.</summary>
      <returns>The URI of the signature origin part.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>Gets the type of default signature origin relationship.</summary>
      <returns>The type of default signature origin relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>Gets a collection of all the signatures contained in the package.</summary>
      <returns>A collection of all the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> objects.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>Gets or sets the date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</summary>
      <returns>The date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>Gets a dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier.</summary>
      <returns>A dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifies a given X.509 certificate.</summary>
      <param name="certificate">The X.509 certificate to verify.</param>
      <returns>
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>Verifies the signatures on all signed parts within the package.</summary>
      <param name="exitOnFailure">
        <see langword="true" /> to exit on first failure; otherwise, <see langword="false" /> to continue and check all signatures.</param>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>Provides a base class for parts stored in a <see cref="T:System.IO.Packaging.Package" />.  This class is abstract.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" /> and part URI.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, and MIME content type.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart" /> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package" />, part URI, MIME content type, and <see cref="T:System.IO.Packaging.CompressionOption" />.</summary>
      <param name="package">The parent <see cref="T:System.IO.Packaging.Package" /> of the part.</param>
      <param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="contentType">The MIME content type of the part's data stream.</param>
      <param name="compressionOption">The compression option of the part data stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> or <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" /> value is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>Gets the compression option of the part content stream.</summary>
      <returns>The compression option of the part content stream.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>Gets the MIME type of the content stream.</summary>
      <returns>The MIME type of the content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).  
 -or-  
 The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method is empty.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).  
 -or-  
 <paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to a specified target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
      <param name="targetUri">The URI of the target part.</param>
      <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> if the target part is inside the <see cref="T:System.IO.Packaging.Package" />; or <see cref="F:System.IO.Packaging.TargetMode.External" /> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">The role of the relationship.</param>
      <param name="id">A unique ID for the relationship.</param>
      <returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" /> to the target <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> or <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" /> parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" /> is a relationship (the target of a relationship cannot be another relationship).  
 -or-  
 <paramref name="targetMode" /> is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" /> but <paramref name="targetUri" /> is an absolute external URI.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.  
-or-  
A part with the specified <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship" />.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to delete.</param>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>When overridden in a derived class, returns the MIME type of the part content.</summary>
      <returns>The MIME type of the part content.</returns>
      <exception cref="T:System.NotSupportedException">The derived class does not provide an override implementation required for the <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> method.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>Returns the relationship that has a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to return.</param>
      <returns>The relationship that matches the specified <paramref name="id" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).  
 -or-  
 A relationship with the specified <paramref name="id" /> does not exist in the package.</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>Returns a collection of all the relationships that are owned by this part.</summary>
      <returns>A collection of all the relationships that are owned by the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
      <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> of the relationships to locate and return in the collection.</param>
      <returns>A collection of the relationships that match the specified <paramref name="relationshipType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>Returns the part content data stream.</summary>
      <returns>The content data stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode" />.</summary>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <returns>The content stream of the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">The <paramref name="mode" /> parameter is not compatible with the package and part stream.  
 -or-  
 The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
      <returns>The content stream for the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" /> parameter is not a valid <see cref="T:System.IO.FileMode" /> enumeration value.  
 -or-  
 The <paramref name="access" /> parameter is not a valid <see cref="T:System.IO.FileAccess" /> enumeration value.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> or <paramref name="access" /> is not compatible with the package and part stream.  
-or-  
The <paramref name="access" /> parameter is specified as <see cref="F:System.IO.FileAccess.Read" /> but the <paramref name="mode" /> parameter requires write access.  (<see cref="T:System.IO.FileMode" /> values of <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, <see cref="F:System.IO.FileMode.Truncate" />, and <see cref="F:System.IO.FileMode.Append" /> require <see cref="F:System.IO.FileAccess.Write" /> or <see cref="F:System.IO.FileAccess.ReadWrite" /> access.)  
-or-  
The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method of the derived subclass is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>When overridden in a derived class, returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="mode">The I/O mode in which to open the content stream.</param>
      <param name="access">The access permissions to use in opening the content stream.</param>
      <returns>The content data stream of the part.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>Gets the parent <see cref="T:System.IO.Packaging.Package" /> of the part.</summary>
      <returns>The parent package of the part.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
      <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> of the relationship to check for.</param>
      <returns>
        <see langword="true" /> if this part owns a relationship with the specified <paramref name="id" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> is not a valid XML identifier.</exception>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
      <exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>Gets the URI of the part.</summary>
      <returns>The URI of the part relative to the package root.</returns>
      <exception cref="T:System.InvalidOperationException">The part has been deleted.  
 -or-  
 The <see cref="P:System.IO.Packaging.PackagePart.Package" /> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> or <see cref="M:System.IO.Packaging.Package.Close" /> has been called).</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackagePart" /> objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the parts in the collection.</summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackagePart" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{System#IO#Packaging#PackagePart}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>Represents the core properties of a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageProperties" /> class.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>When overridden in a derived class, gets or sets the category of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The category of the content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>When overridden in a derived class, gets or sets a value that represents the status of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The status of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>When overridden in a derived class, gets or sets a value that represents the type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was created.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was initially created.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>When overridden in a derived class, gets or sets a value that identifies the individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The individual or entity that created the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>When overridden in a derived class, gets or sets a description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>A description of the content contained in the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.PackageProperties" /> instance and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>When overridden in a derived class, gets or sets a value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>When overridden in a derived class, gets or sets a value that define a delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>A delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" /> and content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>When overridden in a derived class, gets or sets a value that identifies the language of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>A value that identifies the <see cref="T:System.IO.Packaging.Package" /> content language.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>When overridden in a derived class, gets or sets a value that identifies the user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The user who last modified the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> content was last printed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</summary>
      <returns>The date and time the <see cref="T:System.IO.Packaging.Package" /> was last changed.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>When overridden in a derived class, gets or sets the revision number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The revision number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>When overridden in a derived class, gets or sets the topic of the <see cref="T:System.IO.Packaging.Package" /> content.</summary>
      <returns>The topic of the <see cref="T:System.IO.Packaging.Package" /> content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>When overridden in a derived class, gets or sets the name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</summary>
      <returns>The name given to the <see cref="T:System.IO.Packaging.Package" /> and its content.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>When overridden in a derived class, gets or sets the version number of the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>The version number of the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>Represents an association between a source <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" />, and a target object which can be a <see cref="T:System.IO.Packaging.PackagePart" /> or external resource.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>Gets a string that identifies the relationship.</summary>
      <returns>A string that identifies the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>Gets the <see cref="T:System.IO.Packaging.Package" /> that contains this relationship.</summary>
      <returns>The package that contains this relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>Gets the qualified type name of the relationship.</summary>
      <returns>The qualified type name of the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>Gets the URI of the package or part that owns the relationship.</summary>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> or <see cref="T:System.IO.Packaging.PackagePart" /> that owns the relationship.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>Gets a value that indicates whether the target of the relationship is <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>An enumeration value that indicates whether <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> references a resource <see cref="F:System.IO.Packaging.TargetMode.Internal" /> or <see cref="F:System.IO.Packaging.TargetMode.External" /> to the <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>Gets the URI of the target resource of the relationship.</summary>
      <returns>The URI of the target resource.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>Represents a collection of <see cref="T:System.IO.Packaging.PackageRelationship" /> elements that are owned by a given <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the relationships in the collection.</summary>
      <returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackageRelationship" /> elements in the collection.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>This type or member supports the Windows Presentation Foundation infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Do not use - use <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>Defines <see cref="T:System.IO.Packaging.PackageRelationship" /> criteria to select part-level or package-level relationships.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> class.</summary>
      <param name="sourceUri">The uniform resource identifier (URI) of the <see cref="T:System.IO.Packaging.PackagePart" /> or the <see cref="T:System.IO.Packaging.Package" /> (<c>SourceUri</c>="/") that owns the relationship.</param>
      <param name="selectorType">The type of the <paramref name="selectionCriteria" />, either by relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />.</param>
      <param name="selectionCriteria">The qualification string that is used to select the relationships based on the <paramref name="selectorType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> or <paramref name="selectionCriteria" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="selectorType" /> parameter is not valid.</exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="selectorType" /> parameter is <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> but <paramref name="selectionCriteria" /> is not a valid XML Schema Definition (XSD) identifier (ID).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="selectionCriteria" /> is not valid for the specified <paramref name="selectorType" />.
-or-
The <paramref name="sourceUri" /> is not the <see cref="T:System.IO.Packaging.Package" /> root ("/") and is also not a valid <see cref="T:System.IO.Packaging.PackagePart" /> URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>Returns a list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects that match the defined <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />, <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />, and <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />.</summary>
      <param name="package">The package from which to select the relationships based on the selection criteria.</param>
      <returns>A list of relationships that match the selection parameters specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>Gets the selection criteria specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selection criteria based on the <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>Gets the <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</summary>
      <returns>The selector type of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>Gets the root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</summary>
      <returns>The root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" /> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> constructor as the owner of the relationship.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>Specifies the type of selection criteria that is used to match and return <see cref="T:System.IO.Packaging.PackageRelationship" /> selections through a <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>Provides utility methods to compose and parse pack URI objects.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two pack URIs are equivalent.</summary>
      <param name="firstPackUri">The first pack URI.</param>
      <param name="secondPackUri">The second pack URI.</param>
      <returns>A signed integer indicating the relationship between <paramref name="firstPackUri" /> and <paramref name="secondPackUri" />.  
  Value  

  Meaning  

  Less than 0  

 <paramref name="firstPackUri" /> is less than <paramref name="secondPackUri" />.  

  0  

 <paramref name="firstPackUri" /> is equivalent to <paramref name="secondPackUri" />.  

  Greater than 0  

 <paramref name="firstPackUri" /> is greater than <paramref name="secondPackUri" />.</returns>
      <exception cref="T:System.ArgumentException">Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> is not an absolute URI.  
 -or-  
 Either <paramref name="firstPackUri" /> or <paramref name="secondPackUri" /> do not begin with a "pack://" scheme.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>Returns a value that indicates whether two package part URIs are equivalent.</summary>
      <param name="firstPartUri">The URI of the first <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <param name="secondPartUri">The URI of the second <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <returns>A value that indicates the relationship between <paramref name="firstPartUri" /> and <paramref name="secondPartUri" />.  
  Value  

  Meaning  

  Less than 0  

 <paramref name="firstPartUri" /> is less than <paramref name="secondPartUri" />.  

  0  

 <paramref name="firstPartUri" /> is equivalent to <paramref name="secondPartUri" />.  

  Greater than 0  

 <paramref name="firstPartUri" /> is greater than <paramref name="secondPartUri" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> or <paramref name="secondPartUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>Creates a new pack URI that points to a package.</summary>
      <param name="packageUri">The URI of the referenced <see cref="T:System.IO.Packaging.Package" />.</param>
      <returns>The pack URI for the <see cref="T:System.IO.Packaging.Package" /> referenced by the given <paramref name="packageUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI and the URI of a part in the package.</summary>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <returns>The pack URI of the given <see cref="T:System.IO.Packaging.PackagePart" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.  
-or-  
<paramref name="partUri" /> is not a valid part URI syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" /> URI, the URI of a part in the package, and a "#" fragment to append.</summary>
      <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the package.</param>
      <param name="fragment">A "#" reference identifying an element within the package part.</param>
      <returns>The pack URI that identifies the specified package, package part, and fragment.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is not an absolute URI.  
-or-  
<paramref name="partUri" /> is not a valid part URI syntax.  
-or-  
<paramref name="fragment" /> is empty or does begin with "#".</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>Creates a formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI.</summary>
      <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> within the package.</param>
      <returns>A formatted <see cref="T:System.IO.Packaging.PackagePart" /> URI.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is not an absolute <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>Returns the normalized form of a specified <see cref="T:System.IO.Packaging.PackagePart" /> URI.</summary>
      <param name="partUri">The <see cref="T:System.IO.Packaging.PackagePart" /> URI to normalize.</param>
      <returns>The normalized form of the given <paramref name="partUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> does not have a valid <see cref="T:System.Uri" /> syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>Returns the inner URI that points to the entire package of a specified pack URI.</summary>
      <param name="packUri">The pack URI from which to return the URI of the <see cref="T:System.IO.Packaging.Package" />.</param>
      <returns>The URI of the <see cref="T:System.IO.Packaging.Package" /> from the specified <paramref name="packUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packUri" /> is not an absolute <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>Returns the URI of a <see cref="T:System.IO.Packaging.PackagePart" /> within a specified pack URI.</summary>
      <param name="packUri">The pack URI from which to return the <see cref="T:System.IO.Packaging.PackagePart" /> URI.</param>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackagePart" /> in the given <paramref name="packUri" />, or <see langword="null" /> if <paramref name="packUri" /> points to a package instead of a <see cref="T:System.IO.Packaging.PackagePart" />.</returns>
      <exception cref="T:System.ArgumentNullException">If the <paramref name="packUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">If the <paramref name="packUri" /> is not an absolute <see cref="T:System.Uri" />.
-or-
<paramref name="packUri" /> does not have the "pack://" scheme.
-or-
The partUri extracted from <paramref name="packUri" /> does not conform to the valid partUri syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>Returns the URI of the relationship part associated with a specified <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
      <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> to return the URI for the associated <see cref="T:System.IO.Packaging.PackageRelationship" />.</param>
      <returns>The URI of the <see cref="T:System.IO.Packaging.PackageRelationship" /> part associated with the <see cref="T:System.IO.Packaging.PackagePart" /> identified by <paramref name="partUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> syntax is not valid for a package part URI.  
-or-  
<paramref name="partUri" /> is an absolute URI.  
-or-  
<paramref name="partUri" /> references a relationship part.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>Returns the relative URI between two specified <see cref="T:System.IO.Packaging.PackagePart" /> URIs.</summary>
      <param name="sourcePartUri">The URI of the source part.</param>
      <param name="targetPartUri">The URI of the target part.</param>
      <returns>The relative URI from <paramref name="sourcePartUri" /> to <paramref name="targetPartUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetPartUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Either the <paramref name="sourcePartUri" /> or <paramref name="targetPartUri" /> does not have a valid <see cref="T:System.Uri" /> syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>Returns the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from the <see cref="T:System.IO.Packaging.PackageRelationship" /> with a specified URI.</summary>
      <param name="relationshipPartUri">The URI of the relationship part to return the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> from.</param>
      <returns>The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the <see cref="T:System.IO.Packaging.PackagePart" /> from the relationship with the specified <paramref name="relationshipPartUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> is an absolute URI.  
-or-  
<paramref name="relationshipPartUri" /> syntax is not valid for a <see cref="T:System.IO.Packaging.PackagePart" />.  
-or-  
<paramref name="relationshipPartUri" /> does not reference a relationship part.  
-or-  
The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> of the relationship part references another relationship part (not valid).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>Returns a value that indicates whether a specified URI is the URI of a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</summary>
      <param name="partUri">The URI to check for a <see cref="T:System.IO.Packaging.PackageRelationship" /> part.</param>
      <returns>
        <see langword="true" /> if <paramref name="partUri" /> identifies a <see cref="T:System.IO.Packaging.PackageRelationship" /> part; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> is an absolute URI.  
-or-  
<paramref name="partUri" /> is an invalid <see cref="T:System.IO.Packaging.PackagePart" /> syntax.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>Returns a part URI given a source part URI and a URI with a relative path to a target part.</summary>
      <param name="sourcePartUri">The URI of the source part, or "/" to designate the <see cref="T:System.IO.Packaging.Package" /> root.</param>
      <param name="targetUri">The relative URI to the target part.</param>
      <returns>The URI of the target part resolved between the specified <paramref name="SourcePartUri" /> and the <paramref name="targetUri" /> parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> or <paramref name="targetUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> is not a valid part URI.  
-or-  
<paramref name="targetUri" /> is not a valid relative URI.</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>Defines the pack URI scheme name "pack".</summary>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>Represents Digital Rights Management (DRM) information that is stored in an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>Gets or sets the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the package's encrypted rights management data stream.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.CryptoProvider" /> for accessing the rights management information.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Deletes the <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user from the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" /> to be deleted.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>Returns a dictionary collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs from the encrypted rights management data stream.</summary>
      <returns>A collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" /> key/value pairs that are contained in the rights managed protected package.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>Returns the embedded <see cref="T:System.Security.RightsManagement.PublishLicense" /> from the encrypted rights management data stream.</summary>
      <returns>The embedded <see cref="T:System.Security.RightsManagement.PublishLicense" />; or <see langword="null" />, if the package does not contain a <see cref="T:System.Security.RightsManagement.PublishLicense" />.</returns>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Returns a specified user's embedded <see cref="T:System.Security.RightsManagement.UseLicense" /> from the encrypted rights management data stream.</summary>
      <param name="userKey">The user or user group to return the <see cref="T:System.Security.RightsManagement.UseLicense" /> for.</param>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for the specified user; or <see langword="null" />, if the package does not contain a <see cref="T:System.Security.RightsManagement.UseLicense" /> that matches the given <paramref name="userKey" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userKey" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.PublishLicense" /> to the encrypted rights management data stream.</summary>
      <param name="publishLicense">The publish license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publishLicense" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>Saves a given <see cref="T:System.Security.RightsManagement.UseLicense" /> for a specified user to the encrypted rights management data stream.</summary>
      <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <param name="useLicense">The use license to store and embed in the package.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="userKey" /> or <paramref name="useLicense" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>Specifies the event args provided to the <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>Gets the digital signature being verified.</summary>
      <returns>The digital signature being verified.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>Gets the signature verification error.</summary>
      <returns>The signature verification error.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>Provides access and information for manipulating data stores in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>Creates a new stream with a given name.</summary>
      <param name="name">The name for the new stream.</param>
      <returns>The new stream with the specified <paramref name="name" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>Creates a new stream with a given name, <see cref="T:System.IO.Packaging.CompressionOption" />, and <see cref="T:System.IO.Packaging.EncryptionOption" />.</summary>
      <param name="name">The name for the new stream.</param>
      <param name="compressionOption">The compression option for the data stream.</param>
      <param name="encryptionOption">The encryption option for the data stream.</param>
      <returns>The new stream with the specified <paramref name="name" />, <paramref name="compressionOption" />, and <paramref name="encryptionOption" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>Creates a new child <see cref="T:System.IO.Packaging.StorageInfo" /> with this <see cref="T:System.IO.Packaging.StorageInfo" /> as the parent.</summary>
      <param name="name">The name for the new child data store.</param>
      <returns>The new child data store.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>Deletes the stream with a specified name.</summary>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name of the stream to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>Deletes a specified sub-store.</summary>
      <param name="name">The name of the sub-store to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>Returns the <see cref="T:System.IO.Packaging.StreamInfo" /> instance with the given name.</summary>
      <param name="name">The name of the <see cref="T:System.IO.Packaging.StreamInfo" /> instance to return.</param>
      <returns>The stream with the specified <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>Returns an array of the <see cref="T:System.IO.Packaging.StreamInfo" /> instances that are currently contained in this store.</summary>
      <returns>An array of the <see cref="T:System.IO.Packaging.StreamInfo" /> objects, each pointing to an I/O steam defined within this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>Returns the child sub-store with a given name.</summary>
      <param name="name">The name of the sub-store to return.</param>
      <returns>The child sub-store with the specified <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>Returns an array of the child sub-stores that are currently contained in this store.</summary>
      <returns>An array of <see cref="T:System.IO.Packaging.StorageInfo" /> objects, each pointing to a sub-store defined within this store.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>Gets the name of the store.</summary>
      <returns>The name of this store.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>Returns a value that indicates whether a given stream exists.</summary>
      <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" /> name to check for.</param>
      <returns>
        <see langword="true" /> if a stream with the specified <paramref name="name" /> exists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>Returns a value that indicates whether a given child sub-store exists.</summary>
      <param name="name">The child <see cref="T:System.IO.Packaging.StorageInfo" /> name to check for.</param>
      <returns>
        <see langword="true" /> if a child sub-store with the specified <paramref name="name" /> exists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>Provides access and information for manipulating I/O streams within a <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.CompressionOption" /> setting for the stream.</summary>
      <returns>The compression option setting for the package stream.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>Gets the <see cref="T:System.IO.Packaging.EncryptionOption" /> setting for the stream.</summary>
      <returns>The encryption option setting for the package stream.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>Returns a stream opened in a default <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</summary>
      <returns>The I/O stream opened in a default <see cref="T:System.IO.Packaging.Package" /> root <see cref="T:System.IO.FileMode" /> and <see cref="T:System.IO.FileAccess" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" />.</summary>
      <param name="mode">The file mode in which to open the stream.</param>
      <returns>The stream opened in the specified file <paramref name="mode" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="mode">The file mode in which to open the stream.</param>
      <param name="access">The file access mode in which to read or write to the stream.</param>
      <returns>The I/O stream opened in the specified <see cref="T:System.IO.FileMode" /> and with a given <see cref="T:System.IO.FileAccess" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>Gets the name of the stream.</summary>
      <returns>The name of this stream.</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>Specifies whether the target of a <see cref="T:System.IO.Packaging.PackageRelationship" /> is inside or outside the <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>The relationship references a resource that is external to the package.</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>The relationship references a part that is inside the package.</summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>Specifies the result of a certificate or signature verification.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>The X.509 certificate is not available to verify the signature.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>The X.509 certificate is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>The signature is not valid.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>The specified package or part has no signature.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>A reference relationship to the signature was not found.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>The verification was successful.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>Implements a derived subclass of the abstract <see cref="T:System.IO.Packaging.Package" /> base class - the <see cref="T:System.IO.Packaging.ZipPackage" /> class uses a ZIP archive as the container store. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>Represents a part that is stored in a <see cref="T:System.IO.Packaging.ZipPackage" />.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>The <see cref="T:System.Security.Permissions.MediaPermission" /> describes a set of security permissions that controls the ability for audio, image, and video media to work in a partial-trust Windows Presentation Foundation (WPF) application.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio permission level.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the audio, video, and image permission levels.</summary>
      <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the image permission level.</summary>
      <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying the video permission level.</summary>
      <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>Gets the current value of the audio permission level.</summary>
      <returns>The audio permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>Gets the current value of the image permission level.</summary>
      <returns>The image permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>
        <see langword="true" /> if the audio, image, and video permissions are all unrestricted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>Gets the current value of the video permission level.</summary>
      <returns>The media permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.MediaPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>Gets or sets the audio permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.Permissions.MediaPermission" />.</summary>
      <returns>A <see cref="T:System.Security.Permissions.MediaPermission" /> that corresponds to this attribute.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>Gets or sets the image permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>Gets or sets the video permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>Specifies the permission level for audio.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>Permission that allows unrestricted audio playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>Permission that denies all audio playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>Permission that allows safe, limited audio playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>Permission that only allows audio playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>Specifies the permission level for images.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>Permission that allows unrestricted image display.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>Permission that denies all images to be displayed.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>Permission that allows safe, limited image display, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>Permission that only allows display of images that are located at the application's site of origin.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>Specifies the permission level for video.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>Permission that allows unrestricted video playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>Permission that denies all video playback.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>Permission that allows safe, limited video playback, which includes denying stream access to the image file.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>Permission that only allows video playback of files that are located at the application's site of origin.</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>The <see cref="T:System.Security.Permissions.WebBrowserPermission" /> object controls the ability to create the WebBrowser control.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying a permission state.</summary>
      <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class by specifying the Web browser permission level.</summary>
      <param name="webBrowserPermissionLevel">An enumerated value of <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns>A copy of the current permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> property is set to <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>Gets or sets the current value of the Web browser permission level.</summary>
      <returns>The current value of the Web browser permission level.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Security.Permissions.WebBrowserPermission" /> to be applied to code using declarative security.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" /> class.</summary>
      <returns>A <see cref="T:System.Security.Permissions.WebBrowserPermission" /> corresponding to the security declaration.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>Gets or sets the current Web browser permission level for the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />.</summary>
      <returns>The state of the current Web browser permission level.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>Specifies the permission level for a Web browser.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>A Web browser that cannot navigate frames to HTML.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>A Web browser that can safely navigate frames to HTML but with several restrictions.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>A Web browser that can navigate without restrictions.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>Specifies the method of rights management authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>Implicit authentication to any requesting user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Windows Live ID authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>Windows authentication in a corporate domain environment.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Either Windows authentication or Windows Live ID authentication.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>Represents a right granted to a user to access information in a rights managed document.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" />.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" /> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" /> a specified <see cref="T:System.Security.RightsManagement.ContentRight" /> for a specified <see cref="T:System.DateTime" /> duration.</summary>
      <param name="user">The user the access right is granted to.</param>
      <param name="right">The access right that is granted.</param>
      <param name="validFrom">The starting date and time that the right begins.</param>
      <param name="validUntil">The ending date and time that the right expires.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.ContentRight" /> that is granted.</summary>
      <returns>The access right that is granted to the <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>Gets the user who is granted the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />.</summary>
      <returns>The user that the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> is granted to, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>Gets the starting date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins.</summary>
      <returns>The start date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> begins, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MinValue" /> if there is there is no starting limitation.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>Gets the ending date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires.</summary>
      <returns>The end date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> expires, or <see cref="T:System.DateTime" />.<see cref="F:System.DateTime.MaxValue" /> if there is no ending limitation.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>Specifies rights that can be granted to users for accessing content in a rights managed document.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>The user can edit the document that contains the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>The user can edit and encrypt the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>The user can export the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>The user can extract (copy and paste) the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>The user can forward the protected content to another user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>The user can control programmed access to the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>The user can print the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>The user can reply to the sender of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>The user can "reply all" to recipients of the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>The user can digitally sign the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>The user can view the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>The user can decrypt and view the rights specified in the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>Represents a user or user-group for granting access to rights managed content.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentUser" /> class.</summary>
      <param name="name">The user or group name.</param>
      <param name="authenticationType">The method for authentication.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>Gets an instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The <see cref="T:System.Security.RightsManagement.AuthenticationType" /> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Security.RightsManagement.ContentUser" /> is equivalent to another given instance.</summary>
      <param name="obj">The user instance to compare for equality.</param>
      <returns>
        <see langword="true" /> if <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> are the same for both this user and the given user; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>Returns a computed hash code based on the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</summary>
      <returns>A hash code computed from the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>Returns a value that indicates whether the user is currently authenticated.</summary>
      <returns>
        <see langword="true" /> if the user is currently authenticated; otherwise, <see langword="false" />.  The default is <see langword="false" /> until authenticated.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>Gets the user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</summary>
      <returns>The user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> constructor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>Gets an instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</summary>
      <returns>An instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> persona.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>Provides digital rights management services for encrypting and decrypting protected content.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>Gets the cipher block size, in bytes.</summary>
      <returns>The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>Gets a collection listing the rights that passed verification and that are granted to the user.</summary>
      <returns>A collection enumerating the rights that passed verification and that are granted to the user.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>Gets a value that indicates whether the user has rights to decrypt.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to decrypt; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>Gets a value that indicates whether the user has rights to encrypt.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Security.RightsManagement.UseLicense" /> grants the user rights to encrypt; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>Gets a value that indicates whether <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> can accept buffers that are different block sizes in length.</summary>
      <returns>
        <see langword="true" /> if the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> can be a different length from the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; otherwise, <see langword="false" /> if the buffers passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> must be the exact same length.  For AES the default is <see langword="true" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>Decrypts cipher text to clear text.</summary>
      <param name="cryptoText">The cipher text to decrypt.</param>
      <returns>The decrypted clear text of <paramref name="cryptoText" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Decryption right not granted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>Encrypts clear text to cipher text.</summary>
      <param name="clearText">The clear text content to encrypt.</param>
      <returns>Encrypted cipher text of the given <paramref name="clearText" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> is null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Encryption is not permitted.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>Represents an immutable (read-only) pair of "Name" and "Description" strings.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> class.</summary>
      <param name="name">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> property.</param>
      <param name="description">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> property.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="name" /> parameter or <paramref name="description" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>Gets the locale description.</summary>
      <returns>The locale description.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>Indicates whether the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of a given object match those of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <param name="obj">The object to compare the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of the given object match those of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>Gets a computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties.</summary>
      <returns>A computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> properties of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>Gets the locale name.</summary>
      <returns>The locale name.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>Represents a signed rights managed publish license.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.PublishLicense" /> class from a specified serialized and signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <param name="signedPublishLicense">A signed and serialized publish license.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The license is invalid.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <returns>The <see cref="T:System.Security.RightsManagement.UseLicense" /> for a user or user group in the specified <paramref name="secureEnvironment" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>Gets the publisher-created content identifier.</summary>
      <returns>The publisher-created content identifier.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>Returns a decrypted <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> version of this signed <see cref="T:System.Security.RightsManagement.PublishLicense" />.</summary>
      <param name="cryptoProvider">The rights management service to use for decrypting the license.</param>
      <returns>A decrypted, unsigned version of this license.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>Gets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>Gets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>Returns the serialized XrML string that was used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>Gets the URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <returns>The URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>Represents an error condition when a rights management operation cannot complete successfully.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class and sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> and <see cref="P:System.Exception.Message" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="failureCode">The failure code for the error.</param>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" /> class with a given <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception instance that caused this exception.</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>Gets the <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> for the error.</summary>
      <returns>The failure code for the error.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store with the parameter name and information about the exception.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>Specifies error conditions that can occur when performing a rights management operation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>Asynchronous operation canceled, or a non-recoverable error has occurred.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>License activation failed; rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>The current user was not found in the Active Directory (AD) for certification under Windows authentication.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>The requested operation is already in progress.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>An invalid constant was passed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>The access condition is not matched to the enabling principal that is handed into the bind.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>The current user does not satisfy the conditions defined in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>The specified resource is not contained in any WORK node of the license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>The enabling principal does not match the issued principal of the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>The current machine is not defined within the rights managed group identity.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>The specified rights group is not contained in the End Use License (EUL).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>The license requires that a new revocation list must be acquired.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>The End Use License (EUL) contains no WORK node.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>The rights management certificate chain is broken.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>Clock rollback has been detected. Protected content cannot be accessed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>Cannot open or publish content with restricted permissions because a debugger has been detected.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>The user's email address cannot be verified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>The specified principal cannot be enabled</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>Encryption is not permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> cannot load.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>The authorized time period defined in the issuance license template has expired; access is no longer permitted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>The option specified has already been set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>A user name was not specified for the client session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>The content ID from the license does not match the content ID the license storage session</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>An object type passed is incompatible with this operation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>When creating a bound license, an issuance license, not an end-use license, was specified.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>Some information is missing.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>An installation operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>The algorithm type specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS Server email address verification failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>The specified encoding type is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>Either the environment or the enabling principal handle is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>The Rights Management Services template contains one or more errors.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>The key length specified in a key/value pair is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>The license structure in one of the certificates is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>The numeric value specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>The specified registry path is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>The time information specified is invalid.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>The rights management version is incorrect.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>The key type specified in a key/value pair is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>A library operation failed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>The specified library plug-in is not supported.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>An End Use License (EUL) could not be acquired from the rights management server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>The current user credentials are not valid for acquiring a license.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>An operation is in violation of the rights management manifest policy.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>The specified metadata could net be set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>The computer must be activated before the user can be activated.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>Rights management cannot connect to the URI specified for the license server.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>The protected content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>A required license is not available.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>No license or certificate exists at the specified index.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>Rights managed content is corrupted.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>The item requested to delete does not exist.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>The license server's maximum quota of End Use Licenses (EULs) has been reached.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>The document does not contain an Owner License.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>No instances of the requested attribute exist.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>The specified license was not found.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>The Rights Management server does not allow temporary certification of the current user.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>Certificate or license revocation information has not been set.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>The current user does not have rights to access the protected content.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>The requested right was not specified when the content was published with rights management.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>Rights management services are not properly configured.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>Operation has competed successfully.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>The number of certificates has exceeded the maximum number allowed.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>Too many <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> instance have been created.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>An unspecified error occurred.  Also thrown when an application runs in debug mode.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>If a request is made for computer activation or a rights account certificate, receiving <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> indicates that the application should pass <see langword="null" /> into the ActServInfo parameter</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>Represents a secure client session for user activation, license binding, and other rights management operations.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>Gets the <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</summary>
      <returns>The application manifest specified to the <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> is created.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>Creates a secure client session given an application rights manifest, <see cref="T:System.Security.RightsManagement.AuthenticationType" />, and <see cref="T:System.Security.RightsManagement.UserActivationMode" />.</summary>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="authentication">The method of authentication.</param>
      <param name="userActivationMode">The type of the user rights account certificate.</param>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>Creates a secure client session for a specified user with a given rights manifest.</summary>
      <param name="applicationManifest">The application rights manifest.</param>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
      <returns>A secure client session for activation, license binding, and other rights management operations.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>Returns a list of the activated users.</summary>
      <returns>A list of the currently activated users.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>Indicates whether a given user has been activated for accessing rights managed content.</summary>
      <param name="user">The user or user-group for granting access to rights managed content.</param>
      <returns>
        <see langword="true" /> if the given <paramref name="user" /> has been activated for accessing rights managed content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>Removes the license activation for a specified user.</summary>
      <param name="user">The user to remove the license activation for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="user" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The given <paramref name="user" /> is not authenticated with either Windows authentication or Passport authentication.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>Gets the user or user-group specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</summary>
      <returns>The user or user-group specified to the <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> was created.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>Represents an unsigned rights managed <see cref="T:System.Security.RightsManagement.PublishLicense" /> or an unsigned <see cref="T:System.Security.RightsManagement.PublishLicense" /> template.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> class from a specified XrML publish-license template.</summary>
      <param name="publishLicenseTemplate">The Extensible Rights Markup Language (XrML) publish-license template to use to create this license.</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>Gets or sets the publisher-created content identifier.</summary>
      <returns>The publisher-created rights-managed content identifier.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>Gets a collection of assigned user rights.</summary>
      <returns>A collection of the assigned user rights that are provided in this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>Gets a collection of name and description pairs.</summary>
      <returns>A collection of name and description pairs.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>Gets or sets the content owner.</summary>
      <returns>The user who owns the published content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>Gets or sets the contact name for the author or publisher of the content.</summary>
      <returns>The contact name for the author or publisher of the content.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>Gets or sets the contact URI for the author or publisher of the content.</summary>
      <returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>Creates a signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> and returns a <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</summary>
      <param name="secureEnvironment">The secure environment for license activation and binding.</param>
      <param name="authorUseLicense">A returned <see cref="T:System.Security.RightsManagement.UseLicense" /> for the document author.</param>
      <returns>The signed <see cref="T:System.Security.RightsManagement.PublishLicense" /> that is created by signing this <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>Returns a serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
      <returns>A serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>Represents a license that enables access to protected rights managed content.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UseLicense" /> class.</summary>
      <param name="useLicense">A use license in serialized Extensible Rights Markup Language (XrML) form.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</summary>
      <returns>The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Binds the license to a given <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <param name="secureEnvironment">The environment to bind the license to.</param>
      <returns>A <see cref="T:System.Security.RightsManagement.CryptoProvider" /> instance if the license binding succeeded; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>Gets the content identifier created by the publisher.</summary>
      <returns>The content identifier created by the publisher.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>Indicates if this license is equivalent to another given license.</summary>
      <param name="x">The license to compare.</param>
      <returns>
        <see langword="true" /> if both licenses are the equivalent; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>Returns the hash code associated with this license.</summary>
      <returns>A hash code for this license.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>Gets the owner of the license.</summary>
      <returns>The owner of the license.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>Returns the serialized XrML string used to create this license.</summary>
      <returns>The serialized Extensible Rights Markup Language (XrML) string originally passed to the <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> constructor.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>Specifies the type of user Rights Account Certificate to request for rights management activation.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>A permanent Rights Account Certificate.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>A temporary Rights Account Certificate.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>Provides a base class for .NET Framework attributes that report the use scope of attached properties.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>Specifies that an attached property is browsable only for elements that derive from a specified type.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> class, using the provided <paramref name="targetType" />.</summary>
      <param name="targetType">The intended type that scopes the use of the attached property where this .NET Framework attribute applies.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.</summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>Gets a unique type identifier for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework attribute.</summary>
      <returns>An object that is a unique identifier for the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>Specifies that an attached property is only browsable on an element that also has another specific  .NET Framework attribute applied to its class definition.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> class.</summary>
      <param name="attributeType">The <see cref="T:System.Type" /> of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is applied.</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>Gets the type of the  .NET Framework attribute that must also be applied on a class.</summary>
      <returns>The  .NET Framework attribute type.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute is equal to a specified object.</summary>
      <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework attribute.</summary>
      <returns>An unsigned 32-bit integer value.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>Contains properties that specify how an application should behave relative to new WPF features that are in the WindowsBase assembly.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>Gets or sets a value that indicates whether information about the <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> is saved to the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>
        <see langword="true" /> if information about the <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> is saved to the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary>Defines how the dispatcher reacts to failures encountered when it requests processing.</summary>
      <returns>A value that defines how the dispatcher reacts to failures.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary>Provides a set of values that describes how the dispatcher responds to failures that are encountered while requesting processing.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary>Continue after the failure.  
 This is the default value. It defines the behavior of the Windows Presentation Foundation dispatcher prior to the .NET Framework 4.7.1. The dispatcher may become unresponsive when this option is selected.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary>Reset the dispatcher's state to try another request the next time one is needed.  
 While this option can sometimes "repair" unresponsiveness, it cannot honor the usual timing of processing, which can be crucial. Selecting this option can lead to unexpected behavior.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary>Throw an exception.  
 This option immediately brings the problem to the application developer's attention.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> method puts the delegates on the dispatcher queue or if the delegate is directly invoked.</summary>
      <returns>
        <see langword="true" /> if the <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> method puts the delegates on the dispatcher queue or if the delegate is directly invoked; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>Gets or sets a value that indicates whether a single <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> is used for multiple dispatcher operations.</summary>
      <returns>true if a single <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> is used for multiple dispatcher operations; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</summary>
      <param name="d">The object that the property exists on. When the callback is invoked, the property system will pass this value.</param>
      <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
      <returns>The coerced value (with appropriate type).</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Int32Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Int32Rect" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Int32Rect" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A string representation of the specified <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.PointValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Point" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Point" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Point" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A string representation of the specified <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.RectValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Rect" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Rect" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Rect" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A string representation of the specified <see cref="T:System.Windows.Rect" />.</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.SizeValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Size" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Size" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Size" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A string representation of the specified <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.VectorValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Vector" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Vector" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A string representation of the specified <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider" /> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.DataSourceProvider" /> class. This is a protected constructor.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>Indicates that initialization of this object is about to begin; no implicit <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> occurs until the matched <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> method is called.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>When overridden in a derived class, this base class calls this method when <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> or <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> has been called. The base class delays the call if refresh is deferred or initial load is disabled.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>Gets the underlying data object.</summary>
      <returns>A value of type <see cref="T:System.Object" /> that is the underlying data object.</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property has a new value.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>Gets or sets the current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use.</summary>
      <returns>The current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use. By default, this is the <see cref="T:System.Windows.Threading.Dispatcher" /> object that is associated with the thread on which this instance was created.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>Indicates that the initialization of this object has completed; this causes a <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> if no other <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> is outstanding.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>Gets the error of the last query operation.</summary>
      <returns>A value of type <see cref="T:System.Exception" /> that is the error of the last query operation, or <see langword="null" /> if there was no error.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
      <returns>
        <see langword="false" /> to prevent or delay the automatic loading of data; otherwise, <see langword="true" />. The default value is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>Gets a value that indicates whether there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use.</summary>
      <returns>
        <see langword="true" /> if there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">Arguments of the event being raised.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>Derived classes call this method to indicate that a query has finished.</summary>
      <param name="newData">The data that is the result of the query.</param>
      <param name="error">The error that occurred while running the query. This value is <see langword="null" /> if there is no error.</param>
      <param name="completionWork">Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.</param>
      <param name="callbackArguments">Optional arguments to send as a parameter with the <paramref name="completionWork" /> delegate.</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Represents an object that participates in the dependency property system.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</summary>
      <param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>Clears the local value of a read-only property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</summary>
      <param name="key">The key for the dependency property to be cleared.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">The identifier for the dependency property to coerce.</param>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value were invalid or do not exist.</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance.</summary>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the CLR type of this instance.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="obj">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A specialized local value enumerator.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <returns>Returns the current effective value.</returns>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>Re-evaluates the effective value for the specified dependency property</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>Gets a value that indicates whether this instance is currently sealed (read-only).</summary>
      <returns>
        <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated. The specific dependency property that changed is reported in the event data.</summary>
      <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Returns the local value of a dependency property, if it exists.</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the value of a dependency property without changing its value source.</summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the local value of a dependency property, specified by its dependency property identifier.</summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</summary>
      <param name="key">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</param>
      <param name="value">The new local value.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</summary>
      <param name="dp">The identifier for the dependency property that should be serialized.</param>
      <returns>
        <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>Implements an underlying type cache for all <see cref="T:System.Windows.DependencyObject" /> derived types.</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>Gets the <see cref="T:System.Windows.DependencyObjectType" /> of the immediate base class of the current <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>The type of the base class.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>Returns a <see cref="T:System.Windows.DependencyObjectType" /> that represents a given system (CLR) type.</summary>
      <param name="systemType">The system (CLR) type to convert.</param>
      <returns>A <see cref="T:System.Windows.DependencyObjectType" /> that represents the system (CLR) type.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>Gets a zero-based unique identifier for constant-time array lookup operations.</summary>
      <returns>An internal identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <param name="dependencyObject">The object to compare with the current <see cref="T:System.Windows.DependencyObjectType" />.</param>
      <returns>
        <see langword="true" /> if the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> is in the inheritance hierarchy of the <see cref="T:System.Windows.DependencyObject" /> passed as <paramref name="d" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>Determines whether the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the specified <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <param name="dependencyObjectType">The <see cref="T:System.Windows.DependencyObjectType" /> to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dependencyObjectType" /> parameter and the current <see cref="T:System.Windows.DependencyObjectType" /> represent types of classes, and the class represented by the current <see cref="T:System.Windows.DependencyObjectType" /> derives from the class represented by <paramref name="dependencyObjectType" />. Otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="dependencyObjectType" /> and the current <see cref="T:System.Windows.DependencyObjectType" /> represent the same class.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>Gets the name of the represented common language runtime (CLR) system type.</summary>
      <returns>The name of the represented CLR system type.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>Gets the common language runtime (CLR) system type represented by this <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>The CLR system type represented by this <see cref="T:System.Windows.DependencyObjectType" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>Adds another type as an owner of a dependency property that has already been registered.</summary>
      <param name="ownerType">The type to add as an owner of this dependency property.</param>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</summary>
      <param name="ownerType">The type to add as owner of this dependency property.</param>
      <param name="typeMetadata">The metadata that qualifies the dependency property as it exists on the provided type.</param>
      <returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>Gets the default metadata of the dependency property.</summary>
      <returns>The default metadata of the dependency property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Returns the metadata for this dependency property as it exists on a specified existing type.</summary>
      <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
      <returns>A property metadata object.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>Returns the metadata for this dependency property as it exists on the specified object instance.</summary>
      <param name="dependencyObject">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</param>
      <returns>A property metadata object.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>Returns the metadata for this dependency property as it exists on a specified type.</summary>
      <param name="dependencyObjectType">A specific object that records the dependency object type from which the dependency property metadata is desired.</param>
      <returns>A property metadata object.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>Gets an internally generated value that uniquely identifies the dependency property.</summary>
      <returns>A unique numeric identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>Gets the name of the dependency property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <exception cref="T:System.InvalidOperationException">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the dependency property as it exists on the provided type.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</summary>
      <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
      <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
      <param name="key">The access key for a read-only dependency property.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</summary>
      <returns>The type of the object that registered the property or added itself as owner of the property.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>Gets the type that the dependency property uses for its value.</summary>
      <returns>The <see cref="T:System.Type" /> of the property value.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</summary>
      <returns>
        <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Registers a dependency property with the specified property name, property type, and owner type.</summary>
      <param name="name">The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Registers an attached property with the specified property name, property type, and owner type.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers an attached property with the specified property name, property type, owner type, and property metadata.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
      <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
      <returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</summary>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">Property metadata for the dependency property.</param>
      <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
      <returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>Returns the string representation of the dependency property.</summary>
      <returns>The string representation of the dependency property.</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Specifies a static value that is used by the WPF property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</summary>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>Gets the value validation callback for the dependency property.</summary>
      <returns>The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> class.</summary>
      <param name="property">The identifier for the dependency property that changed.</param>
      <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
      <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <param name="obj">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
      <returns>
        <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
      <returns>
        <see langword="true" /> if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Gets the value of the property after the change.</summary>
      <returns>The property value after the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Gets the value of the property before the change.</summary>
      <returns>The property value before the change.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects have the same value.</summary>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are equivalent; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> objects are different.</summary>
      <param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instances are different; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
      <returns>The identifier field of the dependency property where the value change occurred.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>Provides a dependency property identifier for limited write access to a read-only dependency property.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</summary>
      <returns>The relevant dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</summary>
      <param name="forType">The type on which this dependency property exists and metadata should be overridden.</param>
      <param name="typeMetadata">Metadata supplied for this type.</param>
      <exception cref="T:System.InvalidOperationException">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</exception>
      <exception cref="T:System.ArgumentException">Metadata was already established for the property as it exists on the provided type.</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Expression" /> to and from other types.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExpressionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert from a source object to an <see cref="T:System.Windows.Expression" /> object.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from.</param>
      <returns>Always <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an <see cref="T:System.Windows.Expression" /> object to a specific destination type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
      <returns>Always <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided value to the <see cref="T:System.Windows.Expression" /> type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The object to convert.</param>
      <returns>Always throws an exception and returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the provided <see cref="T:System.Windows.Expression" /> object to the specified type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
      <returns>Always throws an exception and returns <see langword="null" />.</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from <see cref="T:System.Windows.Freezable" /> provide detailed change notification, can be made immutable, and can clone themselves.</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Freezable" /> derived class.</summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>Gets a value that indicates whether the object can be made unmodifiable.</summary>
      <returns>
        <see langword="true" /> if the current object can be made unmodifiable or is already unmodifiable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>Occurs when the <see cref="T:System.Windows.Freezable" /> or an object it contains is modified.</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>Creates a modifiable clone of the <see cref="T:System.Windows.Freezable" />, making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is <see langword="true." /></returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>Creates a modifiable clone (deep copy) of the <see cref="T:System.Windows.Freezable" /> using its current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is <see langword="true." /></returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Freezable" /> class.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>Makes the current object unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen" /> property to <see langword="true" />.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be made unmodifiable.</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>If the <paramref name="isChecking" /> parameter is <see langword="true" />, this method indicates whether the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable. If the <paramref name="isChecking" /> parameter is <see langword="false" />, this method attempts to make the specified <see cref="T:System.Windows.Freezable" /> unmodifiable and indicates whether the operation succeeded.</summary>
      <param name="freezable">The object to check or make unmodifiable. If <paramref name="isChecking" /> is <see langword="true" />, the object is checked to determine whether it can be made unmodifiable. If <paramref name="isChecking" /> is <see langword="false" />, the object is made unmodifiable, if possible.</param>
      <param name="isChecking">
        <see langword="true" /> to return an indication of whether the object can be frozen (without actually freezing it); <see langword="false" /> to actually freeze the object.</param>
      <returns>If <paramref name="isChecking" /> is <see langword="true" />, this method returns <see langword="true" /> if the specified <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable. If <paramref name="isChecking" /> is <see langword="false" />, this method returns <see langword="true" /> if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable.</returns>
      <exception cref="T:System.InvalidOperationException">When <paramref name="isChecking" /> is <see langword="false" />, the attempt to make <paramref name="freezable" /> unmodifiable was unsuccessful; the object is now in an unknown state (it might be partially frozen).</exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>Makes the <see cref="T:System.Windows.Freezable" /> object unmodifiable or tests whether it can be made unmodifiable.</summary>
      <param name="isChecking">
        <see langword="true" /> to return an indication of whether the object can be frozen (without actually freezing it); <see langword="false" /> to actually freeze the object.</param>
      <returns>If <paramref name="isChecking" /> is <see langword="true" />, this method returns <see langword="true" /> if the <see cref="T:System.Windows.Freezable" /> can be made unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable. If <paramref name="isChecking" /> is <see langword="false" />, this method returns <see langword="true" /> if the if the specified <see cref="T:System.Windows.Freezable" /> is now unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" />, using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to <see langword="true" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> cannot be frozen because it contains expressions or animated properties.</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" /> using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
      <returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is set to <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>Gets a value that indicates whether the object is currently modifiable.</summary>
      <returns>
        <see langword="true" /> if the object is frozen and cannot be modified; <see langword="false" /> if the object can be modified.</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Freezable" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Ensures that appropriate context pointers are established for a <see cref="T:System.Windows.DependencyObjectType" /> data member that has just been set.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="oldValue">The previous value of the data member.</param>
      <param name="newValue">The current value of the data member.</param>
      <param name="property">The property that changed.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Overrides the <see cref="T:System.Windows.DependencyObject" /> implementation of <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> to also invoke any <see cref="E:System.Windows.Freezable.Changed" /> handlers in response to a changing dependency property of type <see cref="T:System.Windows.Freezable" />.</summary>
      <param name="e">Event data that contains information about which property changed, and its old and new values.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>Ensures that the <see cref="T:System.Windows.Freezable" /> is being accessed from a valid thread. Inheritors of <see cref="T:System.Windows.Freezable" /> must call this method at the beginning of any API that reads data members that are not dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>Raises the <see cref="E:System.Windows.Freezable.Changed" /> event for the <see cref="T:System.Windows.Freezable" /> and invokes its <see cref="M:System.Windows.Freezable.OnChanged" /> method. Classes that derive from <see cref="T:System.Windows.Freezable" /> should call this method at the end of any API that modifies class members that are not stored as dependency properties.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>Verifies that the <see cref="T:System.Windows.Freezable" /> is not frozen and that it is being accessed from a valid threading context. <see cref="T:System.Windows.Freezable" /> inheritors should call this method at the beginning of any API that writes to data members that are not dependency properties.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" /> instance is frozen and cannot have its members written to.</exception>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>Move focus to another focusable element downwards from the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>Move focus to the first focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>Move focus to the last focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>Move focus to another focusable element to the left of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>Move focus to the next focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>Move focus to the previous focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>Move focus to another focusable element to the right of the currently focused element.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>Move focus to another focusable element upwards from the currently focused element.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Specifies the possible key values on a keyboard.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>The A key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>The ABNT_C1 (Brazilian) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>The ABNT_C2 (Brazilian) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>The Add key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>The Application key (Microsoft Natural Keyboard). Also known as the Menu key, as it displays an application-specific context menu.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>The ATTN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>The B key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>The Backspace key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>The Browser Back key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>The Browser Favorites key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>The Browser Forward key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>The Browser Home key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>The Browser Refresh key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>The Browser Search key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>The Browser Stop key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>The C key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>The Cancel key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>The Caps Lock key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>The Caps Lock key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>The Clear key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>The CRSEL key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>The D key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>The 0 (zero) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>The 1 (one) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>The 2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>The 3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>The 4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>The 5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>The 6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>The 7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>The 8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>The 9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>The DBE_ALPHANUMERIC key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>The DBE_CODEINPUT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>The DBE_DBCSCHAR key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>The DBE_DETERMINESTRING key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>The DBE_ENTERDLGCONVERSIONMODE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>The DBE_ENTERIMECONFIGMODE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>The DBE_ENTERWORDREGISTERMODE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>The DBE_FLUSHSTRING key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>The DBE_HIRAGANA key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>The DBE_KATAKANA key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>The DBE_NOCODEINPUT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>The DBE_NOROMAN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>The DBE_ROMAN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>The DBE_SBCSCHAR key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>The key is used with another key to create a single combined character.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>The Decimal key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>The Delete key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>The Divide key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>The Down Arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>The E key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>The End key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>The Enter key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>The ERASE EOF key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>The ESC key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>The Execute key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>The EXSEL key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>The F key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>The F1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>The F10 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>The F11 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>The F12 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>The F13 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>The F14 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>The F15 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>The F16 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>The F17 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>The F18 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>The F19 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>The F2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>The F20 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>The F21 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>The F22 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>The F23 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>The F24 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>The F3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>The F4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>The F5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>The F6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>The F7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>The F8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>The F9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>The IME Final mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>The G key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>The H key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>The IME Hangul mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>The IME Hanja mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>The Help key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>The Home key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>The I key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>The IME Accept key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>The IME Convert key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>The IME Mode change request.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>The IME NonConvert key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>A special key masking the real key being processed by an IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>The Insert key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>The J key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>The IME Junja mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>The K key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>The IME Kana mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>The IME Kanji mode key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>The L key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>The Launch Application1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>The Launch Application2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>The Launch Mail key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>The Left Arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>The left ALT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>The left CTRL key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>The left Shift key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>The Linefeed key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>The left Windows logo key (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>The M key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>The Media Next Track key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>The Media Play Pause key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>The Media Previous Track key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>The Media Stop key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>The Multiply key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>The N key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>The Page Down key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>A constant reserved for future use.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>No key pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>The Num Lock key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>The 0 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>The 1 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>The 2 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>The 3 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>The 4 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>The 5 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>The 6 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>The 7 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>The 8 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>The 9 key on the numeric keypad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>The O key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>The OEM 1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>The OEM 102 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>The OEM 2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>The OEM 3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>The OEM 4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>The OEM 5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>The OEM 6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>The OEM 7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>The OEM 8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>The OEM ATTN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>The OEM AUTO key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>The OEM Backslash key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>The OEM BACKTAB key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>The OEM Clear key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>The OEM Close Brackets key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>The OEM Comma key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>The OEM COPY key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>The OEM ENLW key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>The OEM FINISH key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>The OEM Minus key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>The OEM Open Brackets key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>The OEM Period key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>The OEM Pipe key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>The OEM Addition key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>The OEM Question key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>The OEM Quotes key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>The OEM Semicolon key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>The OEM Tilde key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>The P key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>The PA1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>The Page Down key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>The Page Up key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>The Pause key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>The PLAY key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>The Print key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>The Print Screen key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>The Page Up key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>The Q key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>The R key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>The Return key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>The Right Arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>The right ALT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>The right CTRL key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>The right Shift key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>The right Windows logo key (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>The S key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>The Scroll Lock key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>The Select key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>The Select Media key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>The Separator key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>The Computer Sleep key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>The Print Screen key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>The Spacebar key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>The Subtract key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>A special key masking the real key being processed as a system key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>The T key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>The Tab key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>The U key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>The Up Arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>The V key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>The Volume Down key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>The Volume Mute key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>The Volume Up key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>The W key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>The X key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>The Y key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>The Z key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>The ZOOM key.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.Key" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Key" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Key" />, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.Key" /> can be converted to the specified type, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Key" />, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.Key" /> to the specified type, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted to <paramref name="destinationType" />.</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Provides static methods to convert between Win32 Virtual-Keys and the WPF <see cref="T:System.Windows.Input.Key" /> enumeration.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Converts a Win32 Virtual-Key into WPF <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="virtualKey">The virtual key to convert.</param>
      <returns>The WPF key.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>Converts a WPF <see cref="T:System.Windows.Input.Key" /> into a Win32 Virtual-Key.</summary>
      <param name="key">The WPF to convert.</param>
      <returns>The Win32 Virtual-Key.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.Key" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The key to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.Key" />.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Input.Key" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.Key" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.Key" />.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Specifies the set of modifier keys.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>The ALT key.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>The CTRL key.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No modifiers are pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>The SHIFT key.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>The Windows logo key.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.ModifierKeys" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to the specified type, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.ModifierKeys" />, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.ModifierKeys" /> to the specified type, using the specified context.</summary>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> does not map to a valid <see cref="T:System.Windows.Input.ModifierKeys" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>Determines whether the specified value is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value.</summary>
      <param name="modifierKeys">The value to check for validity.</param>
      <returns>
        <see langword="true" /> if input is a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>Always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">The modifier keys to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.ModifierKeys" /> value.</summary>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys" /> value.</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>Represents a request to move focus to another control.</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TraversalRequest" /> class.</summary>
      <param name="focusNavigationDirection">The intended direction of the focus traversal, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>Gets the traversal direction.</summary>
      <returns>One of the traversal direction enumeration values.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus.</summary>
      <returns>
        <see langword="true" /> if this traversal has reached the end of child elements that can have focus; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>Describes the width, height, and location of an integer rectangle.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of an <see cref="T:System.Windows.Int32Rect" /> with the specified <see cref="P:System.Windows.Int32Rect.X" /> and <see cref="P:System.Windows.Int32Rect.Y" /> coordinates and the specified <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" />.</summary>
      <param name="x">The <see cref="P:System.Windows.Int32Rect.X" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The <see cref="P:System.Windows.Int32Rect.Y" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The <see cref="P:System.Windows.Int32Rect.Width" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the width of the rectangle.</param>
      <param name="height">The <see cref="P:System.Windows.Int32Rect.Height" /> of the new <see cref="T:System.Windows.Int32Rect" /> instance which specifies the height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>Gets the empty rectangle, a special value that represents a rectangle with no position or area.</summary>
      <returns>An empty rectangle with no position or area.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <param name="o">The object to compare to the current rectangle.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is an <see cref="T:System.Windows.Int32Rect" /> and has the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
      <param name="value">The rectangle to compare to the current rectangle.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> as this rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Determines whether the specified rectangles are equal.</summary>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="int32Rect1" /> and <paramref name="int32Rect2" /> have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>Creates a hash code from this rectangle's <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values.</summary>
      <returns>This rectangle's hash code.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" /> properties of the <see cref="T:System.Windows.Int32Rect" /> are greater than 0.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Windows.Int32Rect.Width" /> and <see cref="P:System.Windows.Int32Rect.Height" /> properties of the <see cref="T:System.Windows.Int32Rect" /> are greater than 0; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>Gets or sets the height of the rectangle.</summary>
      <returns>The height of the rectangle. The default value is <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>Gets a value indicating whether the rectangle is empty.</summary>
      <returns>
        <see langword="true" /> if the rectangle is empty; otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="int32Rect1" /> and <paramref name="int32Rect2" /> have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="int32Rect1">The first rectangle to compare.</param>
      <param name="int32Rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="false" /> if <paramref name="int32Rect1" /> and <paramref name="int32Rect2" /> have the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" />; otherwise, if all of these values are the same, then <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>Creates an <see cref="T:System.Windows.Int32Rect" /> structure from the specified <see cref="T:System.String" /> representation.</summary>
      <param name="source">A string representation of an <see cref="T:System.Windows.Int32Rect" />.</param>
      <returns>The equivalent <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.</param>
      <param name="provider">The provider to use to format the value</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>A string containing the same <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, and <see cref="P:System.Windows.Int32Rect.Height" /> values of this <see cref="T:System.Windows.Int32Rect" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" /> based on the supplied <see cref="T:System.IFormatProvider" />.</summary>
      <param name="provider">The format provider to use. If provider is <see langword="null" />, the current culture is used.</param>
      <returns>A string representation of this instance of <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>Gets or sets the width of the rectangle.</summary>
      <returns>The width of the rectangle. The default value is <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>Gets or sets the x-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The x-coordinate of the top-left corner of the rectangle. The default value is <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>Gets or sets the y-coordinate of the top-left corner of the rectangle.</summary>
      <returns>The y-coordinate of the top-left corner of the rectangle. The default value is <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>Converts instances of other types to and from an <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Int32RectConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of an <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if the type can be converted to an <see cref="T:System.Windows.Int32Rect" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of an <see cref="T:System.Windows.Int32Rect" /> can be converted to a different type.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Int32Rect" /> is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if this <see cref="T:System.Windows.Int32Rect" /> can be converted to <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified type to an <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <returns>The <see cref="T:System.Windows.Int32Rect" /> created from converting <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to an <see cref="T:System.Windows.Int32Rect" />.</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an <see cref="T:System.Windows.Int32Rect" /> to a specified type.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Int32Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Int32Rect" /> to.</param>
      <returns>The object created from converting this <see cref="T:System.Windows.Int32Rect" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is <see langword="null" /> or is not an <see cref="T:System.Windows.Int32Rect" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>Gets the last message that was raised.</summary>
      <returns>The last message.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>Occurs when a thread becomes modal.</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>Gets a value that indicates whether the thread is modal.</summary>
      <returns>
        <see langword="true" /> if the thread is modal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>Occurs when a modal thread becomes nonmodal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>Called to indicate that a modal thread is no longer modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>Called to indicate that the thread is modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>Called to indicate that a thread is idle.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>Indicates that a new message is available for possible handling.</summary>
      <param name="msg">The message and its associated data.</param>
      <returns>
        <see langword="true" />, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. <see langword="false" />, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessage followed by DispatchMessage.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>Occurs when the message pump receives a keyboard message.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>Occurs when the thread is idle.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>Occurs when the message pump receives a keyboard message.</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>Gets a value that indicates whether the sink or one of its contained components has focus.</summary>
      <returns>
        <see langword="true" /> if the sink or one of its contained components has focus; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</summary>
      <returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Called when one of the mnemonics (access keys) for this sink is invoked.</summary>
      <param name="msg">The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
      <returns>
        <see langword="true" /> if the message was handled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface of a contained component.</summary>
      <param name="sink">The <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> sink of the contained component.</param>
      <returns>The <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> site of the contained component.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Sets focus on either the first tab stop or the last tab stop of the sink.</summary>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
      <returns>
        <see langword="true" /> if the focus has been set as requested; <see langword="false" />, if there are no tab stops.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes keyboard input at the keydown message level.</summary>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
      <returns>
        <see langword="true" /> if the message was handled by the method implementation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> is called.</summary>
      <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
      <param name="modifiers">Modifier keys.</param>
      <returns>
        <see langword="true" /> if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> should not be called; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>Called by a contained component when it has reached its last tab stop and has no further items to tab to.</summary>
      <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
      <returns>If this method returns <see langword="true" />, the site has shifted focus to another component. If this method returns <see langword="false" />, focus is still within the calling component. The component should "wrap around" and set focus to its first contained tab stop.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>Gets the keyboard sink associated with this site.</summary>
      <returns>The current site's <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> interface.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>Unregisters a child keyboard input sink from this site.</summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>Contains message information from a thread's message queue.</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>Gets or sets the window handle (HWND) to the window whose window procedure receives the message.</summary>
      <returns>The window handle (HWND).</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>Gets or sets the <paramref name="lParam" /> value that specifies additional information about the message. The exact meaning depends on the value of the <see cref="P:System.Windows.Interop.MSG.message" /> member.</summary>
      <returns>The <paramref name="lParam" /> value for the message.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>Gets or sets the message identifier.</summary>
      <returns>The message identifier.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>Gets or sets the x coordinate of the cursor position on the screen, when the message was posted.</summary>
      <returns>The x coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>Gets or sets the y coordinate of the cursor position on the screen, when the message was posted.</summary>
      <returns>The y coordinate of the cursor position.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>Gets or sets the time at which the message was posted.</summary>
      <returns>The time that the message was posted.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>Gets or sets the <paramref name="wParam" /> value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message.</summary>
      <returns>The <paramref name="wParam" /> value for the message.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> and <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> events.</summary>
      <param name="msg">A structure with the message data.</param>
      <param name="handled">
        <see langword="true" /> if the message was handled; otherwise, <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>
        <see langword="true" /> if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>Represents a property identifier and the property value for a locally set dependency property.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Windows.LocalValueEntry" /> instances are equal.</summary>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEntry" /> to compare with the current <see cref="T:System.Windows.LocalValueEntry" />.</param>
      <returns>This <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" />, and potentially compares the values of <see cref="P:System.Windows.LocalValueEntry.Value" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is a value type, so will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire <see cref="T:System.Windows.LocalValueEntry" /> would become a reference equality.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.LocalValueEntry" />.</summary>
      <returns>A signed 32-bit integer value.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEntry" /> instances to determine whether they are the same.</summary>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEntry" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compares the specified <see cref="T:System.Windows.LocalValueEnumerator" /> instances to determine whether they are different.</summary>
      <param name="obj1">The first instance to compare.</param>
      <param name="obj2">The second instance to compare.</param>
      <returns>This implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" /> and <see cref="P:System.Windows.LocalValueEntry.Value" /> components of a <see cref="T:System.Windows.LocalValueEntry" />. The <see cref="P:System.Windows.LocalValueEntry.Property" /> component of a <see cref="T:System.Windows.LocalValueEntry" /> is always a value type, so this comparison will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" /> component, this implementation employs a bitwise comparison if it is a value type.  
 For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the <see langword="==" /> operator on the two values internally. By default, this is a reference equality of the values.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>Gets the identifier for the locally set dependency property that is represented by this entry.</summary>
      <returns>The identifier for the locally set dependency property.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>Gets the value of the locally set dependency property.</summary>
      <returns>The value of the locally set dependency property as an object.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>Gets the number of items that are represented in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <param name="obj">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</summary>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</summary>
      <param name="obj1">The first object to compare.</param>
      <param name="obj2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>Specifies how a property is to be serialized.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>The property should be serialized as an attribute.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>Specifies the serialization flags for a property.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> class.</summary>
      <param name="designerSerializationOptions">Specifies how the property is to be serialized.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> is not a valid <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> value.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>Gets the <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> set on the attribute.</summary>
      <returns>The serialization option, as a value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>Abstract class used internally by the WPF XAML compiler to support the use of internal types.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.InternalTypeHelper" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>When overridden in a derived (generated) class, attaches an event handler delegate to an internal event.</summary>
      <param name="eventInfo">The event information for the event (CLR reflection information).</param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>When overridden in a derived (generated) class, creates an event delegate referencing a non-public handler method.</summary>
      <param name="delegateType">The <see cref="T:System.Type" /> of the delegate.</param>
      <param name="target">The target where the handler is attached.</param>
      <param name="handler">The name of the handler implementation.</param>
      <returns>The delegate reference.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, creates an instance of an internal type.</summary>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
      <param name="culture">Culture specific information.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, gets the value of an internal property on the target object</summary>
      <param name="propertyInfo">Property information for the property to get.</param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="culture">Culture specific information.</param>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived (generated) class, sets the value on an internal property on the target object.</summary>
      <param name="propertyInfo">Property information for the property to set.</param>
      <param name="target">The object that holds the desired property value.</param>
      <param name="value">The value to set.</param>
      <param name="culture">Culture specific information.</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Provides the handling for markup extensions that provide property values. Do not use for .NET Framework 4 implementations; see <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
      <param name="property">The name of the target property.</param>
      <param name="markupExtension">The markup extension instance of the incoming data.</param>
      <param name="serviceProvider">Can provide additional services that should be performed when processing the markup extension data for a property value.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>Abstract class that represents an object that can be used to navigate a tree of objects.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, assigns a root context for <see cref="T:System.Windows.Markup.ValueSerializer" /> classes.</summary>
      <param name="context">The <see cref="T:System.Windows.Markup.IValueSerializerContext" /> to assign a root context for.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>When overridden in a derived class, gets the instance of the object represented by this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>The instance of the object</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>When overridden in a derived class, gets the type of the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance.</summary>
      <returns>The type of the object.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>When overridden in a derived class, gets the properties of this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> instance that should be written to XAML.</summary>
      <returns>The properties.</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The collection of attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</summary>
      <returns>The dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>
        <see langword="true" /> if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property.</summary>
      <returns>
        <see langword="true" /> is this property is a composite property; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</summary>
      <returns>
        <see langword="true" /> if this property represents a constructor argument; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</summary>
      <returns>
        <see langword="true" /> if the property represents direct content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</summary>
      <returns>
        <see langword="true" /> if this property represents a key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</summary>
      <returns>
        <see langword="true" />, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>When overridden in a derived class, gets the items that make up the value of this property.</summary>
      <returns>The items that make up the value of this property.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>When overridden in a derived class, gets a name that is used for diagnostics and error reporting.</summary>
      <returns>The identifier property name.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property.</summary>
      <returns>The property descriptor.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>When overridden in a derived class, gets the CLR type of the property.</summary>
      <returns>The CLR type.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The string value.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</summary>
      <returns>The set of types.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>The current value.</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>Provides an implementation for the <see cref="T:System.IServiceProvider" /> interface with methods that enable adding services.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ServiceProviders" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>Adds a service to the list.</summary>
      <param name="serviceType">Service type of the new service.</param>
      <param name="service">The service implementation class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> or <paramref name="service" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add a service that already exists in the dictionary.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <param name="serviceType">The type of service object to get.</param>
      <returns>A service implementation for the type <paramref name="serviceType" />. May be <see langword="null" /> if there is no service stored for type <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Matrix" /> is possible.</summary>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <returns>
        <see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Matrix" /> can be converted to a <see cref="T:System.String" />.</summary>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="context">Context information used for conversion.</param>
      <returns>A new instance of <see cref="T:System.Windows.Media.Matrix" /> based on the supplied <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Matrix" /> to a <see cref="T:System.String" />.</summary>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Matrix" /> object.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>Represents a 3x3 affine transformation matrix used for transformations in 2-D space.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="m11">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M11" /> coefficient.</param>
      <param name="m12">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M12" /> coefficient.</param>
      <param name="m21">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M21" /> coefficient.</param>
      <param name="m22">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.M22" /> coefficient.</param>
      <param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" /> coefficient.</param>
      <param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix" /> structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" /> coefficient.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>Appends the specified <see cref="T:System.Windows.Media.Matrix" /> structure to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to append to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>Gets the determinant of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The determinant of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Matrix" /> structure that is identical to this <see cref="T:System.Windows.Media.Matrix" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Media.Matrix" /> structure is identical to this instance.</summary>
      <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" /> to compare to this instance.</param>
      <returns>
        <see langword="true" /> if instances are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is invertible.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Windows.Media.Matrix" /> has an inverse; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>Gets an identity <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>An identity matrix.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>Inverts this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix" /> structure is not invertible.</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Windows.Media.Matrix" /> structure is an identity matrix; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 1.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" /> structure. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are identical.</summary>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix1" /> and <paramref name="matrix2" /> are identical; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" /> structures are not identical.</summary>
      <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix1" /> and <paramref name="matrix2" /> are not identical; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplies a <see cref="T:System.Windows.Media.Matrix" /> structure by another <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" /> structure to multiply.</param>
      <returns>The result of multiplying <paramref name="trans1" /> by <paramref name="trans2" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>Converts a <see cref="T:System.String" /> representation of a matrix into the equivalent <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="source">The <see cref="T:System.String" /> representation of the matrix.</param>
      <returns>The equivalent <see cref="T:System.Windows.Media.Matrix" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>Prepends the specified <see cref="T:System.Windows.Media.Matrix" /> structure onto this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" /> structure to prepend to this <see cref="T:System.Windows.Media.Matrix" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="angle">The angle of rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>Rotates this matrix about the specified point.</summary>
      <param name="angle">The angle, in degrees, by which to rotate this matrix.</param>
      <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
      <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="angle">The rotation angle, in degrees.</param>
      <param name="centerX">The x-coordinate of the rotation center.</param>
      <param name="centerY">The y-coordinate of the rotation center.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="angle">The angle of rotation to prepend.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>Scales this <see cref="T:System.Windows.Media.Matrix" /> by the specified amount about the specified point.</summary>
      <param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
      <param name="centerX">The x-coordinate of the scale operation's center point.</param>
      <param name="centerY">The y-coordinate of the scale operation's center point.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">The x-axis scale factor.</param>
      <param name="scaleY">The y-axis scale factor.</param>
      <param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
      <param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>Prepends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the x-axis.</param>
      <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" /> structure along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>Changes this <see cref="T:System.Windows.Media.Matrix" /> structure into an identity matrix.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The provider to use to format the value.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Matrix" /> structure with culture-specific formatting information.</summary>
      <param name="provider">The culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" />, and <see cref="P:System.Windows.Media.Matrix.OffsetY" /> values of this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" /> and returns the result.</summary>
      <param name="point">The point to transform.</param>
      <returns>The result of transforming <paramref name="point" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>Transforms the specified vector by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vector">The vector to transform.</param>
      <returns>The result of transforming <paramref name="vector" /> by this <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>Transforms the specified vectors by this <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vectors">The vectors to transform. The original vectors in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the x-axis.</param>
      <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" /> along the y-axis.</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.MatrixConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a specific type to an instance of a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">The context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if the type can be converted to a <see cref="T:System.Windows.Media.Matrix" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Media.Matrix" /> can be converted to a different type.</summary>
      <param name="context">The context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Matrix" /> is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if this <see cref="T:System.Windows.Media.Matrix" /> can be converted to <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <returns>The <see cref="T:System.Windows.Media.Matrix" /> created from converting <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">The specified object is null or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Matrix" />.</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Media.Matrix" /> to a specified type.</summary>
      <param name="context">The context information of a type.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Matrix" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Matrix" /> to.</param>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <exception cref="T:System.NotSupportedException">The <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Matrix" />, or the <paramref name="destinationType" /> is not a valid conversion type.</exception>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary>Defines the formatting methods supported by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> class.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary>Indicates that the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> lays out text by using GDI-compatible font metrics.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary>Indicates that the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> lays out text by using ideal font metrics.</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>Implements base WPF support for the <see cref="T:System.Windows.Markup.INameScope" /> methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level.</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NameScope" /> class.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds an item to the collection.</summary>
      <param name="item">A <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />) that represents the name mapping to add to the XAML namescope.</param>
      <exception cref="T:System.ArgumentException">Either or both components of <paramref name="item" /> are <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>Adds an item to the collection.</summary>
      <param name="key">The string key, which is the name of the XAML namescope mapping to add.</param>
      <param name="value">The object value, which is the object reference of the XAML namescope mapping to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains a specified item.</summary>
      <param name="item">The item to find in the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> identifies an existing mapping in this <see cref="T:System.Windows.NameScope" /> . <see langword="false" /> if the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>Returns whether a provided name already exists in this <see cref="T:System.Windows.NameScope" />.</summary>
      <param name="key">The string key to find.</param>
      <returns>
        <see langword="true" /> if the specified <paramref name="key" /> identifies a name for an existing mapping in this <see cref="T:System.Windows.NameScope" />. <see langword="false" /> if the specified <paramref name="key" /> does not exist in the current <see cref="T:System.Windows.NameScope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>Returns the number of items in the collection of mapped names in this <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>Returns the corresponding object in the XAML namescope maintained by this <see cref="T:System.Windows.NameScope" />, based on a provided name string.</summary>
      <param name="name">Name portion of an existing mapping to retrieve the object portion for.</param>
      <returns>The requested object that is mapped with <paramref name="name" />. Can return <see langword="null" /> if <paramref name="name" /> was provided as <see langword="null" /> or empty string, or if no matching object was found.</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>Provides the attached property get accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <param name="dependencyObject">The object to get the XAML namescope from.</param>
      <returns>A XAML namescope, as an <see cref="T:System.Windows.Markup.INameScope" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>Gets or sets the item with the specified key.</summary>
      <param name="key">The string name for the XAML name mapping to get or set.</param>
      <returns>The value of the object mapped by the XAML name provided as <paramref name="key" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is provided as <see langword="null" />.  
-or-  
<paramref name="value" /> is provided as <see langword="null" /> for a set operation.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>Gets a collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the keys in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>Gets or sets dynamically attached <see cref="T:System.Windows.NameScope" /> instances.</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>Registers a new name-object pair into the current XAML namescope.</summary>
      <param name="name">The name to use for mapping the given object.</param>
      <param name="scopedElement">The object to be mapped to the provided name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="scopedElement" /> was provided as <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string  
-or-
 <paramref name="name" /> provided was rejected by the parser, because it contained characters that are invalid for a XAML name  
-or-
 <paramref name="name" /> provided would result in a duplicate name registration.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the specific object from the collection.</summary>
      <param name="item">The object to remove from the collection, specified as a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (key is <see cref="T:System.String" />, value is <see cref="T:System.Object" />).</param>
      <returns>
        <see langword="true" /> if item was successfully removed from the collection, otherwise <see langword="false" />. Also returns <see langword="false" /> if the item was not found in the collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>Removes a mapping for a specified name from the collection.</summary>
      <param name="key">The string key, which is the name of the XAML namescope mapping to remove.</param>
      <returns>
        <see langword="true" /> if item was successfully removed from the collection, otherwise <see langword="false" />. Also returns <see langword="false" /> if the item was not found in the collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>Provides the attached property set accessor for the <see cref="P:System.Windows.NameScope.NameScope" /> attached property.</summary>
      <param name="dependencyObject">Object to change XAML namescope for.</param>
      <param name="value">The new XAML namescope, using an interface cast.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, a null object. This parameter is passed uninitialized.</param>
      <returns>true if the <see cref="T:System.Windows.NameScope" /> contains a mapping for the name provided as <paramref name="key" />. Otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>Removes a name-object mapping from the XAML namescope.</summary>
      <param name="name">The name of the mapping to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> was provided as empty string.  
-or-
 <paramref name="name" /> provided had not been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>Gets a collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</summary>
      <returns>A collection of the values in the <see cref="T:System.Windows.NameScope" /> dictionary.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Represents an x- and y-coordinate pair in two-dimensional space.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Creates a new <see cref="T:System.Windows.Point" /> structure that contains the specified coordinates.</summary>
      <param name="x">The x-coordinate of the new <see cref="T:System.Windows.Point" /> structure.</param>
      <param name="y">The y-coordinate of the new <see cref="T:System.Windows.Point" /> structure.</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>Adds a <see cref="T:System.Windows.Vector" /> to a <see cref="T:System.Windows.Point" /> and returns the result as a <see cref="T:System.Windows.Point" /> structure.</summary>
      <param name="point">The <see cref="T:System.Windows.Point" /> structure to add.</param>
      <param name="vector">The <see cref="T:System.Windows.Vector" /> structure to add.</param>
      <returns>Returns the sum of <paramref name="point" /> and <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Point" /> and whether it contains the same coordinates as this <see cref="T:System.Windows.Point" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <param name="value">The point to compare to this instance.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="point1" /> and <paramref name="point2" /> contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> structure by the specified <see cref="T:System.Windows.Media.Matrix" /> structure.</summary>
      <param name="point">The point to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed point.</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>Offsets a point's <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates by the specified amounts.</summary>
      <param name="offsetX">The amount to offset the point's <see cref="P:System.Windows.Point.X" /> coordinate.</param>
      <param name="offsetY">The amount to offset the point's <see cref="P:System.Windows.Point.Y" /> coordinate.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>Translates the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Vector" /> and returns the result.</summary>
      <param name="point">The point to translate.</param>
      <param name="vector">The amount by which to translate <paramref name="point" />.</param>
      <returns>The result of translating the specified point by the specified vector.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <param name="point1">The first <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <returns>
        <see langword="true" /> if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <param name="point">The point to convert.</param>
      <returns>A <see cref="T:System.Windows.Size" /> structure with a <see cref="P:System.Windows.Size.Width" /> equal to this point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Size.Height" /> equal to this point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>Creates a <see cref="T:System.Windows.Vector" /> structure with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</summary>
      <param name="point">The point to convert.</param>
      <returns>A vector with an <see cref="P:System.Windows.Vector.X" /> value equal to the point's <see cref="P:System.Windows.Point.X" /> value and a <see cref="P:System.Windows.Vector.Y" /> value equal to the point's <see cref="P:System.Windows.Point.Y" /> value.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for inequality.</summary>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> coordinates; <see langword="false" /> if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> coordinates.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforms the specified <see cref="T:System.Windows.Point" /> by the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="point">The point to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The result of transforming the specified point using the specified matrix.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted.</param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />.</summary>
      <param name="point">The point from which <paramref name="vector" /> is subtracted.</param>
      <param name="vector">The vector to subtract from <paramref name="point1" /></param>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>Constructs a <see cref="T:System.Windows.Point" /> from the specified <see cref="T:System.String" />.</summary>
      <param name="source">A string representation of a point.</param>
      <returns>The equivalent <see cref="T:System.Windows.Point" /> structure.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> is not composed of two comma- or space-delimited double values.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> does not contain two numbers.  
-or-  
<paramref name="source" /> contains too many delimiters.</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Point" /> from another specified <see cref="T:System.Windows.Point" /> and returns the difference as a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">The point from which <paramref name="point2" /> is subtracted.</param>
      <param name="point2">The point to subtract from <paramref name="point1" />.</param>
      <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Vector" /> from the specified <see cref="T:System.Windows.Point" /> and returns the resulting <see cref="T:System.Windows.Point" />.</summary>
      <param name="point">The point from which <paramref name="vector" /> is subtracted.</param>
      <param name="vector">The <paramref name="vector" /> to subtract from <paramref name="point" />.</param>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">The string specifying the format to use.  
 -or-  
 <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The <see langword="IFormatProvider" /> to use to format the value.  
 -or-  
 <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>A string containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />.</summary>
      <param name="provider">Culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.</summary>
      <returns>The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PointConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if the type can be converted to a <see cref="T:System.Windows.Point" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of a <see cref="T:System.Windows.Point" /> can be converted to a different type.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Point" /> is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if this <see cref="T:System.Windows.Point" /> can be converted to <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <returns>The <see cref="T:System.Windows.Point" /> created from converting <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Point" />.</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Point" /> to a specified type.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Point" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Point" /> to.</param>
      <returns>The object created from converting this <see cref="T:System.Windows.Point" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is <see langword="null" /> or is not a <see cref="T:System.Windows.Point" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
      <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with a specified default value for the dependency property that this metadata will be applied to.</summary>
      <param name="defaultValue">The default value to specify for a dependency property, usually provided as a value of some specific type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and callbacks.</summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</summary>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.CoerceValueCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>Gets or sets the default value of the dependency property.</summary>
      <returns>The default value of the property. The default value on a <see cref="T:System.Windows.PropertyMetadata" /> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</returns>
      <exception cref="T:System.ArgumentException">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> once created.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.</summary>
      <returns>
        <see langword="true" /> if the metadata instance is immutable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>Merges this metadata with the base metadata.</summary>
      <param name="baseMetadata">The base metadata to merge with this instance's values.</param>
      <param name="dp">The dependency property to which this metadata is being applied.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</summary>
      <param name="dp">The dependency property to which the metadata has been applied.</param>
      <param name="targetType">The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation specified in this metadata.</summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describes the width, height, and location of a rectangle.</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height.</summary>
      <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> is a negative value.  
-or-  
<paramref name="height" /> is a negative value.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points.</summary>
      <param name="point1">The first point that the new rectangle must contain.</param>
      <param name="point2">The second point that the new rectangle must contain.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height.</summary>
      <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</summary>
      <param name="point">The first point the rectangle must contain.</param>
      <param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).</summary>
      <param name="size">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Gets the y-axis value of the bottom of the rectangle.</summary>
      <returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>Gets the position of the bottom-left corner of the rectangle</summary>
      <returns>The position of the bottom-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>Gets the position of the bottom-right corner of the rectangle.</summary>
      <returns>The position of the bottom-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</summary>
      <param name="x">The x-coordinate of the point to check.</param>
      <param name="y">The y-coordinate of the point to check.</param>
      <returns>
        <see langword="true" /> if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indicates whether the rectangle contains the specified point.</summary>
      <param name="point">The point to check.</param>
      <returns>
        <see langword="true" /> if the rectangle contains the specified point; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>Indicates whether the rectangle contains the specified rectangle.</summary>
      <param name="rect">The rectangle to check.</param>
      <returns>
        <see langword="true" /> if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Gets a special value that represents a rectangle with no position or area.</summary>
      <returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current rectangle.</summary>
      <param name="o">The object to compare to the current rectangle.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle is equal to the current rectangle.</summary>
      <param name="value">The rectangle to compare to the current rectangle.</param>
      <returns>
        <see langword="true" /> if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>Indicates whether the specified rectangles are equal.</summary>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Creates a hash code for the rectangle.</summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Gets or sets the height of the rectangle.</summary>
      <returns>A positive number that represents the height of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</summary>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</summary>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
      <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
      <returns>The resulting rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions.</summary>
      <param name="rect">The <see cref="T:System.Windows.Rect" /> structure to modify.</param>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</param>
      <returns>The resulting rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions.</summary>
      <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</summary>
      <param name="rect">The rectangle to intersect with the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>Returns the intersection of the specified rectangles.</summary>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
      <returns>The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" /> if no intersection exists.</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>Indicates whether the specified rectangle intersects with the current rectangle.</summary>
      <param name="rect">The rectangle to check.</param>
      <returns>
        <see langword="true" /> if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</summary>
      <returns>
        <see langword="true" /> if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Gets the x-axis value of the left side of the rectangle.</summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>Gets or sets the position of the top-left corner of the rectangle.</summary>
      <returns>The position of the top-left corner of the rectangle. The default is (0, 0).</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>Moves the rectangle by the specified horizontal and vertical amounts.</summary>
      <param name="offsetX">The amount to move the rectangle horizontally.</param>
      <param name="offsetY">The amount to move the rectangle vertically.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</summary>
      <param name="rect">The rectangle to move.</param>
      <param name="offsetX">The horizontal offset for the new rectangle.</param>
      <param name="offsetY">The vertical offset for the new rectangle.</param>
      <returns>The resulting rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>Returns a rectangle that is offset from the specified rectangle by using the specified vector.</summary>
      <param name="rect">The original rectangle.</param>
      <param name="offsetVector">A vector that specifies the horizontal and vertical offsets for the new rectangle.</param>
      <returns>The resulting rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>Moves the rectangle by the specified vector.</summary>
      <param name="offsetVector">A vector that specifies the horizontal and vertical amounts to move the rectangle.</param>
      <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for exact equality.</summary>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
      <returns>
        <see langword="true" /> if the rectangles do not have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>Creates a new rectangle from the specified string representation.</summary>
      <param name="source">The string representation of the rectangle, in the form "x, y, width, height".</param>
      <returns>The resulting rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Gets the x-axis value of the right side of the rectangle.</summary>
      <returns>The x-axis value of the right side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>Multiplies the size of the current rectangle by the specified x and y values.</summary>
      <param name="scaleX">The scale factor in the x-direction.</param>
      <param name="scaleY">The scale factor in the y-direction.</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>Gets or sets the width and height of the rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The provider to use to format the value.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>A string representation of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Gets the y-axis position of the top of the rectangle.</summary>
      <returns>The y-axis position of the top of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>Gets the position of the top-left corner of the rectangle.</summary>
      <returns>The position of the top-left corner of the rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>Gets the position of the top-right corner of the rectangle.</summary>
      <returns>The position of the top-right corner of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Returns a string representation of the rectangle.</summary>
      <returns>A string representation of the current rectangle. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of the rectangle by using the specified format provider.</summary>
      <param name="provider">Culture-specific formatting information.</param>
      <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>Transforms the rectangle by applying the specified matrix.</summary>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>Returns the rectangle that results from applying the specified matrix to the specified rectangle.</summary>
      <param name="rect">A rectangle that is the basis for the transformation.</param>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
      <returns>The rectangle that results from the operation.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expands the current rectangle exactly enough to contain the specified point.</summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expands the current rectangle exactly enough to contain the specified rectangle.</summary>
      <param name="rect">The rectangle to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</summary>
      <param name="rect">The rectangle to include.</param>
      <param name="point">The point to include.</param>
      <returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>Creates a rectangle that is exactly large enough to contain the two specified rectangles.</summary>
      <param name="rect1">The first rectangle to include.</param>
      <param name="rect2">The second rectangle to include.</param>
      <returns>The resulting rectangle.</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Gets or sets the width of the rectangle.</summary>
      <returns>A positive number that represents the width of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> is set to a negative value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Gets or sets the x-axis value of the left side of the rectangle.</summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Gets or sets the y-axis value of the top side of the rectangle.</summary>
      <returns>The y-axis value of the top side of the rectangle.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RectConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if the type can be converted to a <see cref="T:System.Windows.Rect" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a <see cref="T:System.Windows.Rect" /> can be converted to the specified type.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Rect" /> is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if a <see cref="T:System.Windows.Rect" /> can be converted to <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected when converting.</param>
      <param name="value">The object being converted.</param>
      <returns>The <see cref="T:System.Windows.Rect" /> created from converting <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Rect" />.</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Rect" /> to the specified type.</summary>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information which is respected during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Rect" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Rect" /> to.</param>
      <returns>The object created from converting this <see cref="T:System.Windows.Rect" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is <see langword="null" />.  
-or-
 <paramref name="value" /> is not a <see cref="T:System.Windows.Rect" />.  
-or-
 The <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Implements a structure that is used to describe the <see cref="T:System.Windows.Size" /> of an object.</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.</summary>
      <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />.</param>
      <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />.</summary>
      <returns>An empty instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality.</summary>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <see langword="true" /> if the sizes are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality.</summary>
      <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />.</param>
      <returns>
        <see langword="true" /> if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality.</summary>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <returns>
        <see langword="true" /> if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>The hash code for this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />. The default is 0. The value cannot be negative.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />.</summary>
      <returns>
        <see langword="true" /> if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality.</summary>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Point" />.</summary>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
      <returns>A <see cref="T:System.Windows.Point" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>Explicitly converts an instance of <see cref="T:System.Windows.Size" /> to an instance of <see cref="T:System.Windows.Vector" />.</summary>
      <param name="size">The <see cref="T:System.Windows.Size" /> value to be converted.</param>
      <returns>A <see cref="T:System.Windows.Vector" /> equal in value to this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for inequality.</summary>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <returns>
        <see langword="true" /> if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>Returns an instance of <see cref="T:System.Windows.Size" /> from a converted <see cref="T:System.String" />.</summary>
      <param name="source">A <see cref="T:System.String" /> value to parse to a <see cref="T:System.Windows.Size" /> value.</param>
      <returns>An instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="format">The format to use.</param>
      <param name="provider">The provider to use to format the value.</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that specifies the width followed by the height.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance of <see cref="T:System.Windows.Size" />.</summary>
      <param name="provider">An object that provides a way to control formatting.</param>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:System.Windows.Size" /> object.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Gets or sets the <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />.</summary>
      <returns>The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />. The default value is <c>0</c>. The value cannot be negative.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>Converts instances of other types to and from instances of the <see cref="T:System.Windows.Size" /> class.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SizeConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether a class can be converted from a given type to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Provides contextual information about a component.</param>
      <param name="sourceType">Identifies the data type to evaluate for conversion.</param>
      <returns>
        <see langword="true" /> if the <paramref name="sourceType" /> can be converted to an instance of <see cref="T:System.Windows.Size" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Size" /> can be converted to a different type.</summary>
      <param name="context">Provides contextual information about a component.</param>
      <param name="destinationType">Identifies the data type to evaluate for conversion.</param>
      <returns>
        <see langword="true" /> if this instance of <see cref="T:System.Windows.Size" /> can be converted to the <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The source object that is being converted.</param>
      <returns>The instance of <see cref="T:System.Windows.Size" /> that is created from the converted <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Size" /> to a specified type.</summary>
      <param name="context">Provides contextual information about a component.</param>
      <param name="culture">Culture-specific information that should be respected during conversion.</param>
      <param name="value">The instance of <see cref="T:System.Windows.Size" /> to convert.</param>
      <param name="destinationType">The type that this instance of <see cref="T:System.Windows.Size" /> is converted to.</param>
      <returns>The object that is created from the converted instance of <see cref="T:System.Windows.Size" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is <see langword="null" /> or is not an instance of <see cref="T:System.Windows.Size" />, or if the <paramref name="destinationType" /> is not one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Provides a startup screen for a Windows Presentation Foundation (WPF) application.</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource assembly.</summary>
      <param name="resourceAssembly">The assembly that contains the embedded resource.</param>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" /> class with the specified resource.</summary>
      <param name="resourceName">The name of the embedded resource.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>Closes the splash screen.</summary>
      <param name="fadeoutDuration">A <see cref="T:System.TimeSpan" /> that specifies how long it will take for the splash screen to fade after the close operation has been initiated.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>Displays the splash screen.</summary>
      <param name="autoClose">
        <see langword="true" /> to automatically close the splash screen; <see langword="false" /> to close the splash screen manually.</param>
      <exception cref="T:System.IO.IOException">The resource specified in the constructor could not be found.</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>Displays the splash screen.</summary>
      <param name="autoClose">
        <see langword="true" /> to automatically close the splash screen; <see langword="false" /> to close the splash screen manually.</param>
      <param name="topMost">
        <see langword="true" /> if the splash screen window should use the WS_EX_TOPMOST style; otherwise <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Provides services for managing the queue of work items for a thread.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">The object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method.</param>
      <returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</summary>
      <param name="priority">The priority at which to begin shutting down the dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>
        <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</summary>
      <returns>The dispatcher associated with the current thread.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
      <returns>A structure used to re-enable dispatcher processing.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>Requests that all frames exit, including nested frames.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</summary>
      <param name="thread">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</param>
      <returns>The dispatcher for <paramref name="thread" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</summary>
      <returns>
        <see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
      <param name="timeout">The minimum amount of time to wait for the operation to start.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method.</param>
      <param name="args">An array of objects to pass as arguments to the given method.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the given method. This can be <see langword="null" /> if no arguments are needed.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid priority.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</param>
      <param name="arg">An object to pass as an argument to the specified method.</param>
      <param name="args">An array of objects to pass as arguments to the specified method.</param>
      <returns>The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the operation.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the operation.</param>
      <param name="timeout">The minimum amount of time to wait for the operation to start.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <param name="callback">A delegate to invoke through the dispatcher.</param>
      <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">An object that indicates whether to cancel the operation.</param>
      <typeparam name="TResult">The return value type of the specified delegate.</typeparam>
      <returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>Enters an execute loop.</summary>
      <param name="frame">The frame for the dispatcher to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" />  
-or-  
<paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.  
-or-  
Dispatcher processing has been disabled.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</summary>
      <returns>The thread.</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</summary>
      <param name="priority">The priority to check.</param>
      <param name="parameterName">A string that will be returned by the exception that occurs if the priority is invalid.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <exception cref="T:System.InvalidOperationException">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</summary>
      <returns>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</summary>
      <param name="priority">The priority at which to schedule the continuation.</param>
      <returns>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.Dispatcher" /> related events.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>The <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event.</summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>Represents an execution loop in the <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" /> class, by using the specified exit request flag.</summary>
      <param name="exitWhenRequested">Indicates whether this frame will exit when all frames are requested to exit.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Threading.DispatcherFrame" /> should continue.</summary>
      <returns>
        <see langword="true" /> if the frame should continue; otherwise, <see langword="false" />.  The default value is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>Provides event data for <see cref="T:System.Windows.Threading.DispatcherHooks" /> events.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> class.</summary>
      <param name="operation">The operation associated with the event.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event.</summary>
      <returns>The <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this event.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>Gets the <see cref="T:System.Windows.Threading.DispatcherOperation" /> associated with this event.</summary>
      <returns>The operation.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>Represents the method that will handle <see cref="T:System.Windows.Threading.DispatcherHooks" /> related events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>Provides additional event information about <see cref="T:System.Windows.Threading.Dispatcher" /> processing.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>Occurs when the dispatcher has no more operations to process.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>Occurs when an operation is aborted.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>Occurs when an operation completes.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>Occurs when an operation is posted to the dispatcher.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>Occurs when the priority of an operation is changed.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>Occurs when an operation is invoked.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>
        <see langword="true" /> if the calling thread has access to this object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this <see cref="T:System.Windows.Threading.DispatcherObject" /> is associated with.</summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>Aborts the operation.</summary>
      <returns>
        <see langword="true" /> if the operation was aborted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>Occurs when the operation is aborted.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>Occurs when the operation has completed.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> that the operation was posted to.</summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>Returns an object that is notified when the asynchronous operation is finished.</summary>
      <returns>An object that is notified when the asynchronous operation is finished.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>Begins the operation that is associated with this <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>
        <see langword="null" /> in all cases.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
      <returns>The priority of the delegate on the queue.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>Gets the result of the operation after it has completed.</summary>
      <returns>The result of the operation -or- <see langword="null" /> if the operation has not completed.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>Gets the current status of the operation.</summary>
      <returns>The status of the operation.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task`1" /> that represents the current operation.</summary>
      <returns>An object that represents the current operation.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>Waits for the operation to complete</summary>
      <returns>The status of the operation.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>Waits for the operation to complete in the specified period of time.</summary>
      <param name="timeout">The maximum period of time to wait.</param>
      <returns>The status of the operation.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" /> queue and contains a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <typeparam name="TResult">The type that is returned by the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>Returns an object that awaits an asynchronous operation that returns a result.</summary>
      <returns>An object that awaits an asynchronous operation that returns a result.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>Begins the operation that is associated with this <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>The result of the operation.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>Gets the result of the operation after it has completed.</summary>
      <returns>The result of the operation.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task`1" /> that represents the current operation.</summary>
      <returns>An object that represents the current operation.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>Represents a delegate to use for dispatcher operations.</summary>
      <param name="arg">An argument passed to the callback.</param>
      <returns>The object returned by the callback.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>Describes the possible values for the status of a <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>The operation has aborted.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>The operation is completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>The operation started executing, but has not completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>The operation is pending and is still in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>Describes the priorities at which operations can be invoked by way of the <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>The enumeration value is 2.  Operations are processed when the application is idle.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>The enumeration value is 4.  Operations are processed after all other non-idle operations are completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>The enumeration value is 3.  Operations are processed after background operations have completed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>The enumeration value is 8.  Operations are processed at the same priority as data binding.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>The enumeration value is 0.  Operations are not processed.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>The enumeration value is 5.  Operations are processed at the same priority as input.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>The enumeration value is -1.  This is an invalid priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>The enumeration value is 6.  Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>The enumeration value is 9.  Operations are processed at normal priority.  This is the typical application priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>The enumeration value is 7.  Operations processed at the same priority as rendering.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>The enumeration value is 10.  Operations are processed before other asynchronous operations.  This is the highest priority.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>The enumeration value is 1.  Operations are processed when the system is idle.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>Represents an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>Returns an object that waits for the completion of an asynchronous task.</summary>
      <returns>An object that waits for the completion of an asynchronous task.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>Represents an object that waits for the completion of an asynchronous task.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>Ends the wait for the completion of the asynchronous task.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
      <returns>
        <see langword="false" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>Sets the action to perform when the <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> object stops waiting for the asynchronous task to complete.</summary>
      <param name="continuation">The action to perform when the wait operation completes.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>Re-enables dispatcher processing.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object.</summary>
      <param name="obj">The object to evaluate for equality.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>Gets a hash code for this instance.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objects are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Provides a synchronization context for Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> with.</param>
      <param name="priority">The priority used to send and post callback methods.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context asynchronously.</summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invokes the callback in the synchronization context synchronously.</summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">An array that contains the native operating system handles.</param>
      <param name="waitAll">
        <see langword="true" /> to wait for all handles; <see langword="false" /> to wait for any handle.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The array index of the object that satisfied the wait.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" /> queue which is processed at a specified interval of time and at a specified priority.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="interval">The period of time between ticks.</param>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="callback">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> event occurs.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is <see langword="null" />.
-or-
      &lt;code data-dev-comment-type="paramref"&gt;dispatcher&lt;/code&gt; is &lt;code data-dev-comment-type="langword"&gt;null&lt;/code&gt;.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which processes timer events at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" /> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" /> at the specified priority.</summary>
      <param name="priority">The priority at which to invoke the timer.</param>
      <param name="dispatcher">The dispatcher the timer is associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      <returns>The dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Gets or sets the period of time between timer ticks.</summary>
      <returns>The period of time between ticks. The default is 00:00:00.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Gets or sets a value that indicates whether the timer is running.</summary>
      <returns>
        <see langword="true" /> if the timer is enabled; otherwise, <see langword="false" />.  The default is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>Gets or sets a user-defined data object.</summary>
      <returns>The user-defined data.  The default is <see langword="null" />.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Occurs when the timer interval has elapsed.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>Gets or sets whether the exception event has been handled.</summary>
      <returns>
        <see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>Gets or sets whether the exception should be caught and the event handlers called.</summary>
      <returns>
        <see langword="true" /> if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> should be raised; otherwise; <see langword="false" />.  The default value is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>Represents a method used as a callback that validates the effective value of a  dependency property.</summary>
      <param name="value">The value to be validated.</param>
      <returns>
        <see langword="true" /> if the value was validated; <see langword="false" /> if the submitted value was invalid.</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>Represents a displacement in 2-D space.</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</summary>
      <param name="x">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
      <param name="y">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>Translates the specified point by the specified vector and returns the resulting point.</summary>
      <param name="vector">The amount to translate the specified point.</param>
      <param name="point">The point to translate.</param>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</summary>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>Retrieves the angle, expressed in degrees, between the two specified vectors.</summary>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
      <returns>The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
      <returns>The cross product of <paramref name="vector1" /> and <paramref name="vector2" />. The following formula is used to calculate the cross product:  
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the determinant of two vectors.</summary>
      <param name="vector1">The first vector to evaluate.</param>
      <param name="vector2">The second vector to evaluate.</param>
      <returns>The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector">The vector structure to divide.</param>
      <param name="scalar">The amount by which <paramref name="vector" /> is divided.</param>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</summary>
      <param name="o">The vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>Compares two vectors for equality.</summary>
      <param name="value">The vector to compare with this vector.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares the two specified vectors for equality.</summary>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>Returns the hash code for this vector.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>Gets the length of this vector.</summary>
      <returns>The length of this vector.</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>Gets the square of the length of this vector.</summary>
      <returns>The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</summary>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vector">The vector structure to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</summary>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector structure to multiply.</param>
      <returns>A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>Normalizes this vector.</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>Translates a point by the specified vector and returns the resulting point.</summary>
      <param name="vector">The vector used to translate <paramref name="point" />.</param>
      <param name="point">The point to translate.</param>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adds two vectors and returns the result as a vector.</summary>
      <param name="vector1">The first vector to add.</param>
      <param name="vector2">The second vector to add.</param>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>Divides the specified vector by the specified scalar and returns the resulting vector.</summary>
      <param name="vector">The vector to divide.</param>
      <param name="scalar">The scalar by which <paramref name="vector" /> will be divided.</param>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares two vectors for equality.</summary>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</summary>
      <param name="vector">The vector to convert.</param>
      <returns>A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</summary>
      <param name="vector">The vector to convert.</param>
      <returns>A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compares two vectors for inequality.</summary>
      <param name="vector1">The first vector to compare.</param>
      <param name="vector2">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplies the specified scalar by the specified vector and returns the resulting vector.</summary>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The vector to multiply.</param>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplies the specified vector by the specified scalar and returns the resulting vector.</summary>
      <param name="vector">The vector to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vector">The vector to transform.</param>
      <param name="matrix">The transformation to apply to <paramref name="vector" />.</param>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</summary>
      <param name="vector1">The first vector to multiply.</param>
      <param name="vector2">The second vector to multiply.</param>
      <returns>Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  
 <c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts one specified vector from another.</summary>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted.</param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>Negates the specified vector.</summary>
      <param name="vector">The vector to negate.</param>
      <returns>A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</summary>
      <param name="source">The string representation of the vector.</param>
      <returns>The equivalent <see cref="T:System.Windows.Vector" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtracts the specified vector from another specified vector.</summary>
      <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted.</param>
      <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
      <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">The string specifying the format to use.  
 -or-  
 <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The <see langword="IFormatProvider" /> to use to format the value.  
 -or-  
 <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>A string containing the value of the current instance in the specified format.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</summary>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</summary>
      <param name="provider">The culture-specific formatting information.</param>
      <returns>A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</summary>
      <returns>The <see cref="P:System.Windows.Vector.X" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</summary>
      <returns>The <see cref="P:System.Windows.Vector.Y" /> component of this vector. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indicates whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The source <see cref="T:System.Type" /> that is being queried for conversion support.</param>
      <returns>
        <see langword="true" /> if objects of the specified type can be converted to a <see cref="T:System.Windows.Vector" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether instances of <see cref="T:System.Windows.Vector" /> can be converted to the specified type.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Vector" /> is being evaluated for conversion.</param>
      <returns>
        <see langword="true" /> if instances of <see cref="T:System.Windows.Vector" /> can be converted to <paramref name="destinationType" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <returns>The <see cref="T:System.Windows.Vector" /> created from converting <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified <see cref="T:System.Windows.Vector" /> to the specified type.</summary>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Vector" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Vector" /> to.</param>
      <returns>The object created from converting this <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>Provides a base class for the event manager that is used in the weak event pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>Initializes base class values when it is used as the initializer by the constructor of a derived class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>Delivers the event being managed to each listener.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>Delivers the event being managed to each listener in the provided list.</summary>
      <param name="sender">The object on which the event is being handled.</param>
      <param name="args">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <param name="list">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</summary>
      <param name="managerType">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</param>
      <returns>The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>Gets or sets the data being stored for the specified source.</summary>
      <param name="source">The zero-based index of the requested source.</param>
      <returns>Data being stored by the manager for this source.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</summary>
      <param name="capacity">The number of items that should be allocated in the initial list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.</summary>
      <returns>
        <see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>A modifiable clone of the current object.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></summary>
      <param name="newList">The object to copy to.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="args">An object that contains the event data.</param>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</param>
      <returns>
        <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>Gets a value that represents an empty list for purposes of comparisons.</summary>
      <returns>The empty list representation.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</summary>
      <returns>
        <see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</summary>
      <param name="index">The zero-based index of the listener in the list.</param>
      <returns>The item at that index, or a null reference if no item was at that index.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</summary>
      <param name="list">The list to check for use state and potentially copy.</param>
      <returns>
        <see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy. <see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>Removes all entries from the list where the underlying reference target is a null reference.</summary>
      <returns>Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">The item to remove.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>Provides a type-safe collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />. This class defines a type parameter for the event data that is used.</summary>
      <typeparam name="TEventArgs">The type that holds the event data.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> class.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> class with the specified initial capacity.</summary>
      <param name="capacity">The number of items that should be allocated in the initial list.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />, making deep copies of the values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">An object that contains the event data.</param>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</param>
      <returns>
        <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>Returns a new object to contain listeners to an event.</summary>
      <returns>A new object to contain listeners to an event.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>Adds the specified delegate as an event handler of the specified source.</summary>
      <param name="source">The source object that the handler delegate subscribes to.</param>
      <param name="handler">The delegate that handles the event that is raised by <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Adds the provided listener to the provided source for the event being managed.</summary>
      <param name="source">The source to attach listeners to.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>Removes the previously added handler from the specified source.</summary>
      <param name="source">The source to remove the handler from.</param>
      <param name="handler">The delegate to remove from <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Removes a previously added listener from the provided source.</summary>
      <param name="source">The source to remove listeners from.</param>
      <param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Removes inactive listener entries from the data list for the provided source. Returns <see langword="true" /> if some entries were actually removed from the list.</summary>
      <param name="source">The source for events being listened to.</param>
      <param name="data">The data to check. This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</param>
      <param name="purgeAll">
        <see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</param>
      <returns>
        <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>Removes all listeners for the specified source.</summary>
      <param name="source">The source to remove listener information for.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>Sets the current manager for the specified manager type.</summary>
      <param name="managerType">The type to set the new event manager.</param>
      <param name="manager">The new event manager.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>When overridden in a derived class, starts listening for the event being managed. After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</summary>
      <param name="source">The source to begin listening on.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
      <param name="source">The source to stop listening on.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</summary>
      <returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>Provides a type-safe <see cref="T:System.Windows.WeakEventManager" /> that enables you to specify the event handler to use for the "weak event listener" pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.</summary>
      <typeparam name="TEventSource">The type that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type that holds the event data.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Adds the specified event handler to the specified event.</summary>
      <param name="source">The source object that raises the specified event.</param>
      <param name="eventName">The name of the event to subscribe to.</param>
      <param name="handler">The delegate that handles the event.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>Returns a new object to contain listeners to an event.</summary>
      <returns>A new object to contain listeners to an event.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Removes the specified event handler from the specified event.</summary>
      <param name="source">The source object that raises the specified event.</param>
      <param name="eventName">The name of the event to remove the handler from.</param>
      <param name="handler">The delegate to remove</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>Starts listening for the event on the specified object.</summary>
      <param name="source">The object to that raises the event.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>Stops listening for the event on the specified object.</summary>
      <param name="source">The object to that raises the event.</param>
    </member>
  </members>
</doc>