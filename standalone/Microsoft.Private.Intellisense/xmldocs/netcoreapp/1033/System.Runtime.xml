<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> class.</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>Gets a value that indicates whether the handle is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid">
      <summary>Provides a base class for Win32 critical handle implementations in which the value of either 0 or -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid" /> class.</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>Gets a value that indicates whether the handle is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeFileHandle">
      <summary>Represents a wrapper class for a file handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> class.</summary>
      <param name="preexistingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">
        <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid">
      <summary>Gets a value that indicates whether the handle is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released.</summary>
      <param name="ownsHandle">
        <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>Gets a value that indicates whether the handle is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released.</summary>
      <param name="ownsHandle">
        <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>Gets a value that indicates whether the handle is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is not valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>Represents a wrapper class for a wait handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> class.</summary>
      <param name="existingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">
        <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release (not recommended).</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>The exception that is thrown when there is an attempt to read or write protected memory.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Action">
      <summary>Encapsulates a method that has no parameters and does not return a value.</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>Encapsulates a method that has a single parameter and does not return a value.</summary>
      <param name="obj">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`10">
      <summary>Encapsulates a method that has 10 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>Encapsulates a method that has 11 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>Encapsulates a method that has 12 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>Encapsulates a method that has 13 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>Encapsulates a method that has 14 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>Encapsulates a method that has 15 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>Encapsulates a method that has 16 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`2">
      <summary>Encapsulates a method that has two parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>Encapsulates a method that has three parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>Encapsulates a method that has four parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>Encapsulates a method that has five parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>Encapsulates a method that has six parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>Encapsulates a method that has seven parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>Encapsulates a method that has eight parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>Encapsulates a method that has nine parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and parameterless constructor.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the preferred type.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">You cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
 -or-  
 The assembly name or code base is invalid.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the preferred type.</param>
      <param name="ignoreCase">
        <see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
 -or-  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
 -or-  
 The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
 -or-  
 The assembly name or code base is invalid.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly and parameterless constructor.</summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched.</param>
      <param name="typeName">The fully qualified name of the preferred type.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
 -or-  
 <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
 -or-  
 <paramref name="activationAttributes" /> is not a <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />  
 array.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.  
 -or-  
 The assembly name or code base is invalid.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred when attempting remote activation in a target specified in <paramref name="activationAttributes" />.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified type using that type's parameterless constructor.</summary>
      <param name="type">The type of object to create.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.  


            

 No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>Creates an instance of the specified type using that type's parameterless constructor.</summary>
      <param name="type">The type of object to create.</param>
      <param name="nonPublic">
        <see langword="true" /> if a public or nonpublic parameterless constructor can match; <see langword="false" /> if only a public parameterless constructor can match.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
-or-  
The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.  


            

 No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
<paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
-or-  
The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
-or-  
The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the specified type using the constructor that best matches the specified parameters.</summary>
      <param name="type">The type of object to create.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-or-  
Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.  
-or-  
<paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.  
-or-  
The assembly that contains <paramref name="type" /> is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.  
-or-  
The constructor that best matches <paramref name="args" /> has <see langword="varargs" /> arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through <see cref="Overload:System.Type.GetTypeFromProgID" /> or <see cref="Overload:System.Type.GetTypeFromCLSID" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.</exception>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</summary>
      <typeparam name="T">The type to create.</typeparam>
      <returns>A reference to the newly created object.</returns>
      <exception cref="T:System.MissingMethodException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.  


            

 The type that is specified for <paramref name="T" /> does not have a parameterless constructor.</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and parameterless constructor.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the preferred type.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the preferred type.</param>
      <param name="ignoreCase">
        <see langword="true" /> to specify that the search for <paramref name="typeName" /> is not case-sensitive; <see langword="false" /> to specify that the search is case-sensitive.</param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</param>
      <param name="binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the parameterless constructor) is invoked.</param>
      <param name="culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>Creates an instance of the type whose name is specified, using the named assembly file and parameterless constructor.</summary>
      <param name="assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name="typeName">The name of the preferred type.</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  
 This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>A handle that must be unwrapped to access the newly created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> was not found in <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> was not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor, which was invoked through reflection, threw an exception.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> is not an empty array, and the type being created does not derive from <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does have the required <see cref="T:System.Security.Permissions.FileIOPermission" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
The common language runtime (CLR) version 2.0 or later is currently loaded, and <paramref name="assemblyName" /> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0.</exception>
    </member>
    <member name="T:System.AggregateException">
      <summary>Represents one or more errors that occur during application execution.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with references to the inner exceptions that are the cause of this exception.</summary>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions" /> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with references to the inner exceptions that are the cause of this exception.</summary>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions" /> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> argument is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The exception could not be deserialized correctly.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with a specified error message and references to the inner exceptions that are the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions" /> is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerException" /> argument is null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with a specified error message and references to the inner exceptions that are the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions" /> is null.</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>Flattens an <see cref="T:System.AggregateException" /> instances into a single, new instance.</summary>
      <returns>A new, flattened <see cref="T:System.AggregateException" />.</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>Returns the <see cref="T:System.AggregateException" /> that is the root cause of this exception.</summary>
      <returns>The <see cref="T:System.AggregateException" /> that is the root cause of this exception.</returns>
    </member>
    <member name="M:System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.AggregateException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> argument is null.</exception>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>Invokes a handler on each <see cref="T:System.Exception" /> contained by this <see cref="T:System.AggregateException" />.</summary>
      <param name="predicate">The predicate to execute for each exception. The predicate accepts as an argument the <see cref="T:System.Exception" /> to be processed and returns a Boolean to indicate whether the exception was handled.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">An exception contained by this <see cref="T:System.AggregateException" /> was not handled.</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>Gets a read-only collection of the <see cref="T:System.Exception" /> instances that caused the current exception.</summary>
      <returns>A read-only collection of the <see cref="T:System.Exception" /> instances that caused the current exception.</returns>
    </member>
    <member name="P:System.AggregateException.Message">
      <summary>Gets a message that describes the exception.</summary>
      <returns>The message that describes the exception.</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>Creates and returns a string representation of the current <see cref="T:System.AggregateException" />.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:System.AppContext">
      <summary>Provides members for setting and retrieving data about an application's context.</summary>
    </member>
    <member name="P:System.AppContext.BaseDirectory">
      <summary>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</summary>
      <returns>the pathname of the base directory that the assembly resolver uses to probe for assemblies.</returns>
    </member>
    <member name="M:System.AppContext.GetData(System.String)">
      <summary>Returns the value of the named data element assigned to the current application domain.</summary>
      <param name="name">The name of the data element.</param>
      <returns>The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
      <summary>Sets the value of a switch.</summary>
      <param name="switchName">The name of the switch.</param>
      <param name="isEnabled">The value of the switch.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="P:System.AppContext.TargetFrameworkName">
      <summary>Gets the name of the framework version targeted by the current application.</summary>
      <returns>The name of the framework version targeted by the current application.</returns>
    </member>
    <member name="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
      <summary>Tries to get the value of a switch.</summary>
      <param name="switchName">The name of the switch.</param>
      <param name="isEnabled">When this method returns, contains the value of <paramref name="switchName" /> if <paramref name="switchName" /> was found, or <see langword="false" /> if <paramref name="switchName" /> was not found. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="T:System.ApplicationException">
      <summary>Serves as the base class for application-defined exceptions.</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class.</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ArgIterator">
      <summary>Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.</summary>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgIterator" /> structure using the specified argument list.</summary>
      <param name="arglist">An argument list consisting of mandatory and optional arguments.</param>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgIterator" /> structure using the specified argument list and a pointer to an item in the list.</summary>
      <param name="arglist">An argument list consisting of mandatory and optional arguments.</param>
      <param name="ptr">A pointer to the argument in <paramref name="arglist" /> to access first, or the first mandatory argument in <paramref name="arglist" /> if <paramref name="ptr" /> is <see langword="null" />.</param>
    </member>
    <member name="M:System.ArgIterator.End">
      <summary>Concludes processing of the variable-length argument list represented by this instance.</summary>
    </member>
    <member name="M:System.ArgIterator.Equals(System.Object)">
      <summary>This method is not supported, and always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="o">An object to be compared to this instance.</param>
      <returns>This comparison is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.ArgIterator.GetHashCode">
      <summary>Returns the hash code of this object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArg">
      <summary>Returns the next argument in a variable-length argument list.</summary>
      <returns>The next argument as a <see cref="T:System.TypedReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to read beyond the end of the list.</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)">
      <summary>Returns the next argument in a variable-length argument list that has a specified type.</summary>
      <param name="rth">A runtime type handle that identifies the type of the argument to retrieve.</param>
      <returns>The next argument as a <see cref="T:System.TypedReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to read beyond the end of the list.</exception>
      <exception cref="T:System.ArgumentNullException">The pointer to the remaining arguments is zero.</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArgType">
      <summary>Returns the type of the next argument.</summary>
      <returns>The type of the next argument.</returns>
    </member>
    <member name="M:System.ArgIterator.GetRemainingCount">
      <summary>Returns the number of arguments remaining in the argument list.</summary>
      <returns>The number of remaining arguments.</returns>
    </member>
    <member name="T:System.ArgumentException">
      <summary>The exception that is thrown when one of the arguments provided to a method is not valid.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>Gets the error message and the parameter name, or only the error message if no parameter name is set.</summary>
      <returns>A text string describing the details of the exception. The value of this property takes one of two forms:  
  Condition  

  Value  

  The <paramref name="paramName" /> is a null reference (<see langword="Nothing" /> in Visual Basic) or of zero length.  

  The <paramref name="message" /> string passed to the constructor.  

  The <paramref name="paramName" /> is not null reference (<see langword="Nothing" /> in Visual Basic) and it has a length greater than zero.  

  The <paramref name="message" /> string appended with the name of the invalid parameter.</returns>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>Gets the name of the parameter that causes this exception.</summary>
      <returns>The parameter name.</returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>The exception that is thrown when a null reference (<see langword="Nothing" /> in Visual Basic) is passed to a method that does not accept it as a valid argument.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that causes this exception.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the parameter name, the value of the argument, and a specified error message.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="actualValue">The value of the argument that causes this exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception and a specified error message.</summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>Gets the argument value that causes this exception.</summary>
      <returns>An <see langword="Object" /> that contains the value of the parameter that caused the current <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the invalid argument value and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">An object that describes the source or destination of the serialized data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</summary>
      <returns>The text message for this exception. The value of this property takes one of two forms, as follows.  
  Condition  

  Value  

  The <paramref name="actualValue" /> is <see langword="null" />.  

  The <paramref name="message" /> string passed to the constructor.  

  The <paramref name="actualValue" /> is not <see langword="null" />.  

  The <paramref name="message" /> string appended with the string representation of the invalid argument value.</returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>The exception that is thrown for errors in an arithmetic, casting, or conversion operation.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Array">
      <summary>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>Returns a read-only wrapper for the specified array.</summary>
      <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified value.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
<paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the array and by the specified object.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found; otherwise, a negative number. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than all elements in <paramref name="array" />, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array" />, the return value can be incorrect and a negative number could be returned, even if <paramref name="value" /> is present in <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
<paramref name="comparer" /> is <see langword="null" />, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and <paramref name="T" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>Sets a range of elements in an array to the default value of each element type.</summary>
      <param name="array">The array whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.  
-or-  
The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Array" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
-or-  
<paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.  
-or-  
<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
-or-  
<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
      <summary>Converts an array of one type to an array of another type.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
      <param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param>
      <typeparam name="TInput">The type of the elements of the source array.</typeparam>
      <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
      <returns>An array of the target type containing the converted elements from the source array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="converter" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
-or-  
<paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.  
-or-  
<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 64-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
-or-  
<paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.  
-or-  
<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
-or-  
<paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.  
-or-  
<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
-or-  
<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is <see langword="null" />.  
-or-  
<paramref name="destinationArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is outside the range of valid indexes for the <paramref name="sourceArray" />.  
-or-  
<paramref name="destinationIndex" /> is outside the range of valid indexes for the <paramref name="destinationArray" />.  
-or-  
<paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.  
-or-  
<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
      <param name="index">A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
-or-  
The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source array is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int64)">
      <summary>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
      <param name="index">A 64-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
-or-  
The number of elements in the source array is greater than the available number of elements from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source <see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <returns>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> is less than zero.  
-or-  
<paramref name="length2" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length3">The size of the third dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> is less than zero.  
-or-  
<paramref name="length2" /> is less than zero.  
-or-  
<paramref name="length3" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
-or-  
<paramref name="lengths" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
-or-  
The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length and lower bound for each dimension.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
-or-  
<paramref name="lengths" /> is <see langword="null" />.  
-or-  
<paramref name="lowerBounds" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
-or-  
The <paramref name="lengths" /> array contains less than one element.  
-or-  
The <paramref name="lengths" /> and <paramref name="lowerBounds" /> arrays do not contain the same number of elements.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.  
 -or-  
 Any value in <paramref name="lowerBounds" /> is very large, such that the sum of a dimension's lower bound and length is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int64[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.</summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create. Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is <see langword="null" />.  
-or-  
<paramref name="lengths" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.  
-or-  
The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.  
-or-  
<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>Returns an empty array.</summary>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>An empty array.</returns>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0)">
      <param name="array" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)">
      <param name="array" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="match">The predicate that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>Performs the specified action on each element of the specified array.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
      <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
-or-  
<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetLongLength(System.Int32)">
      <summary>Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <returns>A 64-bit integer that represents the number of elements in the specified dimension.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
-or-  
<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>Gets the index of the first element of the specified dimension in the array.</summary>
      <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
      <returns>The index of the first element of the specified dimension in the array.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
-or-  
<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>Gets the index of the last element of the specified dimension in the array.</summary>
      <param name="dimension">A zero-based dimension of the array whose upper bound needs to be determined.</param>
      <returns>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.  
-or-  
<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 64-bit integer.</summary>
      <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64)">
      <summary>Gets the value at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)">
      <summary>Gets the value at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 64-bit integers.</summary>
      <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>The index of the first occurrence of <paramref name="value" /> in <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
      <returns>The index of the first occurrence of <paramref name="value" />, if it's found, within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</summary>
      <param name="array">The one-dimensional array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
      <param name="count">The number of elements to search.</param>
      <returns>The index of the first occurrence of <paramref name="value" />, if it's found in the <paramref name="array" /> from index <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> in the entire <paramref name="array" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</summary>
      <param name="array">The one-dimensional, zero-based array to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the parameterless constructor of the value type.</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</summary>
      <returns>This property is always <see langword="true" /> for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</summary>
      <returns>This property is always <see langword="false" /> for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</summary>
      <returns>This property is always <see langword="false" /> for all arrays.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</summary>
      <returns>The total number of elements in all the dimensions of the <see cref="T:System.Array" />; zero if there are no elements in the array.</returns>
      <exception cref="T:System.OverflowException">The array is multidimensional and contains more than <see cref="F:System.Int32.MaxValue" /> elements.</exception>
    </member>
    <member name="P:System.Array.LongLength">
      <summary>Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</summary>
      <returns>A 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>Gets the rank (number of dimensions) of the <see cref="T:System.Array" />. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</summary>
      <returns>The rank (number of dimensions) of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>Changes the number of elements of a one-dimensional array to the specified new size.</summary>
      <param name="array">The one-dimensional, zero-based array to resize, or <see langword="null" /> to create a new array with the specified size.</param>
      <param name="newSize">The size of the new array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Reverse``1(``0[])">
      <param name="array" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)">
      <param name="array" />
      <param name="index" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 64-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)">
      <summary>Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly two dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="index1" /> or <paramref name="index2" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
      <summary>Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array" />. The indexes are specified as 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly three dimensions.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> or <paramref name="index2" /> or <paramref name="index3" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 64-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
 -or-  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
 -or-  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
 -or-  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
 -or-  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each key.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
 -or-  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
 -or-  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.  
 -or-  
 <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.  
 -or-  
 The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional array to sort.</param>
      <param name="comparer">The implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.  
 -or-  
 <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="comparison" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or <see langword="null" /> to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or <see langword="null" /> to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.  
-or-  
<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not <see langword="null" />, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and the length of <paramref name="keys" /> is greater than the length of <paramref name="items" />.  
-or-  
<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.  
-or-  
<paramref name="items" /> is not <see langword="null" />, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.  
-or-  
The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is <see langword="null" />, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Array" />.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>Calling this method always throws a <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="value">The object to be added to the <see cref="T:System.Collections.IList" />.</param>
      <returns>Adding a value to an array is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the current list. The element to locate can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the current list.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares the current object and <paramref name="other" />.</param>
      <returns>An integer that indicates the relationship of the current collection object to other, as shown in the following table.  
  Return value  

  Description  

  -1  

  The current instance precedes <paramref name="other" />.  

  0  

  The current instance and <paramref name="other" /> are equal.  

  1  

  The current instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <param name="comparer">An object that computes the hash code of the current object.</param>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>Determines whether every element in the array matches the conditions defined by the specified predicate.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions.</param>
      <param name="match">The predicate that defines the conditions to check against the elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <returns>
        <see langword="true" /> if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />. If there are no elements in the array, the return value is <see langword="true" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.  
-or-  
<paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>Delimits a section of a one-dimensional array.</summary>
      <typeparam name="T">The type of the elements in the array segment.</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits all the elements in the specified array.</summary>
      <param name="array">The array to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits the specified range of the elements in the specified array.</summary>
      <param name="array">The array containing the range of elements to delimit.</param>
      <param name="offset">The zero-based index of the first element in the range.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>Gets the original array containing the range of elements that the array segment delimits.</summary>
      <returns>The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[])">
      <param name="destination" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[],System.Int32)">
      <param name="destination" />
      <param name="destinationIndex" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(System.ArraySegment{`0})">
      <param name="destination" />
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>Gets the number of elements in the range delimited by the array segment.</summary>
      <returns>The number of elements in the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Empty" />
    <member name="T:System.ArraySegment`1.Enumerator">
      <typeparam name="T" />
    </member>
    <member name="P:System.ArraySegment`1.Enumerator.Current" />
    <member name="M:System.ArraySegment`1.Enumerator.Dispose" />
    <member name="M:System.ArraySegment`1.Enumerator.MoveNext" />
    <member name="P:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Current" />
    <member name="M:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Reset" />
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>Determines whether the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance.</summary>
      <param name="obj">The structure to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <param name="obj">The object to be compared with the current instance.</param>
      <returns>
        <see langword="true" /> if the specified object is a <see cref="T:System.ArraySegment`1" /> structure and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.GetEnumerator" />
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</summary>
      <returns>The position of the first element in the range delimited by the <see cref="T:System.ArraySegment`1" />, relative to the start of the original array.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are equal.</summary>
      <param name="a">The  structure on the left side of the equality operator.</param>
      <param name="b">The structure on the right side of the equality operator.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Implicit(T[])~System.ArraySegment{`0}">
      <param name="array" />
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are unequal.</summary>
      <param name="a">The structure on the left side of the inequality operator.</param>
      <param name="b">The structure on the right side of the inequality operator.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32,System.Int32)">
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the array segment.</summary>
      <param name="item">The object to add to the array segment.</param>
      <exception cref="T:System.NotSupportedException">The array segment is read-only.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the array segment.</summary>
      <exception cref="T:System.NotSupportedException">The array segment is read-only.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determines whether the array segment contains a specific value.</summary>
      <param name="item">The object to locate in the array segment.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the array segment; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the array segment  is read-only.</summary>
      <returns>
        <see langword="true" /> if the array segment is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the array segment.</summary>
      <param name="item">The object to remove from the array segment.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the array segment; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the array segment.</returns>
      <exception cref="T:System.NotSupportedException">The array segment is read-only.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the array segment.</summary>
      <returns>An enumerator that can be used to iterate through the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>Determines the index of a specific item in the array segment.</summary>
      <param name="item">The object to locate in the array segment.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserts an item into the array segment at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the array segment.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the array segment.</exception>
      <exception cref="T:System.NotSupportedException">The array segment is read-only.</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the array segment is read-only.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the array segment item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the array segment.</exception>
      <exception cref="T:System.NotSupportedException">The array segment is read-only.</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index of the array segment.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through an array segment.</summary>
      <returns>An enumerator that can be used to iterate through the array segment.</returns>
    </member>
    <member name="M:System.ArraySegment`1.ToArray" />
    <member name="T:System.ArrayTypeMismatchException">
      <summary>The exception that is thrown when an attempt is made to store an element of the wrong type within an array.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>References a method to be called when a corresponding asynchronous operation completes.</summary>
      <param name="ar">The result of the asynchronous operation.</param>
    </member>
    <member name="T:System.Attribute">
      <summary>Represents the base class for custom attributes.</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Attribute" /> class.</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are of the same type and have identical field values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Reflection.ParameterInfo.Member" /> property of <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</summary>
      <returns>
        <see langword="true" /> if this instance is the default attribute for the class; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> is not a method, constructor, or type.</exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />.</param>
      <returns>
        <see langword="true" /> if this instance equals <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is a unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>Specifies the application elements on which it is valid to apply an attribute.</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>Attribute can be applied to any application element.</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>Attribute can be applied to an assembly.</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>Attribute can be applied to a class.</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>Attribute can be applied to a constructor.</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>Attribute can be applied to a delegate.</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>Attribute can be applied to an enumeration.</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>Attribute can be applied to an event.</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>Attribute can be applied to a field.</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>Attribute can be applied to a generic parameter. Currently, this attribute can be applied only in C#, Microsoft intermediate language (MSIL), and emitted code.</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>Attribute can be applied to an interface.</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>Attribute can be applied to a method.</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>Attribute can be applied to a module. <see langword="Module" /> refers to a portable executable file (.dll or.exe) and not a Visual Basic standard module.</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>Attribute can be applied to a parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>Attribute can be applied to a property.</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>Attribute can be applied to a return value.</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>Attribute can be applied to a structure; that is, a value type.</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>Specifies the usage of another attribute class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.</summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
      <returns>
        <see langword="true" /> if more than one instance is allowed to be specified; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that determines whether the indicated attribute is inherited by derived classes and overriding members.</summary>
      <returns>
        <see langword="true" /> if the attribute can be inherited by derived classes and overriding members; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
      <returns>One or several <see cref="T:System.AttributeTargets" /> values. The default is <see langword="All" />.</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>The exception that is thrown when the file image of a dynamic link library (DLL) or an executable program is invalid.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and file name.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>Gets the name of the file that causes this exception.</summary>
      <returns>The name of the file with the invalid image, or a null reference if no file name was passed to the constructor for the current instance.</returns>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>Gets the log file that describes why an assembly load failed.</summary>
      <returns>A <see langword="String" /> containing errors reported by the assembly cache.</returns>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name, assembly cache log, and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</returns>
    </member>
    <member name="T:System.Boolean">
      <summary>Represents a Boolean (<see langword="true" /> or <see langword="false" />) value.</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>Compares this instance to a specified <see cref="T:System.Boolean" /> object and returns an integer that indicates their relationship to one another.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> object to compare to this instance.</param>
      <returns>A signed integer that indicates the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Condition  

  Less than zero  

  This instance is <see langword="false" /> and <paramref name="value" /> is <see langword="true" />.  

  Zero  

  This instance and <paramref name="value" /> are equal (either both are <see langword="true" /> or both are <see langword="false" />).  

  Greater than zero  

  This instance is <see langword="true" /> and <paramref name="value" /> is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</summary>
      <param name="obj">An object to compare to this instance, or <see langword="null" />.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="obj" />.  
  Return Value  

  Condition  

  Less than zero  

  This instance is <see langword="false" /> and <paramref name="obj" /> is <see langword="true" />.  

  Zero  

  This instance and <paramref name="obj" /> are equal (either both are <see langword="true" /> or both are <see langword="false" />).  

  Greater than zero  

  This instance is <see langword="true" /> and <paramref name="obj" /> is <see langword="false" />.  

 -or-  

 <paramref name="obj" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Boolean" /> object.</summary>
      <param name="obj">A <see cref="T:System.Boolean" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>Represents the Boolean value <see langword="false" /> as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>Returns the type code for the <see cref="T:System.Boolean" /> value type.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <param name="value">A string containing the value to convert.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equivalent to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> or <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if the value of this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Char" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.DateTime" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The desired type.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>An object of the specified type, with a value that is equivalent to the value of this <see langword="Boolean" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>1 if this instance is <see langword="true" />; otherwise, 0.</returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>"True" (the value of the <see cref="F:System.Boolean.TrueString" /> property) if the value of this instance is <see langword="true" />, or "False" (the value of the <see cref="F:System.Boolean.FalseString" /> property) if the value of this instance is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object.</param>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is <see langword="true" />, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is <see langword="false" />.</returns>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>Represents the Boolean value <see langword="true" /> as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Boolean.TryParse(System.ReadOnlySpan{System.Char},System.Boolean@)">
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>Tries to convert the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="value">A string containing the value to convert.</param>
      <param name="result">When this method returns, if the conversion succeeded, contains <see langword="true" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.TrueString" /> or <see langword="false" /> if <paramref name="value" /> is equal to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains <see langword="false" />. The conversion fails if <paramref name="value" /> is <see langword="null" /> or is not equal to the value of either the <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" /> field.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Buffer">
      <summary>Manipulates arrays of primitive types.</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The zero-based byte offset into <paramref name="src" />.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The zero-based byte offset into <paramref name="dst" />.</param>
      <param name="count">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> or <paramref name="dst" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.  
-or-  
The number of bytes in <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.  
-or-  
The number of bytes in <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>Returns the number of bytes in the specified array.</summary>
      <param name="array">An array.</param>
      <returns>The number of bytes in the array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>Retrieves the byte at the specified location in the specified array.</summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <returns>The byte at the specified location in the array.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>Copies a number of bytes specified as a long integer value from one address in memory to another.  
 This API is not CLS-compliant.</summary>
      <param name="source">The address of the bytes to copy.</param>
      <param name="destination">The target address.</param>
      <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
      <param name="sourceBytesToCopy">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  
 This API is not CLS-compliant.</summary>
      <param name="source">The address of the bytes to copy.</param>
      <param name="destination">The target address.</param>
      <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
      <param name="sourceBytesToCopy">The number of bytes to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>Assigns a specified value to a byte at a particular location in a specified array.</summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <param name="value">A value to assign.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="T:System.Buffers.IMemoryOwner`1">
      <summary>Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</summary>
      <typeparam name="T">The type of elements to store in memory.</typeparam>
    </member>
    <member name="P:System.Buffers.IMemoryOwner`1.Memory">
      <summary>Gets the memory belonging to this owner.</summary>
      <returns>The memory belonging to this owner.</returns>
    </member>
    <member name="T:System.Buffers.IPinnable">
      <summary>Provides a mechanism for pinning and unpinning objects to prevent the garbage collector from moving them.</summary>
    </member>
    <member name="M:System.Buffers.IPinnable.Pin(System.Int32)">
      <summary>Pins a block of memory.</summary>
      <param name="elementIndex">The offset to the element within the memory buffer to which the returned <see cref="T:System.Buffers.MemoryHandle" /> points.</param>
      <returns>A handle to the block of memory.</returns>
    </member>
    <member name="M:System.Buffers.IPinnable.Unpin">
      <summary>Frees a block of pinned memory.</summary>
    </member>
    <member name="T:System.Buffers.MemoryHandle">
      <summary>Provides a memory handle for a block of memory.</summary>
    </member>
    <member name="M:System.Buffers.MemoryHandle.#ctor(System.Void*,System.Runtime.InteropServices.GCHandle,System.Buffers.IPinnable)">
      <summary>Creates a new memory handle for the block of memory.</summary>
      <param name="pointer">A pointer to memory.</param>
      <param name="handle">A handle used to pin array buffers.</param>
      <param name="pinnable">A reference to a manually managed object, or <see langword="default" /> if there is no memory manager.</param>
    </member>
    <member name="M:System.Buffers.MemoryHandle.Dispose">
      <summary>Frees the pinned handle and releases the <see cref="T:System.Buffers.IPinnable" /> instance.</summary>
    </member>
    <member name="P:System.Buffers.MemoryHandle.Pointer">
      <summary>Returns a pointer to the memory block.</summary>
      <returns>A pointer to the memory block.</returns>
    </member>
    <member name="T:System.Buffers.MemoryManager`1">
      <summary>An abstract base class that is used to replace the implementation of <see cref="T:System.Memory`1" />.</summary>
      <typeparam name="T">The type of items in the memory buffer managed by this memory manager.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Buffers.MemoryManager`1" /> class.</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32)">
      <summary>Returns a memory buffer consisting of a specified number of elements from the memory managed by the current memory manager.</summary>
      <param name="length">The number of elements in the memory buffer, starting at offset 0.</param>
      <returns>A memory buffer.</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32,System.Int32)">
      <summary>Returns a memory buffer consisting of a specified number of elements starting at a specified offset from the memory managed by the current memory manager.</summary>
      <param name="start">The offset to the element at which the returned memory buffer starts.</param>
      <param name="length">The number of elements to include in the returned memory buffer.</param>
      <returns>A memory buffer that consists of <paramref name="length" /> elements starting at offset <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Dispose(System.Boolean)">
      <summary>Releases all resources used by the current memory manager.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.GetSpan">
      <summary>Returns a memory span that wraps the underlying memory buffer.</summary>
      <returns>A memory span that wraps the underlying memory buffer.</returns>
    </member>
    <member name="P:System.Buffers.MemoryManager`1.Memory">
      <summary>Gets the memory block handled by this <see cref="T:System.Buffers.MemoryManager`1" />.</summary>
      <returns>The memory block handled by this <see cref="T:System.Buffers.MemoryManager`1" />.</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Pin(System.Int32)">
      <summary>Returns a handle to the memory that has been pinned and whose address can be taken.</summary>
      <param name="elementIndex">The offset to the element in the memory buffer at which the returned <see cref="T:System.Buffers.MemoryHandle" /> points.</param>
      <returns>A handle to the memory that has been pinned.</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.System#IDisposable#Dispose">
      <summary>Releases all resources used by the memory manager.</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.TryGetArray(System.ArraySegment{`0}@)">
      <summary>Returns an array segment.</summary>
      <param name="segment">The array segment to write to.</param>
      <returns>
        <see langword="true" /> if the method succeeded in retrieving the array segment; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Unpin">
      <summary>Unpins pinned memory so that the garbage collector is free to move it.</summary>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>Defines the values that can be returned from span-based operations that support processing of input contained in multiple discontiguous buffers.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>The input is partially processed, up to what could fit into the destination buffer. The caller can enlarge the destination buffer, slice the buffers appropriately, and retry.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>The entire input buffer has been processed and the operation is complete.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>The input contained invalid bytes which could not be processed. If the input is partially processed, the destination contains the partial result. This guarantees that no additional data appended to the input will make the invalid sequence valid.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>The input is partially processed, up to the last valid chunk of the input that could be consumed. The caller can stitch the remaining unprocessed input with more data, slice the buffers appropriately, and retry.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Buffers.SpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Byte">
      <summary>Represents an 8-bit unsigned integer.</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An 8-bit unsigned integer to compare.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Byte" /> object represent the same value.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte" />.</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="M:System.Byte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>A byte value that is equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Byte" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this object in the format specified by the <paramref name="provider" /> parameter.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> parameter.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <param name="result">When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="T:System.Char">
      <summary>Represents a character as a UTF-16 code unit.</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</summary>
      <param name="value">A <see cref="T:System.Char" /> object to compare.</param>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.  
  Return Value  

  Description  

  Less than zero  

  This instance precedes <paramref name="value" />.  

  Zero  

  This instance has the same position in the sort order as <paramref name="value" />.  

  Greater than zero  

  This instance follows <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <param name="value">An object to compare this instance to, or <see langword="null" />.</param>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.  
  Return Value  

  Description  

  Less than zero  

  This instance precedes <paramref name="value" />.  

  Zero  

  This instance has the same position in the sort order as <paramref name="value" />.  

  Greater than zero  

  This instance follows <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Char" /> object.</exception>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>Converts the specified Unicode code point into a UTF-16 encoded string.</summary>
      <param name="utf32">A 21-bit Unicode code point.</param>
      <returns>A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</summary>
      <param name="highSurrogate">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</param>
      <param name="lowSurrogate">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</param>
      <returns>The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</summary>
      <param name="s">A string that contains a character or surrogate pair.</param>
      <param name="index">The index position of the character or surrogate pair in <paramref name="s" />.</param>
      <returns>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
      <exception cref="T:System.ArgumentException">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <returns>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Char" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <param name="c">The Unicode character to categorize.</param>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a control character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a Unicode letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</summary>
      <param name="c">The character to evaluate.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a number.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>Indicates whether the specified character has a surrogate code unit.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</summary>
      <param name="highSurrogate">The character to evaluate as the high surrogate of a surrogate pair.</param>
      <param name="lowSurrogate">The character to evaluate as the low surrogate of a surrogate pair.</param>
      <returns>
        <see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</summary>
      <param name="s">A string.</param>
      <param name="index">The starting position of the pair of characters to evaluate within <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a symbol character.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
      <param name="c">The Unicode character to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as white space.</summary>
      <param name="s">A string.</param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />.</param>
      <returns>
        <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>Converts the value of the specified string to its equivalent Unicode character.</summary>
      <param name="s">A string that contains a single character, or <see langword="null" />.</param>
      <returns>A Unicode character equivalent to the sole character in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The length of <paramref name="s" /> is not 1.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current <see cref="T:System.Char" /> object unchanged.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Note This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">A <see cref="T:System.Type" /> object.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object.</param>
      <returns>An object of the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</param>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
      <param name="c">The Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>Converts the specified Unicode character to its equivalent string representation.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The string representation of the value of <paramref name="c" />.</returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
      <param name="c">The Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
      <param name="c">The Unicode character to convert.</param>
      <returns>The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that contains a single character, or <see langword="null" />.</param>
      <param name="result">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CharEnumerator">
      <summary>Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <summary>Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</returns>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <summary>Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</summary>
      <returns>The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</exception>
    </member>
    <member name="M:System.CharEnumerator.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</summary>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <summary>Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</summary>
      <returns>
        <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <summary>Initializes the index to a position logically before the first character of the enumerated string.</summary>
    </member>
    <member name="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object. For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">Enumeration has not started.  
 -or-  
 Enumeration has ended.</exception>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <param name="isCompliant">
        <see langword="true" /> if CLS-compliant; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <returns>
        <see langword="true" /> if the program element is CLS-compliant; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Defines a dictionary key/value pair that can be set or retrieved.</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" /> and the .NET Framework version is 1.0 or 1.1.</exception>
    </member>
    <member name="M:System.Collections.DictionaryEntry.Deconstruct(System.Object@,System.Object@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
      <returns>The key in the key/value pair.</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
      <returns>The value in the key/value pair.</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
      <summary>Exposes an enumerator that provides asynchronous iteration over values of a specified type.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
      <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
      <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
      <summary>Supports a simple asynchronous iteration over a generic collection.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
      <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that will complete with a result of <see langword="true" /> if the enumerator was successfully advanced to the next element, or <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>Defines methods to manipulate generic collections.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>Defines a method that a type implements to compare two objects.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="x" /> is less than <paramref name="y" />.  

  Zero  

 <paramref name="x" /> equals <paramref name="y" />.  

  Greater than zero  

 <paramref name="x" /> is greater than <paramref name="y" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>Represents a generic collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>Supports a simple iteration over a generic collection.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>Represents a collection of objects that can be individually accessed by index.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>Represents a strongly-typed, read-only collection of elements.</summary>
      <typeparam name="T">The type of the elements.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>Represents a generic read-only collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
      <param name="key">The key to locate.</param>
      <returns>
        <see langword="true" /> if the read-only dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
      <param name="key">The key to locate.</param>
      <returns>The element that has the specified key in the read-only dictionary.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <param name="key">The key to locate.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
      <typeparam name="T">The type of elements in the read-only list.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>Gets the element at the specified index in the read-only list.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index in the read-only list.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Provides the base interface for the abstraction of sets.</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>
        <see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current set.</summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class using default property values.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair" />
    <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
      <param name="key" />
      <param name="value" />
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>Defines a key/value pair that can be set or retrieved.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>Gets the key in the key/value pair.</summary>
      <returns>A <typeparamref name="TKey" /> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.</summary>
      <returns>A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>Gets the value in the key/value pair.</summary>
      <returns>A <typeparamref name="TValue" /> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Defines size, enumerators, and synchronization methods for all nongeneric collections.</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
-or-  
The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
-or-  
The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Exposes a method that compares two objects.</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />:   - If less than 0, <paramref name="x" /> is less than <paramref name="y" />.   - If 0, <paramref name="x" /> equals <paramref name="y" />.   - If greater than 0, <paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.  
 -or-  
 <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Represents a nongeneric collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key, or <see langword="null" /> if the key does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.  
 -or-  
 The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.  
 -or-  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumerates the elements of a nongeneric dictionary.</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Gets both the key and the value of the current dictionary entry.</summary>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Gets the key of the current dictionary entry.</summary>
      <returns>The key of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Gets the value of the current dictionary entry.</summary>
      <returns>The value of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Represents a non-generic collection of objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
 -or-  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>Supports the structural comparison of collection objects.</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other" />.</param>
      <returns>A signed integer that indicates the relationship of the current collection object to <paramref name="other" /> in the sort order: - If less than 0, the current instance precedes <paramref name="other" />. - If 0, the current instance and <paramref name="other" /> are equal. - If greater than 0, the current instance follows <paramref name="other" />.  
  Return value  

  Description  

  -1  

  The current instance precedes <paramref name="other" />.  

  0  

  The current instance and <paramref name="other" /> are equal.  

  1  

  The current instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">This instance and <paramref name="other" /> are not the same type.</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>Defines methods to support the comparison of objects for structural equality.</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is structurally equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <param name="comparer">An object that computes the hash code of the current object.</param>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>Provides the base class for a generic collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be <see langword="null" /> for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
-or-  
<paramref name="array" /> does not have zero-based indexing.  
-or-  
The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
-or-  
The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>The position into which the new element was inserted.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>Provides the base class for a generic read-only collection.</summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> class that is a read-only wrapper around the specified list.</summary>
      <param name="list">The list to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is found in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be <see langword="null" /> for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, if found; otherwise, -1.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>Returns the <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> that the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wraps.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index. An <see cref="T:System.NotSupportedException" /> occurs if you try to set the item at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
-or-  
<paramref name="array" /> does not have zero-based indexing.  
-or-  
The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
-or-  
The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns the current instance.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>The position into which the new element was inserted.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, this property always returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index. A <see cref="T:System.NotSupportedException" /> occurs if you try to set the item at the specified index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="T:System.Comparison`1">
      <summary>Represents the method that compares two objects of the same type.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <typeparam name="T">The type of the objects to compare.</typeparam>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  Value  

  Meaning  

  Less than 0  

 <paramref name="x" /> is less than <paramref name="y" />.  

  0  

 <paramref name="x" /> equals <paramref name="y" />.  

  Greater than 0  

 <paramref name="x" /> is greater than <paramref name="y" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Specifies the default value for a property.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.Boolean" /> value.</summary>
      <param name="value">A <see cref="T:System.Boolean" /> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using an 8-bit unsigned integer.</summary>
      <param name="value">An 8-bit unsigned integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a Unicode character.</summary>
      <param name="value">A Unicode character that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a double-precision floating point number.</summary>
      <param name="value">A double-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 16-bit signed integer.</summary>
      <param name="value">A 16-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 32-bit signed integer.</summary>
      <param name="value">A 32-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a 64-bit signed integer.</summary>
      <param name="value">A 64-bit signed integer that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class.</summary>
      <param name="value">An <see cref="T:System.Object" /> that represents the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.SByte)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.SByte" /> value.</summary>
      <param name="value">The default signed byte value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a single-precision floating point number.</summary>
      <param name="value">A single-precision floating point number that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.String" />.</summary>
      <param name="value">A <see cref="T:System.String" /> that is the default value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class, converting the specified value to the specified type, and using an invariant culture as the translation context.</summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the type to convert the value to.</param>
      <param name="value">A <see cref="T:System.String" /> that can be converted to the type using the <see cref="T:System.ComponentModel.TypeConverter" /> for the type and the U.S. English culture.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt16)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.UInt16" /> value.</summary>
      <param name="value">The default unsigned 16-bit integer value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.UInt32" /> value.</summary>
      <param name="value">The default unsigned integer value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> class using a <see cref="T:System.UInt64" /> value.</summary>
      <param name="value">The default unsigned long integer value.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>
        <see langword="true" /> if the value of the given object is equal to that of the current; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>Sets the default value for the property to which this attribute is bound.</summary>
      <param name="value">The default value.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Gets the default value of the property this attribute is bound to.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the default value of the property this attribute is bound to.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Specifies that a property or method is viewable in an editor. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> set to the default state.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> class with an <see cref="T:System.ComponentModel.EditorBrowsableState" />.</summary>
      <param name="state">The <see cref="T:System.ComponentModel.EditorBrowsableState" /> to set <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />.</summary>
      <param name="obj">The object to test the value equality of.</param>
      <returns>
        <see langword="true" /> if the value of the given object is equal to that of the current; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Gets the browsable state of the property or method.</summary>
      <returns>An <see cref="T:System.ComponentModel.EditorBrowsableState" /> that is the browsable state of the property or method.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Specifies the browsable state of a property or method from within an editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>The property or method is a feature that only advanced users should see. An editor can either show or hide such properties.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>The property or method is always browsable from within an editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>The property or method is never browsable from within an editor.</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>Specifies all the hash algorithms used for hashing files and for generating the strong name.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>Retrieves the MD5 message-digest algorithm. MD5 was developed by Rivest in 1991. It is basically MD4 with safety-belts and while it is slightly slower than MD4, it helps provide more security. The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4. Message-digest size, as well as padding requirements, remain the same.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>A mask indicating that there is no hash algorithm. If you specify <see langword="None" /> for a multi-module assembly, the common language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash. Due to collision problems with SHA1, Microsoft recommends SHA256.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256">
      <summary>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 256 bits.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA384">
      <summary>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 384 bits.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA512">
      <summary>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 512 bits.</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>Defines the different types of assembly version compatibility. This feature is not available in version 1.0 of the .NET Framework.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>The assembly cannot execute with other versions if they are executing in the same application domain.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>The assembly cannot execute with other versions if they are executing on the same machine.</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>The assembly cannot execute with other versions if they are executing in the same process.</summary>
    </member>
    <member name="T:System.Converter`2">
      <summary>Represents a method that converts an object from one type to another type.</summary>
      <param name="input">The object to convert.</param>
      <typeparam name="TInput">The type of object that is to be converted.</typeparam>
      <typeparam name="TOutput">The type the input object is to be converted to.</typeparam>
      <returns>The <typeparamref name="TOutput" /> that represents the converted <typeparamref name="TInput" />.</returns>
    </member>
    <member name="T:System.DateTime">
      <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
-or-  
<paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
-or-  
<paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
-or-  
<paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
-or-  
<paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
-or-  
<paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
-or-  
<paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.  
-or-  
<paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
-or-  
<paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
-or-  
<paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
-or-  
<paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
      <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
      <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
      <param name="value">A positive or negative time interval.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
      <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
      <param name="value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
      <param name="value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
      <param name="value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
      <param name="months">A number of months. The <paramref name="months" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  
 -or-  
 <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
      <param name="value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
      <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
      <param name="value">A number of years. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  Value Type  

  Condition  

  Less than zero  

 <paramref name="t1" /> is earlier than <paramref name="t2" />.  

  Zero  

 <paramref name="t1" /> is the same as <paramref name="t2" />.  

  Greater than zero  

 <paramref name="t1" /> is later than <paramref name="t2" />.</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The object to compare to the current instance.</param>
      <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  Value  

  Description  

  Less than zero  

  This instance is earlier than <paramref name="value" />.  

  Zero  

  This instance is the same as <paramref name="value" />.  

  Greater than zero  

  This instance is later than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">A boxed object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Value  

  Description  

  Less than zero  

  This instance is earlier than <paramref name="value" />.  

  Zero  

  This instance is the same as <paramref name="value" />.  

  Greater than zero  

  This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>Gets the date component of this instance.</summary>
      <returns>A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>Gets the day of the month represented by this instance.</summary>
      <returns>The day component, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>Gets the day of the year represented by this instance.</summary>
      <returns>The day of the year, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  
 For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
      <param name="value">The object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="value">The object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
      <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
      <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <param name="fileTime">A Windows file time expressed in ticks.</param>
      <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
      <param name="fileTime">A Windows file time expressed in ticks.</param>
      <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
      <param name="d">An OLE Automation Date value.</param>
      <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
      <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
      <param name="format">A standard date and time format string.</param>
      <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
      <param name="format">A date and time format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>Gets the hour component of the date represented by this instance.</summary>
      <returns>The hour component, expressed as a value between 0 and 23.</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>Returns an indication whether the specified year is a leap year.</summary>
      <param name="year">A 4-digit year.</param>
      <returns>
        <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
      <returns>One of the enumeration values that indicates what the current time represents. The default is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>Gets the milliseconds component of the date represented by this instance.</summary>
      <returns>The milliseconds component, expressed as a value between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>Gets the minute component of the date represented by this instance.</summary>
      <returns>The minute component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>Gets the month component of the date represented by this instance.</summary>
      <returns>The month component, expressed as a value between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
      <returns>An object whose value is the current local date and time.</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
      <param name="d">The date and time value to add.</param>
      <param name="t">The time interval to add.</param>
      <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <param name="d1">The first object to compare.</param>
      <param name="d2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
      <param name="d1">The first object to compare.</param>
      <param name="d2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
      <param name="d1">The date and time value to subtract from (the minuend).</param>
      <param name="d2">The date and time value to subtract (the subtrahend).</param>
      <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
      <param name="d">The date and time value to subtract from.</param>
      <param name="t">The time interval to subtract.</param>
      <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a memory span that contains string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
      <param name="s">The memory span that contains the string to parse. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
      <param name="s">A string that contains a date and time to convert. See The string to parse for more information.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.  See Parsing and cultural conventions</param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string.  
-or-  
<paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
-or-  
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string.  
-or-  
<paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
-or-  
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />. For more information, see the Remarks section.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string.  
-or-  
an element of <paramref name="formats" /> is an empty string.  
-or-  
<paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  
-or-  
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>Gets the seconds component of the date represented by this instance.</summary>
      <returns>The seconds component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
      <param name="value">A date and time.</param>
      <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
      <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified date and time from the value of this instance.</summary>
      <param name="value">The date and time value to subtract.</param>
      <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified duration from the value of this instance.</summary>
      <param name="value">The time interval to subtract.</param>
      <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The current object.</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
      <param name="type">The desired type.</param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
      <returns>The number of ticks that represent the date and time of this instance. The value is between <see langword="DateTime.MinValue.Ticks" /> and <see langword="DateTime.MaxValue.Ticks" />.</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>Gets the time of day for this instance.</summary>
      <returns>A time interval that represents the fraction of the day that has elapsed since midnight.</returns>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
      <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>Gets the current date.</summary>
      <returns>An object that is set to today's date, with the time component set to 00:00:00.</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
      <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
      <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
      <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
      <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
      <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
      <param name="format">A standard or custom date and time format string.</param>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
 -or-  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom date and time format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
 -or-  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="provider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a date and time to convert.</param>
      <param name="format">The required format of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a date and time to convert.</param>
      <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="F:System.DateTime.UnixEpoch" />
    <member name="P:System.DateTime.UtcNow">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
      <returns>An object whose value is the current UTC date and time.</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>Gets the year component of the date represented by this instance.</summary>
      <returns>The year, between 1 and 9999.</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>Specifies whether a <see cref="T:System.DateTime" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>The time represented is local time.</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>The time represented is not specified as either local time or Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>The time represented is UTC.</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="dateTime">A date and time.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
      <param name="dateTime">A date and time.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.  
-or-  
<paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.  
-or-  
<paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
-or-  
<see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> cannot be <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's <see langword="MinSupportedDateTime.Year" /> or greater than <see langword="MaxSupportedDateTime.Year" />.  
-or-  
<paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />.  
-or-  
<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.  
-or-  
<paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
-or-  
The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.  
-or-  
The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.  
-or-  
<paramref name="month" /> is less than one or greater than 12.  
-or-  
<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.  
-or-  
<paramref name="offset" /> is less than -14 or greater than 14.  
-or-  
The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.  
-or-  
<paramref name="month" /> is less than one or greater than 12.  
-or-  
<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
-or-  
The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
      <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.  
 -or-  
 <paramref name="ticks" /> is less than <see langword="DateTimeOffset.MinValue.Ticks" /> or greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.  
 -or-  
 <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified time interval to the value of this instance.</summary>
      <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>
      <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>
      <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of milliseconds to the value of this instance.</summary>
      <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>
      <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of months to the value of this instance.</summary>
      <param name="months">A number of whole months. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>
      <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of ticks to the value of this instance.</summary>
      <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of years to the value of this instance.</summary>
      <param name="years">A number of years. The number can be negative or positive.</param>
      <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.  
  Return value  

  Meaning  

  Less than zero  

 <paramref name="first" /> is earlier than <paramref name="second" />.  

  Zero  

 <paramref name="first" /> is equal to <paramref name="second" />.  

  Greater than zero  

 <paramref name="first" /> is later than <paramref name="second" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.  
  Return Value  

  Description  

  Less than zero  

  The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.  

  Zero  

  The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.  

  Greater than zero.  

  The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>One of the enumeration values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
      <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <param name="fileTime">A Windows file time, expressed in ticks.</param>
      <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> is less than zero.  
-or-  
<paramref name="filetime" /> is greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
      <param name="milliseconds">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
      <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> is less than  -62,135,596,800,000.  
-or-  
<paramref name="milliseconds" /> is greater than 253,402,300,799,999.</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
      <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
      <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> is less than  -62,135,596,800.  
-or-  
<paramref name="seconds" /> is greater than 253,402,300,799.</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current or specified culture's default calendar.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>Gets the time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>The difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
      <param name="dateTimeOffset">The object to add the time interval to.</param>
      <param name="timeSpan">The time interval to add.</param>
      <returns>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="dateTime">The object to convert.</param>
      <returns>The converted object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
      <param name="left">The minuend.</param>
      <param name="right">The subtrahend.</param>
      <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
      <param name="dateTimeOffset">The date and time object to subtract from.</param>
      <param name="timeSpan">The time interval to subtract.</param>
      <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific format information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
 -or-  
 <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
 -or-  
 <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.  
 -or-  
 <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a character span that represents a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the date and time representation must match the specified format exactly.</summary>
      <param name="input">A character span that represents a date and time.</param>
      <param name="format">A character span that contains a format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-The <paramref name="styles" /> parameter includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty character span.-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="format" /> is an empty character span.-or-The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts a character span that contains the string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the date and time representation must match one of the specified formats exactly.</summary>
      <param name="input">A character span that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-<paramref name="styles" /> includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty character span.-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-No element of <paramref name="formats" /> contains a valid format specifier.-or-The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.  
-or-  
<paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
-or-  
<paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
<paramref name="format" /> is an empty string.  
-or-  
The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
 -or-  
 The <paramref name="styles" /> parameter includes an unsupported value.  
 -or-  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.  
-or-  
<paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
-or-  
<paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
<paramref name="format" /> is an empty string.  
-or-  
The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
 -or-  
 <paramref name="styles" /> includes an unsupported value.  
 -or-  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").  
-or-  
<paramref name="input" /> does not contain a valid string representation of a date and time.  
-or-  
No element of <paramref name="formats" /> contains a valid format specifier.  
-or-  
The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="value">An object that represents the value to subtract.</param>
      <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="value">The time interval to subtract.</param>
      <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
      <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
      <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:  
  Return Value  

  Description  

  Less than zero  

  The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.  

  Zero  

  The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.  

  Greater than zero  

  The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The time interval of the current date that has elapsed since midnight.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
      <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.</param>
      <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
 -or-  
 The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours.  
-or-  
<paramref name="offset" /> is greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
      <param name="format">A format string.</param>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
 -or-  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
 -or-  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
      <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</summary>
      <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.</summary>
      <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
-or-  
<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the representation of a date and time in a character span to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the date and time representation must match the specified format exactly.</summary>
      <param name="input">A character span that contains the representation of a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" /> if the conversion failed. The conversion fails if the</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is <see langword="null" />, or does not contain a valid string representation of a date and time in the expected format defined by <paramref name="format" /> and <c>provider</c>. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
-or-  
<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array that defines the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <paramref name="format" />, or if <paramref name="formats" /> is <see langword="null" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
-or-  
<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  
-or-  
<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="F:System.DateTimeOffset.UnixEpoch" />
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
      <returns>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
      <returns>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>Specifies the day of the week.</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>Indicates Friday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>Indicates Monday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>Indicates Saturday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>Indicates Sunday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>Indicates Thursday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>Indicates Tuesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>Indicates Wednesday.</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>Represents a nonexistent value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.DBNull" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing information required to serialize the <see cref="T:System.DBNull" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.DBNull" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.</summary>
      <returns>The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" />.</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DBNull" /> object to the specified type.</summary>
      <param name="type">The type to convert the current <see cref="T:System.DBNull" /> object to.</param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface and is used to augment the conversion. If <see langword="null" /> is specified, format information is obtained from the current culture.</param>
      <returns>The boxed equivalent of the current <see cref="T:System.DBNull" /> object, if that conversion is supported; otherwise, an exception is thrown and no value is returned.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
      <returns>None. The return value for this member is not used.</returns>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>Returns an empty string (<see cref="F:System.String.Empty" />).</summary>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>Returns an empty string using the specified <see cref="T:System.IFormatProvider" />.</summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to be used to format the return value.  
 -or-  
 <see langword="null" /> to obtain the format information from the current locale setting of the operating system.</param>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>Represents the sole instance of the <see cref="T:System.DBNull" /> class.</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>Represents a decimal floating-point number.</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.</summary>
      <param name="lo">The low 32 bits of a 96-bit integer.</param>
      <param name="mid">The middle 32 bits of a 96-bit integer.</param>
      <param name="hi">The high 32 bits of a 96-bit integer.</param>
      <param name="isNegative">
        <see langword="true" /> to indicate a negative number; <see langword="false" /> to indicate a positive number.</param>
      <param name="scale">A power of 10 ranging from 0 to 28.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.</summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.  
 -or-  
 The representation of the decimal value in <paramref name="bits" /> is not valid.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to add.</param>
      <param name="d2">The second value to add.</param>
      <returns>The sum of <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>Returns the smallest integral value that is greater than or equal to the specified decimal number.</summary>
      <param name="d">A decimal number.</param>
      <returns>The smallest integral value that is greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>Compares two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>A signed number indicating the relative values of <paramref name="d1" /> and <paramref name="d2" />.  
  Return value  

  Meaning  

  Less than zero  

 <paramref name="d1" /> is less than <paramref name="d2" />.  

  Zero  

 <paramref name="d1" /> and <paramref name="d2" /> are equal.  

  Greater than zero  

 <paramref name="d1" /> is greater than <paramref name="d2" />.</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns a comparison of their relative values.</summary>
      <param name="value">The object to compare with this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return value  

  Meaning  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns a comparison of their relative values.</summary>
      <param name="value">The object to compare with this instance, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return value  

  Meaning  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <returns>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.</summary>
      <param name="value">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</summary>
      <param name="d">The value to round.</param>
      <returns>If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.  
 -or-  
 If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged. Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal" /> value.</summary>
      <param name="cy">An OLE Automation Currency value.</param>
      <returns>A <see cref="T:System.Decimal" /> that contains the equivalent of <paramref name="cy" />.</returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <param name="d">The value to convert.</param>
      <returns>A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Decimal" />.</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>Represents the number negative one (-1).</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The multiplicand.</param>
      <param name="d2">The multiplier.</param>
      <returns>The result of multiplying <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.</summary>
      <param name="d">The value to negate.</param>
      <returns>A decimal number with the value of <paramref name="d" />, but the opposite sign.  
 -or-  
 Zero, if <paramref name="d" /> is zero.</returns>
    </member>
    <member name="F:System.Decimal.One">
      <summary>Represents the number one (1).</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to add.</param>
      <param name="d2">The second value to add.</param>
      <returns>The result of adding <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>Decrements the <see cref="T:System.Decimal" /> operand by one.</summary>
      <param name="d">The value to decrement.</param>
      <returns>The value of <paramref name="d" /> decremented by 1.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <returns>The result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Decimal" /> values are equal.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>An 8-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a Unicode character.</summary>
      <param name="value">The value to convert.</param>
      <returns>A Unicode character that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</summary>
      <param name="value">The value to convert.</param>
      <returns>A double-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 16-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 32-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 64-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to an 8-bit signed integer.  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <returns>An 8-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</summary>
      <param name="value">The value to convert.</param>
      <returns>A single-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 16-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 32-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.  
 This API is not CLS-compliant.</summary>
      <param name="value">The value to convert.</param>
      <returns>A 64-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>Defines an explicit conversion of a double-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The double-precision floating-point number to convert.</param>
      <returns>The converted double-precision floating point number.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>Defines an explicit conversion of a single-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The single-precision floating-point number to convert.</param>
      <returns>The converted single-precision floating point number.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>Defines an implicit conversion of an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 8-bit unsigned integer to convert.</param>
      <returns>The converted 8-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Defines an implicit conversion of a Unicode character to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The Unicode character to convert.</param>
      <returns>The converted Unicode character.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>Defines an implicit conversion of a 16-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 16-bit signed integer to convert.</param>
      <returns>The converted 16-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>Defines an implicit conversion of a 32-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>The converted 32-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>Defines an implicit conversion of a 64-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The 64-bit signed integer to convert.</param>
      <returns>The converted 64-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Decimal" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">The 8-bit signed integer to convert.</param>
      <returns>The converted 8-bit signed integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">The 16-bit unsigned integer to convert.</param>
      <returns>The converted 16-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">The 32-bit unsigned integer to convert.</param>
      <returns>The converted 32-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">The 64-bit unsigned integer to convert.</param>
      <returns>The converted 64-bit unsigned integer.</returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>Increments the <see cref="T:System.Decimal" /> operand by 1.</summary>
      <param name="d">The value to increment.</param>
      <returns>The value of <paramref name="d" /> incremented by 1.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Decimal" /> objects have different values.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <param name="d1">The first value to compare.</param>
      <param name="d2">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <returns>The remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is <see langword="zero" />.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The first value to multiply.</param>
      <param name="d2">The second value to multiply.</param>
      <returns>The result of multiplying <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>Subtracts two specified <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The minuend.</param>
      <param name="d2">The subtrahend.</param>
      <returns>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</summary>
      <param name="d">The value to negate.</param>
      <returns>The result of <paramref name="d" /> multiplied by negative one (-1).</returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).</summary>
      <param name="d">The operand to return.</param>
      <returns>The value of the operand, <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <returns>The equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />.</param>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</summary>
      <param name="d1">The dividend.</param>
      <param name="d2">The divisor.</param>
      <returns>The remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero.</exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal)">
      <summary>Rounds a decimal value to the nearest integer.</summary>
      <param name="d">A decimal number to round.</param>
      <returns>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</returns>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to.</param>
      <returns>The decimal number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is not a value from 0 to 28.</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="decimals">The number of significant decimal places (precision) in the return value.</param>
      <param name="mode">A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      <returns>The number that is nearest to the <paramref name="d" /> parameter with a precision equal to the <paramref name="decimals" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned. If the precision of <paramref name="d" /> is less than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is less than 0 or greater than 28.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> is not a <see cref="T:System.MidpointRounding" /> value.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> object.</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)">
      <summary>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
      <param name="d">A decimal number to round.</param>
      <param name="mode">A value that specifies how to round <paramref name="d" /> if it is midway between two other numbers.</param>
      <returns>The integer that is nearest to the <paramref name="d" /> parameter. If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, the <paramref name="mode" /> parameter determines which of the two numbers is returned.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> is not a <see cref="T:System.MidpointRounding" /> value.</exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" /> object.</exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>Subtracts one specified <see cref="T:System.Decimal" /> value from another.</summary>
      <param name="d1">The minuend.</param>
      <param name="d2">The subtrahend.</param>
      <returns>The result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>None. This conversion is not supported.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>None. This conversion is not supported.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">The parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert the value of this <see cref="T:System.Decimal" /> instance.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to a <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Decimal" /> object contains invalid or corrupted data.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>An 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A double-precision floating-point number equivalent to <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A 16-bit signed integer equivalent to <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A 64-bit signed integer that contains the OLE Automation equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>An 8-bit signed integer equivalent to <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A single-precision floating-point number equivalent to the value of <paramref name="d" />.</returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>A string that represents the value of this instance.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.</summary>
      <param name="value">The decimal number to convert.</param>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.</summary>
      <param name="d">The decimal number to convert.</param>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</summary>
      <param name="d">The decimal number to truncate.</param>
      <returns>The result of <paramref name="d" /> rounded toward zero, to the nearest whole number.</returns>
    </member>
    <member name="M:System.Decimal.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Decimal@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uininitialized; any value originally supplied in <paramref name="result" /> is overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>Represents the number zero (0).</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>Initializes a delegate that invokes the specified instance method on the specified class instance.</summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />.</param>
      <param name="method">The name of the instance method that the delegate represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">There was an error binding to the target method.</exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>Initializes a delegate that invokes the specified static method from the specified class.</summary>
      <param name="target">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate represents.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="target" /> represents an open generic type.</exception>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>Creates a shallow copy of the delegate.</summary>
      <returns>A shallow copy of the delegate.</returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>Concatenates the invocation lists of two delegates.</summary>
      <param name="a">The delegate whose invocation list comes first.</param>
      <param name="b">The delegate whose invocation list comes last.</param>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order. Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</returns>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>Concatenates the invocation lists of an array of delegates.</summary>
      <param name="delegates">The array of delegates to combine.</param>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array. Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</summary>
      <param name="d">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</param>
      <returns>A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</returns>
      <exception cref="T:System.MulticastNotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="firstArgument">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <returns>A delegate of the specified type that represents the specified static or instance method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> cannot be bound.  
-or-  
<paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</summary>
      <param name="type">A <see cref="T:System.Type" /> representing the type of delegate to create.</param>
      <param name="firstArgument">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <returns>A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.  
-or-  
<paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> is not an instance method.  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> is not an instance method.  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> is not an instance method.  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type to represent the specified static method.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.</param>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.  
-or-  
<paramref name="method" /> cannot be bound.  
-or-  
<paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.  
-or-  
<paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="target" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
-or-  
<paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="target" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
-or-  
<paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <param name="throwOnBindFailure">
        <see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</param>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.  
-or-  
<paramref name="target" /> is <see langword="null" />.  
-or-  
<paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.  
-or-  
<paramref name="type" /> is not a <see langword="RuntimeType" />. See Runtime Types in Reflection.  
-or-  
<paramref name="target" /> is not a <see langword="RuntimeType" />.  
-or-  
<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.  
-or-  
<paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).  
-or-  
<paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMethodException">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have the permissions necessary to access <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.  
 -or-  
 <see langword="null" />, if the method represented by the current delegate does not require arguments.</param>
      <returns>The object returned by the method represented by the delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).  
 -or-  
 The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is <see langword="null" />.  
 -or-  
 One of the encapsulated methods throws an exception.</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.  
 -or-  
 <see langword="null" />, if the method represented by the current delegate does not require arguments.</param>
      <returns>The object returned by the method represented by the delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).  
 -or-  
 The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is <see langword="null" />.  
 -or-  
 One of the encapsulated methods throws an exception.</exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</summary>
      <param name="obj">The object to compare with the current delegate.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>Returns a hash code for the delegate.</summary>
      <returns>A hash code for the delegate.</returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>Returns the invocation list of the delegate.</summary>
      <returns>An array of delegates representing the invocation list of the current delegate.</returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>Gets the static method represented by the current delegate.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Not supported.</summary>
      <param name="info">Not supported.</param>
      <param name="context">Not supported.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>Gets the method represented by the delegate.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are equal.</summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are not equal.</summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>Removes the invocation list of a delegate from the invocation list of another delegate.</summary>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</param>
      <returns>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list. Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list. Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>Gets the class instance on which the current delegate invokes the instance method.</summary>
      <returns>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
      <summary>Specifies that <see langword="null" /> is allowed as an input even if the corresponding type disallows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
      <summary>Specifies that <see langword="null" /> is disallowed as an input even if the corresponding type allows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
      <summary>Specifies that a method that will never return under any circumstance.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
      <summary>Specifies that the method will not return if the associated <see cref="T:System.Boolean" /> parameter is passed the specified value.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class with the specified parameter value.</summary>
      <param name="parameterValue">The condition parameter value. Code after the method is considered unreachable by diagnostics if the argument to the associated parameter matches this value.</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
      <summary>Gets the condition parameter value.</summary>
      <returns>The condition parameter value. Code after the method is considered unreachable by diagnostics if the argument to the associated parameter matches this value.</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
      <summary>Specifies that an output may be <see langword="null" /> even if the corresponding type disallows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
      <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be <see langword="null" /> even if the corresponding type disallows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
      <summary>Initializes the attribute with the specified return value condition.</summary>
      <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be <see langword="null" />.</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
      <summary>Gets the return value condition.</summary>
      <returns>The return value condition. If the method returns this value, the associated parameter may be <see langword="null" />.</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
      <summary>Specifies that an output is not <see langword="null" /> even if the corresponding type allows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute" /> class.</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
      <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
      <summary>Initializes the attribute with the associated parameter name.</summary>
      <param name="parameterName">The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
      <summary>Gets the associated parameter name.</summary>
      <returns>The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
      <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be <see langword="null" /> even if the corresponding type allows it.</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
      <summary>Initializes the attribute with the specified return value condition.</summary>
      <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be <see langword="null" />.</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
      <summary>Gets the return value condition.</summary>
      <returns>The return value condition. If the method returns this value, the associated parameter will not be <see langword="null" />.</returns>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.</summary>
      <param name="conditionString">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</summary>
      <returns>A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified tracking and optimization options for the just-in-time (JIT) compiler.</summary>
      <param name="isJITTrackingEnabled">
        <see langword="true" /> to enable debugging; otherwise, <see langword="false" />.</param>
      <param name="isJITOptimizerDisabled">
        <see langword="true" /> to disable the optimizer for execution; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggableAttribute" /> class, using the specified debugging modes for the just-in-time (JIT) compiler.</summary>
      <param name="modes">A bitwise combination of the <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> values specifying the debugging mode for the JIT compiler.</param>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.DebuggingFlags">
      <summary>Gets the debugging modes for the attribute.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> values describing the debugging mode for the just-in-time (JIT) compiler. The default is <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />.</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>Specifies the debugging mode for the just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>Instructs the just-in-time (JIT) compiler to use its default behavior, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate language (MSIL) offset to the native-code offset within a method, is always generated.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />, except that it sets the <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> property to <see langword="false" />. However, because JIT tracking is always enabled, the property value is ignored in version 2.0 or later.  
 Note that, unlike the <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" /> flag, the <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" /> flag cannot be used to disable JIT optimizations.</summary>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
      <summary>Gets a value that indicates whether the runtime optimizer is disabled.</summary>
      <returns>
        <see langword="true" /> if the runtime optimizer is disabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
      <summary>Gets a value that indicates whether the runtime will track information during code generation for the debugger.</summary>
      <returns>
        <see langword="true" /> if the runtime will track information during code generation for the debugger; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>The exception that is thrown when there is an attempt to divide an integral or <see cref="T:System.Decimal" /> value by zero.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Double">
      <summary>Represents a double-precision floating-point number.</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</summary>
      <param name="value">A double-precision floating-point number to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

 -or-  

 This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.  

  Zero  

  This instance is equal to <paramref name="value" />.  

 -or-  

 Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Value  

  Description  

  A negative integer  

  This instance is less than <paramref name="value" />.  

 -or-  

 This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.  

  Zero  

  This instance is equal to <paramref name="value" />.  

 -or-  

 This instance and <paramref name="value" /> are both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /> A positive integer  

  This instance is greater than <paramref name="value" />.  

 -or-  

 This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />.</exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</summary>
      <param name="obj">A <see cref="T:System.Double" /> object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="M:System.Double.IsFinite(System.Double)">
      <summary>Determines whether the specified value is finite (zero, subnormal, or normal).</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is finite (zero, subnormal or normal); <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Double.NaN" />).</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNegative(System.Double)">
      <summary>Determines whether the specified value is negative.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is negative; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsNormal(System.Double)">
      <summary>Determines whether the specified value is normal.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is normal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.IsSubnormal(System.Double)">
      <summary>Determines whether the specified value is subnormal.</summary>
      <param name="d">A double-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the value is subnormal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>Represents a value that is not a number (<see langword="NaN" />). This field is constant.</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than or equal to another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than or equal to another specified <see cref="T:System.Double" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Double" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the double-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="T:System.DuplicateWaitObjectException">
      <summary>The exception that is thrown when an object appears more than once in an array of synchronization objects.</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class.</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Enum">
      <summary>Provides the base class for enumerations.</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Enum" /> class.</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="target">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number that indicates the relative values of this instance and <paramref name="target" />.  
  Value  

  Meaning  

  Less than zero  

  The value of this instance is less than the value of <paramref name="target" />.  

  Zero  

  The value of this instance is equal to the value of <paramref name="target" />.  

  Greater than zero  

  The value of this instance is greater than the value of <paramref name="target" />.  

 -or-  

 <paramref name="target" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type.</exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.NullReferenceException">This instance is null.</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</summary>
      <param name="enumType">The enumeration type of the value to convert.</param>
      <param name="value">The value to convert.</param>
      <param name="format">The output format to use.</param>
      <returns>A string representation of <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.  
 -or-  
 The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.  
 -or-  
 The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter contains an invalid value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>Returns the hash code for the value of this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>Retrieves the name of the constant in the specified enumeration that has the specified value.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
      <returns>A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
-or-  
<paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>Retrieves an array of the names of the constants in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <returns>A string array of the names of the constants in <paramref name="enumType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>Returns the type code of the underlying type of this enumeration member.</summary>
      <returns>The type code of the underlying type of this instance.</returns>
      <exception cref="T:System.InvalidOperationException">The enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type of the specified enumeration.</summary>
      <param name="enumType">The enumeration whose underlying type will be retrieved.</param>
      <returns>The underlying type of <paramref name="enumType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>Retrieves an array of the values of the constants in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <returns>An array that contains the values of the constants in <paramref name="enumType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context,  
 -or-  
 <paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>Determines whether one or more bit fields are set in the current instance.</summary>
      <param name="flag">An enumeration value.</param>
      <returns>
        <see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value or name of a constant in <paramref name="enumType" />.</param>
      <returns>
        <see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see langword="Enum" />.  
-or-  
The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.  
-or-  
The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">A string containing the name or value to convert.</param>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
-or-  
<paramref name="value" /> is either an empty string or only contains white space.  
-or-  
<paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</summary>
      <param name="enumType">An enumeration type.</param>
      <param name="value">A string containing the name or value to convert.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; <see langword="false" /> to regard case.</param>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
-or-  
<paramref name="value" /> is either an empty string ("") or only contains white space.  
-or-  
<paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.Parse``1(System.String)">
      <param name="value" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.Parse``1(System.String,System.Boolean)">
      <param name="value" />
      <param name="ignoreCase" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the current value to a Boolean value based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the current value to a Unicode character based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the current value to a double-precision floating point number based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit signed integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the current value to a single-precision floating-point number based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>This member always throws an exception.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current value to a specified type based on the underlying type.</summary>
      <param name="type">The type to convert to.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit unsigned integer based on the underlying type.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>Converts the specified 8-bit unsigned integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>Converts the specified 16-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>Converts the specified 32-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>Converts the specified 64-bit signed integer to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>Converts the specified object with an integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value convert to an enumeration member.</param>
      <returns>An enumeration object whose value is <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.  
-or-  
<paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>Converts the specified 8-bit signed integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>Converts the specified 16-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>Converts the specified 32-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>Converts the specified 64-bit unsigned integer value to an enumeration member.</summary>
      <param name="enumType">The enumeration type to return.</param>
      <param name="value">The value to convert to an enumeration member.</param>
      <returns>An instance of the enumeration set to <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</summary>
      <param name="provider">(obsolete)</param>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</summary>
      <param name="format">A format specification.</param>
      <param name="provider">(Obsolete.)</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="ignoreCase" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</summary>
      <param name="value">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
      <param name="result">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds. If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>. Note that this value need not be a member of the <c>TEnum</c> enumeration. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</summary>
      <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; <see langword="false" /> to consider case.</param>
      <param name="result">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds. If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>. Note that this value need not be a member of the <c>TEnum</c> enumeration. This parameter is passed uninitialized.</param>
      <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.</summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EventArgs" /> class.</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>Provides a value to use with events that do not have event data.</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>Represents the method that will handle an event that has no event data.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An object that contains no event data.</param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>Represents the method that will handle an event when the event provides data.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An object that contains the event data.</param>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>Represents errors that occur during application execution.</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</summary>
      <returns>The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>Gets the runtime type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>Gets or sets a link to the help file associated with this exception.</summary>
      <returns>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</summary>
      <returns>The HRESULT value.</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</summary>
      <returns>An object that describes the error that caused the current exception. The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor. This property is read-only.</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception, or an empty string ("").</returns>
    </member>
    <member name="E:System.Exception.SerializeObjectState">
      <summary>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</summary>
    </member>
    <member name="P:System.Exception.Source">
      <summary>Gets or sets the name of the application or the object that causes the error.</summary>
      <returns>The name of the application or the object that causes the error.</returns>
      <exception cref="T:System.ArgumentException">The object must be a runtime <see cref="N:System.Reflection" /> object.</exception>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>Gets a string representation of the immediate frames on the call stack.</summary>
      <returns>A string that describes the immediate frames of the call stack.</returns>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>Gets the method that throws the current exception.</summary>
      <returns>The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>The exception that is thrown when there is an internal error in the execution engine of the common language runtime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ExecutionEngineException" /> class.</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ExecutionEngineException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ExecutionEngineException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected field inside a class.</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class.</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>A customizable parser based on the File scheme.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the File scheme.</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>Represents a composite format string, along with the arguments to be formatted.</summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.FormattableString" /> class.</summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>Gets the number of arguments to be formatted.</summary>
      <returns>The number of arguments to be formatted.</returns>
    </member>
    <member name="M:System.FormattableString.CurrentCulture(System.FormattableString)">
      <summary>Returns a result string in which arguments are formatted by using the conventions of the current culture.</summary>
      <param name="formattable">The string to be formatted.</param>
      <returns>The string that results from formatting the current instance by using the conventions of the current culture.</returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>Returns the composite format string.</summary>
      <returns>The composite format string.</returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>Returns the argument at the specified index position.</summary>
      <param name="index">The index of the argument. Its value can range from zero to one less than the value of <see cref="P:System.FormattableString.ArgumentCount" />.</param>
      <returns>The argument.</returns>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>Returns an object array that contains one or more objects to format.</summary>
      <returns>An object array that contains one or more objects to format.</returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>Returns a result string in which arguments are formatted by using the conventions of the invariant culture.</summary>
      <param name="formattable">The object to convert to a result string.</param>
      <returns>The string that results from formatting the current instance by using the conventions of the invariant culture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formattable" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string that results from formatting the format string along with its arguments by using the formatting conventions of a specified culture.</summary>
      <param name="ignored">A string. This argument is ignored.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <returns>A string formatted using the conventions of the <paramref name="formatProvider" /> parameter.</returns>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of the current culture.</summary>
      <returns>A result string formatted by using the conventions of the current culture.</returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of a specified culture.</summary>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <returns>A result string formatted by using the conventions of <paramref name="formatProvider" />.</returns>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>A customizable parser based on the File Transfer Protocol (FTP) scheme.</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the File Transfer Protocol (FTP) scheme.</summary>
    </member>
    <member name="T:System.Func`1">
      <summary>Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`10">
      <summary>Encapsulates a method that has nine parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`11">
      <summary>Encapsulates a method that has 10 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`12">
      <summary>Encapsulates a method that has 11 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`13">
      <summary>Encapsulates a method that has 12 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`14">
      <summary>Encapsulates a method that has 13 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`15">
      <summary>Encapsulates a method that has 14 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`16">
      <summary>Encapsulates a method that has 15 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`17">
      <summary>Encapsulates a method that has 16 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`2">
      <summary>Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`3">
      <summary>Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`4">
      <summary>Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`5">
      <summary>Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`6">
      <summary>Encapsulates a method that has five parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`7">
      <summary>Encapsulates a method that has six parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`8">
      <summary>Encapsulates a method that has seven parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`9">
      <summary>Encapsulates a method that has eight parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.GC">
      <summary>Controls the system garbage collector, a service that automatically reclaims unused memory.</summary>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</summary>
      <param name="bytesAllocated">The incremental amount of unmanaged memory that has been allocated.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> is less than or equal to 0.  
-or-  
On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.GC.CancelFullGCNotification">
      <summary>Cancels the registration of a garbage collection notification.</summary>
      <exception cref="T:System.InvalidOperationException">This member is not available when concurrent garbage collection is enabled. See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</exception>
    </member>
    <member name="M:System.GC.Collect">
      <summary>Forces an immediate garbage collection of all generations.</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>Forces an immediate garbage collection from generation 0 through a specified generation.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.  
-or-  
<paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <param name="blocking">
        <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is not valid.  
-or-  
<paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
      <summary>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</summary>
      <param name="generation">The number of the oldest generation to be garbage collected.</param>
      <param name="mode">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</param>
      <param name="blocking">
        <see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</param>
      <param name="compacting">
        <see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</param>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>Returns the number of times garbage collection has occurred for the specified generation of objects.</summary>
      <param name="generation">The generation of objects for which the garbage collection count is to be determined.</param>
      <returns>The number of times garbage collection has occurred for the specified generation since the process was started.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> is less than 0.</exception>
    </member>
    <member name="M:System.GC.EndNoGCRegion">
      <summary>Ends the no GC region latency mode.</summary>
      <exception cref="T:System.InvalidOperationException">The garbage collector is not in no GC region latency mode.  
 -or-  
 The no GC region latency mode was ended previously because a garbage collection was induced.  
 -or-  
 A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</exception>
    </member>
    <member name="M:System.GC.GetAllocatedBytesForCurrentThread">
      <summary>Gets the total number of bytes allocated to the current thread since the beginning of its lifetime.</summary>
      <returns>The total number of bytes allocated to the current thread since the beginning of its lifetime.</returns>
    </member>
    <member name="M:System.GC.GetGCMemoryInfo">
      <summary>Gets garbage collection memory information.</summary>
      <returns>An object that contains information about the garbage collector's memory usage.</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>Returns the current generation number of the specified object.</summary>
      <param name="obj">The object that generation information is retrieved for.</param>
      <returns>The current generation number of <paramref name="obj" />.</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>Returns the current generation number of the target of a specified weak reference.</summary>
      <param name="wo">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</param>
      <returns>The current generation number of the target of <paramref name="wo" />.</returns>
      <exception cref="T:System.ArgumentException">Garbage collection has already been performed on <paramref name="wo" />.</exception>
    </member>
    <member name="M:System.GC.GetTotalAllocatedBytes(System.Boolean)">
      <summary>Gets a count of the bytes allocated over the lifetime of the process.</summary>
      <param name="precise">If <see langword="true" />, gather a precise number; otherwise, gather an approximate count. Gathering a precise value entails a significant performance penalty.</param>
      <returns>The total number of bytes allocated over the lifetime of the process.</returns>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</summary>
      <param name="forceFullCollection">
        <see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</param>
      <returns>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</returns>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</summary>
      <param name="obj">The object to reference.</param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>Gets the maximum number of generations that the system currently supports.</summary>
      <returns>A value that ranges from zero to the maximum number of supported generations.</returns>
    </member>
    <member name="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)">
      <summary>Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</summary>
      <param name="maxGenerationThreshold">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</param>
      <param name="largeObjectHeapThreshold">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</exception>
      <exception cref="T:System.InvalidOperationException">This member is not available when concurrent garbage collection is enabled. See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</exception>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</summary>
      <param name="bytesAllocated">The amount of unmanaged memory that has been released.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> is less than or equal to 0.  
-or-  
On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</summary>
      <param name="obj">The object that a finalizer must be called for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>Requests that the common language runtime not call the finalizer for the specified object.</summary>
      <param name="obj">The object whose finalizer must not be executed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. It must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <paramref name="totalSize" /> bytes; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. <paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="lohSize">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</param>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
      <summary>Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</summary>
      <param name="totalSize">The amount of memory in bytes to allocate without triggering a garbage collection. <paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment. For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the Fundamentals of Garbage Collection article.</param>
      <param name="lohSize">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</exception>
      <exception cref="T:System.InvalidOperationException">The process is already in no GC region latency mode.</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach">
      <summary>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</summary>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach(System.Int32)">
      <summary>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</summary>
      <param name="millisecondsTimeout">The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</param>
      <returns>The status of the registered garbage collection notification.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete">
      <summary>Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</summary>
      <returns>The status of the registered garbage collection notification.</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete(System.Int32)">
      <summary>Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</summary>
      <param name="millisecondsTimeout">The length of time to wait before a notification status can be obtained. Specify -1 to wait indefinitely.</param>
      <returns>The status of the registered garbage collection notification.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</summary>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>Specifies the behavior for a forced garbage collection.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>The default setting for this enumeration, which is currently <see cref="F:System.GCCollectionMode.Forced" />.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>Forces the garbage collection to occur immediately.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>Allows the garbage collector to determine whether the current time is optimal to reclaim objects.</summary>
    </member>
    <member name="T:System.GCMemoryInfo">
      <summary>Provides a set of APIs that can be used to retrieve garbage collection information.</summary>
    </member>
    <member name="P:System.GCMemoryInfo.FragmentedBytes">
      <summary>Gets the total fragmentation when the last garbage collection occurred.</summary>
      <returns>An integer representing the total fragmentation when the last garbage collection occurred.</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HeapSizeBytes">
      <summary>Gets the total heap size when the last garbage collection occurred.</summary>
      <returns>The total heap size, in bytes, when the last garbage collection occurred.</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HighMemoryLoadThresholdBytes">
      <summary>Gets the high memory load threshold when the last garbage collection occured.</summary>
      <returns>The high memory load threshold, in bytes, when the last garbage collection occured.</returns>
    </member>
    <member name="P:System.GCMemoryInfo.MemoryLoadBytes">
      <summary>Gets the memory load when the last garbage collection occurred.</summary>
      <returns>The memory load when the last garbage collection occurred.</returns>
    </member>
    <member name="P:System.GCMemoryInfo.TotalAvailableMemoryBytes">
      <summary>Gets the total available memory for the garbage collector to use when the last garbage collection occurred.</summary>
      <returns>The total available memory, in bytes, for the garbage collector to use when the last garbage collection occurred.</returns>
    </member>
    <member name="T:System.GCNotificationStatus">
      <summary>Provides information about the current registration for notification of the next full garbage collection.</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Canceled">
      <summary>The current registration was canceled by the user.</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Failed">
      <summary>The notification failed for any reason.</summary>
    </member>
    <member name="F:System.GCNotificationStatus.NotApplicable">
      <summary>This result can be caused by the following: there is no current registration for a garbage collection notification, concurrent garbage collection is enabled, or the time specified for the <paramref name="millisecondsTimeout" /> parameter has expired and no garbage collection notification was obtained. (See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.)</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Succeeded">
      <summary>The notification was successful and the registration was not canceled.</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Timeout">
      <summary>The time specified by the <paramref name="millisecondsTimeout" /> parameter for either <see cref="M:System.GC.WaitForFullGCApproach(System.Int32)" /> or <see cref="M:System.GC.WaitForFullGCComplete(System.Int32)" /> has elapsed.</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>A customizable parser for a hierarchical URI.</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>Create a customizable parser for a hierarchical URI.</summary>
      <param name="options">Specify the options for this <see cref="T:System.GenericUriParser" />.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>Specifies options for a <see cref="T:System.UriParser" />.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>The parser allows a URI with no authority.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>The parser: requires an authority; converts backslashes into forward slashes; unescapes path dots, forward slashes, and back slashes; and removes trailing dots, empty segments, and dots-only segments.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>The parser does not canonicalize the URI.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>The parser does not convert back slashes into forward slashes.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>The parser does not unescape path dots, forward slashes, or back slashes.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>The parser allows a registry-based authority.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>The parser supports Internationalized Domain Name (IDN) parsing (IDN) of host names. Whether IDN is used is dictated by configuration values.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>The parser supports the parsing rules specified in RFC 3987 for International Resource Identifiers (IRI). Whether IRI is used is dictated by configuration values.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>The scheme does not define a fragment part.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>The scheme does not define a port.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>The scheme does not define a query part.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>The scheme does not define a user information part.</summary>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>Represents time in divisions, such as weeks, months, and years.</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.Calendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of days away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add days.</param>
      <param name="days">The number of days to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of days to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of hours away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add hours.</param>
      <param name="hours">The number of hours to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of hours to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of milliseconds away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to add milliseconds to.</param>
      <param name="milliseconds">The number of milliseconds to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of milliseconds to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of minutes away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add minutes.</param>
      <param name="minutes">The number of minutes to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of minutes to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of seconds away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add seconds.</param>
      <param name="seconds">The number of seconds to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of seconds to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of weeks away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add weeks.</param>
      <param name="weeks">The number of weeks to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range of this calendar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is outside the supported range of the <see cref="T:System.DateTime" /> return value.</exception>
    </member>
    <member name="P:System.Globalization.Calendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>One of the <see cref="T:System.Globalization.CalendarAlgorithmType" /> values.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <returns>A new instance of <see cref="T:System.Object" /> that is the memberwise clone of the current <see cref="T:System.Globalization.Calendar" /> object.</returns>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>Represents the current era of the current calendar. The value of this field is 0.</summary>
    </member>
    <member name="P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year that is specified by the <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>When overridden in a derived class, gets the list of eras in the current calendar.</summary>
      <returns>An array of integers that represents the eras in the current calendar.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A positive integer that represents the day of the month in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>When overridden in a derived class, returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A positive integer that represents the day of the year in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year of the current era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <returns>The number of days in the specified month in the specified year in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of days in the specified month, year, and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>Returns the number of days in the specified year of the current era.</summary>
      <param name="year">An integer that represents the year.</param>
      <returns>The number of days in the specified year in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of days in the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>When overridden in a derived class, returns the era of the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era of <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>Returns the hours value in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 0 to 23 that represents the hour in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32)">
      <summary>Calculates the leap month for a specified year.</summary>
      <param name="year">A year.</param>
      <returns>A positive integer that indicates the leap month in the specified year.  
 -or-  
 Zero if this calendar does not support a leap month or if the <paramref name="year" /> parameter does not represent a leap year.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <returns>A positive integer that indicates the leap month in the specified year and era.  
 -or-  
 Zero if this calendar does not support a leap month or if the <paramref name="year" /> and <paramref name="era" /> parameters do not specify a leap year.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>Returns the milliseconds value in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>Returns the minutes value in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 0 to 59 that represents the minutes in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>When overridden in a derived class, returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A positive integer that represents the month in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>Returns the number of months in the specified year in the current era.</summary>
      <param name="year">An integer that represents the year.</param>
      <returns>The number of months in the specified year in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>Returns the seconds value in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 0 to 59 that represents the seconds in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="time">A date and time value.</param>
      <param name="rule">An enumeration value that defines a calendar week.</param>
      <param name="firstDayOfWeek">An enumeration value that represents the first day of the week.</param>
      <returns>A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is earlier than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or later than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />.  
-or-  
<paramref name="firstDayOfWeek" /> is not a valid <see cref="T:System.DayOfWeek" /> value.  
-or-  
<paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>When overridden in a derived class, returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the current era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="day">A positive integer that represents the day.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="day">A positive integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the current era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <returns>
        <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>Determines whether the specified year in the current era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Globalization.Calendar" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if this <see cref="T:System.Globalization.Calendar" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <returns>The latest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MaxValue" />.</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <returns>The earliest date and time supported by this calendar. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)">
      <summary>Returns a read-only version of the specified <see cref="T:System.Globalization.Calendar" /> object.</summary>
      <param name="calendar">A <see cref="T:System.Globalization.Calendar" /> object.</param>
      <returns>The <see cref="T:System.Globalization.Calendar" /> object specified by the <paramref name="calendar" /> parameter, if <paramref name="calendar" /> is read-only.  
 -or-  
 A read-only memberwise clone of the <see cref="T:System.Globalization.Calendar" /> object specified by <paramref name="calendar" />, if <paramref name="calendar" /> is not read-only.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="day">A positive integer that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">A positive integer that represents the month.</param>
      <param name="day">A positive integer that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.Calendar" /> object is read-only.</exception>
    </member>
    <member name="T:System.Globalization.CalendarAlgorithmType">
      <summary>Specifies whether a calendar is solar-based, lunar-based, or lunisolar-based.</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunarCalendar">
      <summary>A lunar-based calendar.</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar">
      <summary>A lunisolar-based calendar.</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.SolarCalendar">
      <summary>A solar-based calendar.</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.Unknown">
      <summary>An unknown calendar basis.</summary>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>Defines different rules for determining the first week of the year.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>Indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week. The value is 0.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>Indicates that the first week of the year is the first week with four or more days before the designated first day of the week. The value is 2.</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>Indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year. The value is 1.</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)">
      <summary>Gets the decimal digit value of the specified numeric character.</summary>
      <param name="ch">The Unicode character for which to get the decimal digit value.</param>
      <returns>The decimal digit value of the specified numeric character.  
 -or-  
 -1, if the specified character is not a decimal digit.</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)">
      <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
      <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
      <returns>The decimal digit value of the numeric character at the specified index of the specified string.  
 -or-  
 -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)">
      <summary>Gets the digit value of the specified numeric character.</summary>
      <param name="ch">The Unicode character for which to get the digit value.</param>
      <returns>The digit value of the specified numeric character.  
 -or-  
 -1, if the specified character is not a digit.</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)">
      <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
      <param name="index">The index of the Unicode character for which to get the digit value.</param>
      <returns>The digit value of the numeric character at the specified index of the specified string.  
 -or-  
 -1, if the character at the specified index of the specified string is not a digit.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>Gets the numeric value associated with the specified character.</summary>
      <param name="ch">The Unicode character for which to get the numeric value.</param>
      <returns>The numeric value associated with the specified character.  
 -or-  
 -1, if the specified character is not a numeric character.</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
      <param name="index">The index of the Unicode character for which to get the numeric value.</param>
      <returns>The numeric value associated with the character at the specified index of the specified string.  
 -or-  
 -1, if the character at the specified index of the specified string is not a numeric character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>Gets the Unicode category of the specified character.</summary>
      <param name="ch">The Unicode character for which to get the Unicode category.</param>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)">
      <param name="codePoint" />
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
      <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
      <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
    </member>
    <member name="T:System.Globalization.ChineseLunisolarCalendar">
      <summary>Represents time in divisions, such as months, days, and years. Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.</summary>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> class.</summary>
    </member>
    <member name="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra">
      <summary>Specifies the era that corresponds to the current <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> object.</summary>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year that is specified by the <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.Eras">
      <summary>Gets the eras that correspond to the range of dates and times supported by the current <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> object.</summary>
      <returns>An array of 32-bit signed integers that specify the relevant eras. The return value for a <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> object is always an array containing one element equal to the <see cref="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra" /> value.</returns>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>Retrieves the era that corresponds to the specified <see cref="T:System.DateTime" /> type.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> type to read.</param>
      <returns>An integer that represents the era in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime">
      <summary>Gets the maximum date and time supported by the <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> class.</summary>
      <returns>A <see cref="T:System.DateTime" /> type that represents the last moment on January 28, 2101 in the Gregorian calendar, which is approximately equal to the constructor <c>DateTime(2101, 1, 28, 23, 59, 59, 999)</c>.</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime">
      <summary>Gets the minimum date and time supported by the <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> class.</summary>
      <returns>A <see cref="T:System.DateTime" /> type that represents February 19, 1901 in the Gregorian calendar, which is equivalent to the constructor, <c>DateTime(1901, 2, 19)</c>.</returns>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>Implements a set of methods for culture-sensitive string comparisons.</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares a section of one string with a section of another string.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

  The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.

  greater than zero

  The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.
 -or-
 <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
 -or-
 <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.
 -or-
 <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.
 -or-
 <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
      <param name="options">A value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

  The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.

  greater than zero

  The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.
 -or-
 <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
 -or-
 <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.
 -or-
 <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.
 -or-
 <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>Compares the end section of a string with the end section of another string.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

  The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.

  greater than zero

  The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.
 -or-
 <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
 -or-
 <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="options">A value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

  The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.

  greater than zero

  The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.
 -or-
 <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.
 -or-
 <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>Compares two strings.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="string2">The second string to compare.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

 <paramref name="string1" /> is less than <paramref name="string2" />.

  greater than zero

 <paramref name="string1" /> is greater than <paramref name="string2" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="string1">The first string to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="options">A value that defines how <paramref name="string1" /> and <paramref name="string2" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.
  Value

  Condition

  zero

  The two strings are equal.

  less than zero

 <paramref name="string1" /> is less than <paramref name="string2" />.

  greater than zero

 <paramref name="string1" /> is greater than <paramref name="string2" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified identifier.</summary>
      <param name="culture">An integer representing the culture identifier.</param>
      <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)">
      <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="culture">An integer representing the culture identifier.</param>
      <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
      <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is of an invalid type.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.</summary>
      <param name="name">A string representing the culture name.</param>
      <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an invalid culture name.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="name">A string representing the culture name.</param>
      <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
      <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
 -or-
 <paramref name="assembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an invalid culture name.
 -or-
 <paramref name="assembly" /> is of an invalid type.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)">
      <summary>Gets the hash code for a character span based on specified comparison options.</summary>
      <param name="source">The character span whose hash code is to be returned.</param>
      <param name="options">A value that determines how strings are compared.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)">
      <summary>Gets the hash code for a string based on specified comparison options.</summary>
      <param name="source">The string whose hash code is to be returned.</param>
      <param name="options">A value that determines how strings are compared.</param>
      <returns>A 32-bit signed integer hash code.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String)">
      <summary>Gets the sort key for the specified string.</summary>
      <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
      <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)">
      <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for the specified string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
      <param name="options">A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="options">A value that defines how the strings should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>Determines whether the specified source string starts with the specified prefix.</summary>
      <param name="source">The string to search in.</param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
      <returns>
        <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="prefix" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search in.</param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="prefix" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>
        <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="prefix" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.Char)">
      <summary>Indicates whether a specified Unicode character is sortable.</summary>
      <param name="ch">A Unicode character.</param>
      <returns>
        <see langword="true" /> if the <paramref name="ch" /> parameter is sortable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.String)">
      <summary>Indicates whether a specified Unicode string is sortable.</summary>
      <param name="text">A string of zero or more Unicode characters.</param>
      <returns>
        <see langword="true" /> if the <paramref name="str" /> parameter is not an empty string ("") and all the Unicode characters in <paramref name="str" /> are sortable; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>Determines whether the specified source string ends with the specified suffix.</summary>
      <param name="source">The string to search in.</param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
      <returns>
        <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="suffix" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search in.</param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="suffix" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>
        <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="suffix" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">A value that defines how <paramref name="source" /> and <paramref name="value" /> should be compared. <paramref name="options" /> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
      <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.
 -or-
 <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.
 -or-
 <paramref name="count" /> is less than zero.
 -or-
 <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.LCID">
      <summary>Gets the properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</summary>
      <returns>The properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      <returns>The name of a culture.</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback.</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      <returns>A string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Version">
      <summary>Gets information about the version of Unicode used for comparing and sorting strings.</summary>
      <returns>An object that contains information about the Unicode version used for comparing and sorting strings.</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>Defines the string comparison options to use with <see cref="T:System.Globalization.CompareInfo" />.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>Indicates that the string comparison must ignore case.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>Indicates the default option settings for string comparisons.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>Indicates that the string comparison must use successive Unicode UTF-16 encoded values of the string (code unit by code unit comparison), leading to a fast comparison but one that is culture-insensitive. A string starting with a code unit XXXX16 comes before a string starting with YYYY16, if XXXX16 is less than YYYY16. This value cannot be combined with other <see cref="T:System.Globalization.CompareOptions" /> values and must be used alone.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers.</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier.</summary>
      <param name="culture">A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> is less than zero.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> is not a valid culture identifier. See the Notes to Callers section for more information.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier and on the Boolean that specifies whether to use the user-selected culture settings from the system.</summary>
      <param name="culture">A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier, <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" /> object, or Windows-only culture identifier.</param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (<see langword="true" />) or the default culture settings (<see langword="false" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> is less than zero.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> is not a valid culture identifier. See the Notes to Callers section for more information.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name.</summary>
      <param name="name">A predefined <see cref="T:System.Globalization.CultureInfo" /> name, <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />, or Windows-only culture name. <paramref name="name" /> is not case-sensitive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> is not a valid culture name. For more information, see the Notes to Callers section.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.</summary>
      <param name="name">A predefined <see cref="T:System.Globalization.CultureInfo" /> name, <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />, or Windows-only culture name. <paramref name="name" /> is not case-sensitive.</param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (<see langword="true" />) or the default culture settings (<see langword="false" />).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> is not a valid culture name. See the Notes to Callers section for more information.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>Gets the default calendar used by the culture.</summary>
      <returns>A <see cref="T:System.Globalization.Calendar" /> that represents the default calendar used by the culture.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ClearCachedData">
      <summary>Refreshes cached culture-related information.</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>A copy of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>Gets the <see cref="T:System.Globalization.CompareInfo" /> that defines how to compare strings for the culture.</summary>
      <returns>The <see cref="T:System.Globalization.CompareInfo" /> that defines how to compare strings for the culture.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)">
      <summary>Creates a <see cref="T:System.Globalization.CultureInfo" /> that represents the specific culture that is associated with the specified name.</summary>
      <param name="name">A predefined <see cref="T:System.Globalization.CultureInfo" /> name or the name of an existing <see cref="T:System.Globalization.CultureInfo" /> object. <paramref name="name" /> is not case-sensitive.</param>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object that represents:  
 The invariant culture, if <paramref name="name" /> is an empty string ("").  
 -or-  
 The specific culture associated with <paramref name="name" />, if <paramref name="name" /> is a neutral culture.  
 -or-  
 The culture specified by <paramref name="name" />, if <paramref name="name" /> is already a specific culture.</returns>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> is not a valid culture name.  
-or-  
The culture specified by <paramref name="name" /> does not have a specific culture associated with it.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CultureTypes">
      <summary>Gets the culture types that pertain to the current <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>A bitwise combination of one or more <see cref="T:System.Globalization.CultureTypes" /> values. There is no default value.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture used by the current thread.</summary>
      <returns>An object that represents the culture used by the current thread.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to <see langword="null" />.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.</summary>
      <returns>The culture used by the Resource Manager to look up culture-specific resources at run time.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is set to a culture name that cannot be used to locate a resource file. Resource filenames can include only letters, numbers, hyphens, or underscores.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>Gets or sets a <see cref="T:System.Globalization.DateTimeFormatInfo" /> that defines the culturally appropriate format of displaying dates and times.</summary>
      <returns>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> that defines the culturally appropriate format of displaying dates and times.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property or any of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> properties is set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture">
      <summary>Gets or sets the default culture for threads in the current application domain.</summary>
      <returns>The default culture for threads in the current application domain, or <see langword="null" /> if the current system culture is the default thread culture in the application domain.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture">
      <summary>Gets or sets the default UI culture for threads in the current application domain.</summary>
      <returns>The default UI culture for threads in the current application domain, or <see langword="null" /> if the current system UI culture is the default thread UI culture in the application domain.</returns>
      <exception cref="T:System.ArgumentException">In a set operation, the <see cref="P:System.Globalization.CultureInfo.Name" /> property value is invalid.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>Gets the full localized culture name.</summary>
      <returns>The full localized culture name in the format languagefull [country/regionfull], where languagefull is the full name of the language and country/regionfull is the full name of the country/region.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>Gets the culture name in the format languagefull [country/regionfull] in English.</summary>
      <returns>The culture name in the format languagefull [country/regionfull] in English, where languagefull is the full name of the language and country/regionfull is the full name of the country/region.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.CultureInfo" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture">
      <summary>Gets an alternate user interface culture suitable for console applications when the default graphic user interface culture is unsuitable.</summary>
      <returns>An alternate culture that is used to read and display text on the console.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)">
      <summary>Retrieves a cached, read-only instance of a culture by using the specified culture identifier.</summary>
      <param name="culture">A locale identifier (LCID).</param>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> is less than zero.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> specifies a culture that is not supported. See the Notes to Caller section for more information.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)">
      <summary>Retrieves a cached, read-only instance of a culture using the specified culture name.</summary>
      <param name="name">The name of a culture. <paramref name="name" /> is not case-sensitive.</param>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> specifies a culture that is not supported. See the Notes to Callers section for more information.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)">
      <summary>Retrieves a cached, read-only instance of a culture. Parameters specify a culture that is initialized with the <see cref="T:System.Globalization.TextInfo" /> and <see cref="T:System.Globalization.CompareInfo" /> objects specified by another culture.</summary>
      <param name="name">The name of a culture. <paramref name="name" /> is not case-sensitive.</param>
      <param name="altName">The name of a culture that supplies the <see cref="T:System.Globalization.TextInfo" /> and <see cref="T:System.Globalization.CompareInfo" /> objects used to initialize <paramref name="name" />. <paramref name="altName" /> is not case-sensitive.</param>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="altName" /> is null.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> or <paramref name="altName" /> specifies a culture that is not supported. See the Notes to Callers section for more information.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)">
      <summary>Deprecated. Retrieves a read-only <see cref="T:System.Globalization.CultureInfo" /> object having linguistic characteristics that are identified by the specified RFC 4646 language tag.</summary>
      <param name="name">The name of a language as specified by the RFC 4646 standard.</param>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> does not correspond to a supported culture.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)">
      <summary>Gets the list of supported cultures filtered by the specified <see cref="T:System.Globalization.CultureTypes" /> parameter.</summary>
      <param name="types">A bitwise combination of the enumeration values that filter the cultures to retrieve.</param>
      <returns>An array that contains the cultures specified by the <paramref name="types" /> parameter. The array of cultures is unsorted.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="types" /> specifies an invalid combination of <see cref="T:System.Globalization.CultureTypes" /> values.</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>Gets an object that defines how to format the specified type.</summary>
      <param name="formatType">The <see cref="T:System.Type" /> for which to get a formatting object. This method only supports the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types.</param>
      <returns>The value of the <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property, which is a <see cref="T:System.Globalization.NumberFormatInfo" /> containing the default number format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.NumberFormatInfo" /> class.  
 -or-  
 The value of the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> property, which is a <see cref="T:System.Globalization.DateTimeFormatInfo" /> containing the default date and time format information for the current <see cref="T:System.Globalization.CultureInfo" />, if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.  
 -or-  
 null, if <paramref name="formatType" /> is any other object.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CultureInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IetfLanguageTag">
      <summary>Deprecated. Gets the RFC 4646 standard identification for a language.</summary>
      <returns>A string that is the RFC 4646 standard identification for a language.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InstalledUICulture">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the culture installed with the operating system.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> that represents the culture installed with the operating system.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> object that is culture-independent (invariant).</summary>
      <returns>The object that is culture-independent (invariant).</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> represents a neutral culture.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Globalization.CultureInfo" /> represents a neutral culture; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Globalization.CultureInfo" /> is read-only; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.KeyboardLayoutId">
      <summary>Gets the active input locale identifier.</summary>
      <returns>A 32-bit signed number that specifies an input locale identifier.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.LCID">
      <summary>Gets the culture identifier for the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The culture identifier for the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>Gets the culture name in the format languagecode2-country/regioncode2.</summary>
      <returns>The culture name in the format languagecode2-country/regioncode2. languagecode2 is a lowercase two-letter code derived from ISO 639-1. country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.</summary>
      <returns>The culture name. consisting of the full name of the language, the full name of the country/region, and the optional script. The format is discussed in the description of the <see cref="T:System.Globalization.CultureInfo" /> class.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>Gets or sets a <see cref="T:System.Globalization.NumberFormatInfo" /> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</summary>
      <returns>A <see cref="T:System.Globalization.NumberFormatInfo" /> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> property or any of the <see cref="T:System.Globalization.NumberFormatInfo" /> properties is set, and the <see cref="T:System.Globalization.CultureInfo" /> is read-only.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>Gets the list of calendars that can be used by the culture.</summary>
      <returns>An array of type <see cref="T:System.Globalization.Calendar" /> that represents the calendars that can be used by the culture represented by the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>Returns a read-only wrapper around the specified <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object to wrap.</param>
      <returns>A read-only <see cref="T:System.Globalization.CultureInfo" /> wrapper around <paramref name="ci" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> is null.</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>Gets the <see cref="T:System.Globalization.TextInfo" /> that defines the writing system associated with the culture.</summary>
      <returns>The <see cref="T:System.Globalization.TextInfo" /> that defines the writing system associated with the culture.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName">
      <summary>Gets the ISO 639-2 three-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The ISO 639-2 three-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName">
      <summary>Gets the three-letter code for the language as defined in the Windows API.</summary>
      <returns>The three-letter code for the language as defined in the Windows API.</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>Returns a string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> in the format languagecode2-country/regioncode2.</summary>
      <returns>A string containing the name of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>Gets the ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.UseUserOverride">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> object uses the user-selected culture settings.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Globalization.CultureInfo" /> uses the user-selected culture settings; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>The exception that is thrown when a method attempts to construct a culture that is not available.</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with its message string set to a system-supplied message.</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class using the specified serialization data and context.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The error message to display with this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message to display with this exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid Culture ID, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message to display with this exception.</param>
      <param name="invalidCultureId">The Culture ID that cannot be found.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid Culture ID, and the name of the parameter that is the cause this exception.</summary>
      <param name="paramName">The name of the parameter that is the cause the current exception.</param>
      <param name="invalidCultureId">The Culture ID that cannot be found.</param>
      <param name="message">The error message to display with this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message and the name of the parameter that is the cause this exception.</summary>
      <param name="paramName">The name of the parameter that is the cause of the current exception.</param>
      <param name="message">The error message to display with this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid Culture Name, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message to display with this exception.</param>
      <param name="invalidCultureName">The Culture Name that cannot be found.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.CultureNotFoundException" /> class with a specified error message, the invalid Culture Name, and the name of the parameter that is the cause this exception.</summary>
      <param name="paramName">The name of the parameter that is the cause the current exception.</param>
      <param name="invalidCultureName">The Culture Name that cannot be found.</param>
      <param name="message">The error message to display with this exception.</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureId">
      <summary>Gets the culture identifier that cannot be found.</summary>
      <returns>The invalid culture identifier.</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>Gets the culture name that cannot be found.</summary>
      <returns>The invalid culture name.</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>Gets the error message that explains the reason for the exception.</summary>
      <returns>A text string describing the details of the exception.</returns>
    </member>
    <member name="T:System.Globalization.CultureTypes">
      <summary>Defines the types of culture lists that can be retrieved using the <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> method.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.AllCultures">
      <summary>All cultures that recognized by .NET, including neutral and specific cultures and custom cultures created by the user.
On .NET Framework 4 and later versions and .NET Core running on Windows, it includes the culture data available from the Windows operating system. On .NET Core running on Linux and macOS, it includes culture data defined in the ICU libraries.
 <see cref="F:System.Globalization.CultureTypes.AllCultures" /> is a composite field that includes the <see cref="F:System.Globalization.CultureTypes.NeutralCultures" />, <see cref="F:System.Globalization.CultureTypes.SpecificCultures" />, and <see cref="F:System.Globalization.CultureTypes.InstalledWin32Cultures" /> values.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.FrameworkCultures">
      <summary>This member is deprecated; using this value with <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> returns neutral and specific cultures shipped with the .NET Framework 2.0.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.InstalledWin32Cultures">
      <summary>This member is deprecated. All cultures that are installed in the Windows operating system.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.NeutralCultures">
      <summary>Cultures that are associated with a language but are not specific to a country/region.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.ReplacementCultures">
      <summary>This member is deprecated. Custom cultures created by the user that replace cultures shipped with the .NET Framework.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.SpecificCultures">
      <summary>Cultures that are specific to a country/region.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.UserCustomCulture">
      <summary>This member is deprecated. Custom cultures created by the user.</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.WindowsOnlyCultures">
      <summary>This member is deprecated and is ignored.</summary>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>Provides culture-specific information about the format of date and time values.</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", and "Sat".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>Gets or sets a string array of abbreviated month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>An array of abbreviated month names.</returns>
      <exception cref="T:System.ArgumentException">In a set operation, the array is multidimensional or has a length that is not exactly 13.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the array or one of the elements of the array is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.</summary>
      <returns>A one-dimensional string array with 13 elements that contains the culture-specific abbreviated names of the months. For 12-month calendars, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", and "".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>Gets or sets the string designator for hours that are "ante meridiem" (before noon).</summary>
      <returns>The string designator for hours that are ante meridiem. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "AM".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>Gets or sets the calendar to use for the current culture.</summary>
      <returns>The calendar to use for the current culture. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is a <see cref="T:System.Globalization.GregorianCalendar" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a <see cref="T:System.Globalization.Calendar" /> object that is not valid for the current culture.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</summary>
      <returns>A value that determines the first calendar week of the year. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
      <returns>A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> object copied from the original <see cref="T:System.Globalization.DateTimeFormatInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that formats values based on the current culture.</summary>
      <returns>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object based on the <see cref="T:System.Globalization.CultureInfo" /> object for the current thread.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
      <summary>Gets or sets the string that separates the components of a date, that is, the year, month, and day.</summary>
      <returns>The string that separates the components of a date, that is, the year, month, and day. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "/".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.</summary>
      <returns>A one-dimensional string array that contains the culture-specific full names of the days of the week. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", and "Saturday".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>Gets or sets the first day of the week.</summary>
      <returns>An enumeration value that represents the first day of the week. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is <see cref="F:System.DayOfWeek.Sunday" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>Gets or sets the custom format string for a long date and long time value.</summary>
      <returns>The custom format string for a long date and long time value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value.</param>
      <returns>The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</summary>
      <param name="era">The integer representing the era.</param>
      <returns>A string containing the abbreviated name of the specified era, if an abbreviation exists.  
 -or-  
 A string containing the full name of the era, if an abbreviation does not exist.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
      <returns>The culture-specific abbreviated name of the month represented by <paramref name="month" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns">
      <summary>Returns all the standard patterns in which date and time values can be formatted.</summary>
      <returns>An array that contains the standard patterns in which date and time values can be formatted.</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)">
      <summary>Returns all the patterns in which date and time values can be formatted using the specified standard format string.</summary>
      <param name="format">A standard format string.</param>
      <returns>An array containing the standard patterns in which date and time values can be formatted using the specified format string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> is not a valid standard format string.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" /> value.</param>
      <returns>The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> is not a valid <see cref="T:System.DayOfWeek" /> value.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>Returns the integer representing the specified era.</summary>
      <param name="eraName">The string containing the name of the era.</param>
      <returns>The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>Returns the string containing the name of the specified era.</summary>
      <param name="era">The integer representing the era.</param>
      <returns>A string containing the name of the era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> does not represent a valid era in the calendar specified in the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>Returns an object of the specified type that provides a date and time  formatting service.</summary>
      <param name="formatType">The type of the required formatting service.</param>
      <returns>The current  object, if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.DateTimeFormatInfo" />; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with the specified <see cref="T:System.IFormatProvider" />.</summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.  
 -or-  
 <see langword="null" /> to get <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />.</param>
      <returns>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object associated with <see cref="T:System.IFormatProvider" />.</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>Returns the culture-specific full name of the specified month based on the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
      <returns>The culture-specific full name of the month represented by <paramref name="month" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 13.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)">
      <summary>Obtains the shortest abbreviated day name for a specified day of the week associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <param name="dayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values.</param>
      <returns>The abbreviated name of the week that corresponds to the <paramref name="dayOfWeek" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayOfWeek" /> is not a value in the <see cref="T:System.DayOfWeek" /> enumeration.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> object that is culture-independent (invariant).</summary>
      <returns>A read-only object that is culture-independent (invariant).</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>Gets or sets the custom format string for a long date value.</summary>
      <returns>The custom format string for a long date value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>Gets or sets the custom format string for a long time value.</summary>
      <returns>The format pattern for a long time value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>Gets or sets the custom format string for a month and day value.</summary>
      <returns>The custom format string for a month and day value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>Gets or sets a string array of month names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A string array of month names.</returns>
      <exception cref="T:System.ArgumentException">In a set operation, the array is multidimensional or has a length that is not exactly 13.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the array or one of its elements is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.</summary>
      <returns>A one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> contains "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", and "".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName">
      <summary>Gets the native name of the calendar associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>The native name of the calendar used in the culture associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object if that name is available, or the empty string ("") if the native calendar name is not available.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>Gets or sets the string designator for hours that are "post meridiem" (after noon).</summary>
      <returns>The string designator for hours that are "post meridiem" (after noon). The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is "PM".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</summary>
      <param name="dtfi">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> object to wrap.</param>
      <returns>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.</summary>
      <returns>The custom format string for a time value that is based on the IETF RFC 1123 specification.</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)">
      <summary>Sets the custom date and time format strings that correspond to a specified standard format string.</summary>
      <param name="patterns">An array of custom format strings.</param>
      <param name="format">The standard format string associated with the custom format strings specified in the <paramref name="patterns" /> parameter.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="patterns" /> is <see langword="null" /> or a zero-length array.  
-or-  
<paramref name="format" /> is not a valid standard format string or is a standard format string whose patterns cannot be set.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="patterns" /> has an array element whose value is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>Gets or sets the custom format string for a short date value.</summary>
      <returns>The custom format string for a short date value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object.</summary>
      <returns>A string array of day names.</returns>
      <exception cref="T:System.ArgumentException">In a set operation, the array does not have exactly seven elements.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value array or one of the elements of the value array is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>Gets or sets the custom format string for a short time value.</summary>
      <returns>The custom format string for a short time value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>Gets the custom format string for a sortable date and time value.</summary>
      <returns>The custom format string for a sortable date and time value.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
      <summary>Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.</summary>
      <returns>The string that separates the components of time. The default for <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> is ":".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>Gets the custom format string for a universal, sortable date and time string, as defined by ISO 8601.</summary>
      <returns>The custom format string for a universal, sortable date and time string.</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>Gets or sets the custom format string for a year and month value.</summary>
      <returns>The custom format string for a year and month value.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.DateTimeFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>Defines the formatting options that customize string parsing for some date and time parsing methods.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>Date and time are returned as a Coordinated Universal Time (UTC). If the input string denotes a local time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, the date and time are converted from the local time to UTC. If the input string denotes a UTC time, through a time zone specifier or <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, no conversion occurs. If the input string does not denote a local or UTC time, no conversion occurs and the resulting <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>Extra white-space characters in the middle of the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>Leading white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>Trailing white-space characters must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>Extra white-space characters anywhere in the string must be ignored during parsing, except if they occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns. This value is a combination of the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> values.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a local time. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> or <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>If no time zone is specified in the parsed string, the string is assumed to denote a UTC. This value cannot be used with <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> or <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>If the parsed string contains only the time and not the date, the parsing methods assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>Default formatting options must be used. This value represents the default style for the <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />, and <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> methods.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>The <see cref="T:System.DateTimeKind" /> field of a date is preserved when a <see cref="T:System.DateTime" /> object is converted to a string using the "o" or "r" standard format specifier, and the string is then converted back to a <see cref="T:System.DateTime" /> object.</summary>
    </member>
    <member name="T:System.Globalization.DaylightTime">
      <summary>Defines the period of daylight saving time.</summary>
    </member>
    <member name="M:System.Globalization.DaylightTime.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.DaylightTime" /> class with the specified start, end, and time difference information.</summary>
      <param name="start">The object that represents the date and time when daylight saving time begins. The value must be in local time.</param>
      <param name="end">The object that represents the date and time when daylight saving time ends. The value must be in local time.</param>
      <param name="delta">The object that represents the difference between standard time and daylight saving time, in ticks.</param>
    </member>
    <member name="P:System.Globalization.DaylightTime.Delta">
      <summary>Gets the time interval that represents the difference between standard time and daylight saving time.</summary>
      <returns>The time interval that represents the difference between standard time and daylight saving time.</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.End">
      <summary>Gets the object that represents the date and time when the daylight saving period ends.</summary>
      <returns>The object that represents the date and time when the daylight saving period ends. The value is in local time.</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.Start">
      <summary>Gets the object that represents the date and time when the daylight saving period begins.</summary>
      <returns>The object that represents the date and time when the daylight saving period begins. The value is in local time.</returns>
    </member>
    <member name="T:System.Globalization.DigitShapes">
      <summary>Specifies the culture-specific display of digits.</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.Context">
      <summary>The digit shape depends on the previous text in the same output. European digits follow Latin scripts; Arabic-Indic digits follow Arabic text; and Thai digits follow Thai text.</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.NativeNational">
      <summary>The digit shape is the native equivalent of the digits from 0 through 9. ASCII digits from 0 through 9 are replaced by equivalent native national digits.</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.None">
      <summary>The digit shape is not changed. Full Unicode compatibility is maintained.</summary>
    </member>
    <member name="T:System.Globalization.EastAsianLunisolarCalendar">
      <summary>Represents a calendar that divides time into months, days, years, and eras, and has dates that are based on cycles of the sun and the moon.</summary>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Calculates the date that is the specified number of months away from the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="months" />.</param>
      <param name="months">The number of months to add.</param>
      <returns>A new <see cref="T:System.DateTime" /> that results from adding the specified number of months to the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The result is outside the supported range of a <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000 or greater than 120000.  
-or-  
<paramref name="time" /> is less than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Calculates the date that is the specified number of years away from the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="years" />.</param>
      <param name="years">The number of years to add.</param>
      <returns>A new <see cref="T:System.DateTime" /> that results from adding the specified number of years to the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The result is outside the supported range of a <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)">
      <summary>Calculates the celestial stem of the specified year in the sexagenary (60-year) cycle.</summary>
      <param name="sexagenaryYear">An integer from 1 through 60 that represents a year in the sexagenary cycle.</param>
      <returns>A number from 1 through 10.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> is less than 1 or greater than 60.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Calculates the day of the month in the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 31 that represents the day of the month specified in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Calculates the day of the week in the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>One of the <see cref="T:System.DayOfWeek" /> values that represents the day of the week specified in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)">
      <summary>Calculates the day of the year in the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified month of the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month of the specified year and era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year and era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>A positive integer from 1 through 13 that indicates the leap month in the specified year and era.  
 -or-  
 Zero if this calendar does not support a leap month, or if the <paramref name="year" /> and <paramref name="era" /> parameters do not specify a leap year.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 13 that represents the month specified in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of months in the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era. The return value is 12 months in a common year or 13 months in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)">
      <summary>Calculates the year in the sexagenary (60-year) cycle that corresponds to the specified date.</summary>
      <param name="time">A <see cref="T:System.DateTime" /> to read.</param>
      <returns>A number from 1 through 60 in the sexagenary cycle that corresponds to the <paramref name="date" /> parameter.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)">
      <summary>Calculates the terrestrial branch of the specified year in the sexagenary (60-year) cycle.</summary>
      <param name="sexagenaryYear">An integer from 1 through 60 that represents a year in the sexagenary cycle.</param>
      <returns>An integer from 1 through 12.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> is less than 1 or greater than 60.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified date.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 through 13 that represents the month.</param>
      <param name="day">An integer from 1 through 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 through 13 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the <paramref name="month" /> parameter is a leap month; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 through 13 that represents the month.</param>
      <param name="day">An integer from 1 through 31 that represents the day.</param>
      <param name="hour">An integer from 0 through 23 that represents the hour.</param>
      <param name="minute">An integer from 0 through 59 that represents the minute.</param>
      <param name="second">An integer from 0 through 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 through 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>A <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, <paramref name="millisecond" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of the <paramref name="year" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.EastAsianLunisolarCalendar" /> is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>Represents the Gregorian calendar.</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the default <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class using the specified <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</summary>
      <param name="type">The <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes which language version of the calendar to create.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="type" /> is not a member of the <see cref="T:System.Globalization.GregorianCalendarTypes" /> enumeration.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>Gets or sets the <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.</summary>
      <returns>A <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes the language version of the current <see cref="T:System.Globalization.GregorianCalendar" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is not a member of the <see cref="T:System.Globalization.GregorianCalendarTypes" /> enumeration.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.GregorianCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.GregorianCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify either <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>Always 0 because the Gregorian calendar does not recognize leap months.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.  
-or-  
<paramref name="era" /> is not <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> or <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <see cref="F:System.DateTime.MaxValue" />.</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.GregorianCalendar" /> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>Defines the different language versions of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>Refers to the Arabic version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>Refers to the localized version of the Gregorian calendar, based on the language of the <see cref="T:System.Globalization.CultureInfo" /> that uses the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>Refers to the Middle East French version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>Refers to the transliterated English version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>Refers to the transliterated French version of the Gregorian calendar.</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>Refers to the U.S. English version of the Gregorian calendar.</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>Represents the Hebrew calendar.</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.HebrewCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="months" />.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add <paramref name="years" />.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.HebrewCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.HebrewCalendar" /> type. The return value is always an array containing one element equal to <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" />.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 385 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is earlier than September 17, 1583 in the Gregorian calendar, or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 13 that represents the month.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="Calendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />. The return value is always <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" />.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>A positive integer that indicates the leap month in the specified year and era. The return value is 7 if the <paramref name="year" /> and <paramref name="era" /> parameters specify a leap year, or 0 if the year is not a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is not <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.  
-or-  
<paramref name="year" /> is less than the Hebrew calendar year 5343 or greater than the Hebrew calendar year 5999.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 13 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>The number of months in the specified year in the specified era. The return value is either 12 in a common year, or 13 in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" /> value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.</exception>
    </member>
    <member name="F:System.Globalization.HebrewCalendar.HebrewEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 13 that represents the month.</param>
      <param name="day">An integer from 1 to 30 that represents the day.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 13 that represents the month.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>
        <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the last moment of September, 29, 2239 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.HebrewCalendar" /> type, which is equivalent to the first moment of January, 1, 1583 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 13 that represents the month.</param>
      <param name="day">An integer from 1 to 30 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era. Specify either <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> or <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" /> or <paramref name="era" /> is outside the range supported by the current <see cref="T:System.Globalization.HebrewCalendar" /> object.  
-or-  
<paramref name="hour" /> is less than 0 or greater than 23.  
-or-  
<paramref name="minute" /> is less than 0 or greater than 59.  
-or-  
<paramref name="second" /> is less than 0 or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a 4-digit year by using the <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A 2-digit year from 0 through 99, or a 4-digit Hebrew calendar year from 5343 through 5999.</param>
      <returns>If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 0.  
-or-  
<paramref name="year" /> is less than <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.HebrewCalendar" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the Hebrew calendar year value is less than 5343 but is not 99, or the year value is greater than 5999.</exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>Represents the Hijri calendar.</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.HijriCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to add months to.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to add years to.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year that is specified by the <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.HijriCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.HijriCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 355 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month of the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.  
-or-  
<paramref name="month" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see cref="F:System.Globalization.Calendar.CurrentEra" /> or <see cref="F:System.Globalization.HijriCalendar.HijriEra" />.</param>
      <returns>Always 0 because the <see cref="T:System.Globalization.HijriCalendar" /> type does not support the notion of a leap month.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the Hijri calendar year 1 or greater than the year 9666.  
-or-  
<paramref name="era" /> is not <see cref="F:System.Globalization.Calendar.CurrentEra" /> or <see cref="F:System.Globalization.HijriCalendar.HijriEra" />.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year and era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>Gets or sets the number of days to add or subtract from the calendar to accommodate the variances in the start and the end of Ramadan and to accommodate the date difference between countries/regions.</summary>
      <returns>An integer from -2 to 2 that represents the number of days to add or subtract from the calendar.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to an invalid value.</exception>
    </member>
    <member name="F:System.Globalization.HijriCalendar.HijriEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 30 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.  
-or-  
<paramref name="month" /> is outside the range supported by this calendar.  
-or-  
<paramref name="day" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.  
-or-  
<paramref name="month" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this calendar.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this calendar.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.HijriCalendar" /> type, which is equivalent to the first moment of July 18, 622 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 30 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by this calendar.  
-or-  
<paramref name="year" /> is outside the range supported by this calendar.  
-or-  
<paramref name="month" /> is outside the range supported by this calendar.  
-or-  
<paramref name="day" /> is outside the range supported by this calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">This calendar is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than 100 or greater than 9666.</exception>
    </member>
    <member name="T:System.Globalization.IdnMapping">
      <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Globalization.IdnMapping.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping" /> class.</summary>
    </member>
    <member name="P:System.Globalization.IdnMapping.AllowUnassigned">
      <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
      <returns>
        <see langword="true" /> if unassigned code points are used in operations; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.Equals(System.Object)">
      <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping" /> object are equal.</summary>
      <param name="obj">The object to compare to the current object.</param>
      <returns>
        <see langword="true" /> if the object specified by the <paramref name="obj" /> parameter is derived from <see cref="T:System.Globalization.IdnMapping" /> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String)">
      <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <returns>The equivalent of the string specified by the <paramref name="unicode" /> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)">
      <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <param name="index">A zero-based offset into <paramref name="unicode" /> that specifies the start of the substring to convert. The conversion operation continues to the end of the <paramref name="unicode" /> string.</param>
      <returns>The equivalent of the substring specified by the <paramref name="unicode" /> and <paramref name="index" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="unicode" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)">
      <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
      <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
      <param name="index">A zero-based offset into <paramref name="unicode" /> that specifies the start of the substring.</param>
      <param name="count">The number of characters to convert in the substring that starts at the position specified by  <paramref name="index" /> in the <paramref name="unicode" /> string.</param>
      <returns>The equivalent of the substring specified by the <paramref name="unicode" />, <paramref name="index" />, and <paramref name="count" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="unicode" />.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="unicode" /> minus <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
      <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping" /> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String)">
      <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)">
      <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <param name="index">A zero-based offset into <paramref name="ascii" /> that specifies the start of the substring to decode. The decoding operation continues to the end of the <paramref name="ascii" /> string.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> and <paramref name="index" /> parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="ascii" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)">
      <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
      <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
      <param name="index">A zero-based offset into <paramref name="ascii" /> that specifies the start of the substring.</param>
      <param name="count">The number of characters to convert in the substring that starts at the position specified by <paramref name="index" /> in the <paramref name="ascii" /> string.</param>
      <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" />, <paramref name="index" />, and <paramref name="count" /> parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="ascii" />.  
-or-  
<paramref name="index" /> is greater than the length of <paramref name="ascii" /> minus <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
    </member>
    <member name="P:System.Globalization.IdnMapping.UseStd3AsciiRules">
      <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
      <returns>
        <see langword="true" /> if standard naming conventions are used in operations; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Globalization.ISOWeek">
      <summary>Provides static members to support the ISO week date that is part of the ISO 8601 date and time standard issued by the International Organization for Standardization (ISO).</summary>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeekOfYear(System.DateTime)">
      <summary>Calculates the ISO week number of a given Gregorian date.</summary>
      <param name="date">A date in the Gregorian calendar.</param>
      <returns>A number between 1 and 53 represnting the ISO week number of the given Gregorian date.</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeeksInYear(System.Int32)">
      <summary>calculates the number of weeks in a given ISO week-numbering year.</summary>
      <param name="year">An ISO week-numbering year (also called an ISO year informally).</param>
      <returns>The number of ISO weeks in the year. Returns either 52 or 53.</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYear(System.DateTime)">
      <summary>Calculates the ISO week-numbering year (also called ISO year informally) mapped to the input Gregorian date.</summary>
      <param name="date">A date in the Gregorian calendar.</param>
      <returns>The ISO week-numbering year, between 1 and 9999</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearEnd(System.Int32)">
      <summary>Calculates the Gregorian date at which the week-numbering year will end.</summary>
      <param name="year">An ISO week-numbering year (also called an ISO year informally).</param>
      <returns>The Gregorian date at which the week-numbering year will end.</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearStart(System.Int32)">
      <summary>Calculates the Gregorian date at which the week-numbering year will start.</summary>
      <param name="year">An ISO week-numbering year (also called an ISO year informally).</param>
      <returns>The Gregorian date at which the week-numbering year will start.</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.ToDateTime(System.Int32,System.Int32,System.DayOfWeek)">
      <summary>Maps the ISO week date represented by a specified ISO year, week number, and day of week to the equivalent Gregorian date.</summary>
      <param name="year">An ISO week-numbering year (also called an ISO year informally).</param>
      <param name="week">The ISO week number in the given ISO week-numbering year.</param>
      <param name="dayOfWeek">The day of week inside the given ISO week.</param>
      <returns>The Gregorian date equivalent to the input ISO week date.</returns>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>Represents the Japanese calendar.</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">Unable to initialize a <see cref="T:System.Globalization.JapaneseCalendar" /> object because of missing culture information.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the supported range of the <see cref="T:System.Globalization.JapaneseCalendar" /> type.  
-or-  
<paramref name="years" /> is less than -10,000 or greater than 10,000.</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.JapaneseCalendar" /> type does not support the notion of a leap month.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The return value is always 12.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week.</param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week.</param>
      <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.  
-or-  
<paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" />, if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" />, if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the current <see cref="T:System.Globalization.JapaneseCalendar" /> object.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the current <see cref="T:System.Globalization.JapaneseCalendar" /> object.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.JapaneseCalendar" /> type, which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">An integer (usually two digits) that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than 8011 (or <see langword="MaxSupportedDateTime.Year" />).</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.JapaneseLunisolarCalendar">
      <summary>Represents time in divisions, such as months, days, and years. Years are calculated as for the Japanese calendar, while days and months are calculated using the lunisolar calendar.</summary>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> class.</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year that is specified by the <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.Eras">
      <summary>Gets the eras that are relevant to the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> object.</summary>
      <returns>An array of 32-bit signed integers that specify the relevant eras.</returns>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>Retrieves the era that corresponds to the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era specified in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="F:System.Globalization.JapaneseLunisolarCalendar.JapaneseEra">
      <summary>Specifies the current era.</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MaxSupportedDateTime">
      <summary>Gets the maximum date and time supported by the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> class, which is equivalent to the last moment of January 22, 2050 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime">
      <summary>Gets the minimum date and time supported by the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> class, which is equivalent to the first moment of January 28, 1960 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="T:System.Globalization.JulianCalendar">
      <summary>Represents the Julian calendar.</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.JulianCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.JulianCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>A positive integer that indicates the leap month in the specified year and era. Alternatively, this method returns zero if the calendar does not support a leap month, or if <paramref name="year" /> and <paramref name="era" /> do not specify a leap year.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> is outside the range supported by the calendar.  
-or-  
<paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in <paramref name="time" />.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="F:System.Globalization.JulianCalendar.JulianEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.JulianCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.JulianCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>Represents the Korean calendar.</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">Unable to initialize a <see cref="T:System.Globalization.KoreanCalendar" /> object because of missing culture information.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> or <paramref name="time" /> is out of range.</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.KoreanCalendar" />.</summary>
      <returns>An array of integers that represents the eras in the <see cref="T:System.Globalization.KoreanCalendar" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.KoreanCalendar" /> class does not support the notion of a leap month.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week.</param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week.</param>
      <returns>A 1-based integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.  
-or-  
<paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.KoreanCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.KoreanLunisolarCalendar">
      <summary>Represents time in divisions, such as months, days, and years. Years are calculated using the Gregorian calendar, while days and months are calculated using the lunisolar calendar.</summary>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> class.</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year specified by the <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.Eras">
      <summary>Gets the eras that correspond to the range of dates and times supported by the current <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> object.</summary>
      <returns>An array of 32-bit signed integers that specify the relevant eras. The return value for a <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> object is always an array containing one element equal to the <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> value.</returns>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>Retrieves the era that corresponds to the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era specified by the <paramref name="time" /> parameter. The return value for a <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> object is always the <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> represents a date and time less than <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra">
      <summary>Specifies the Gregorian era that corresponds to the current <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> object.</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime">
      <summary>Gets the maximum date and time supported by the <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> class, which is equivalent to the last  moment of February 10, 2051 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime">
      <summary>Gets the minimum date and time supported by the <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> class.</returns>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>Provides culture-specific information for formatting and parsing numeric values.</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>Initializes a new writable instance of the <see cref="T:System.Globalization.NumberFormatInfo" /> class that is culture-independent (invariant).</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Globalization.NumberFormatInfo" /> object.</summary>
      <returns>A new object copied from the original <see cref="T:System.Globalization.NumberFormatInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>Gets or sets the number of decimal places to use in currency values.</summary>
      <returns>The number of decimal places to use in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>Gets or sets the string to use as the decimal separator in currency values.</summary>
      <returns>The string to use as the decimal separator in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>Gets or sets the string that separates groups of digits to the left of the decimal in currency values.</summary>
      <returns>The string that separates groups of digits to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>Gets or sets the number of digits in each group to the left of the decimal in currency values.</summary>
      <returns>The number of digits in each group to the left of the decimal in currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.  
 -or-  
 The property is being set and the array contains an entry, other than the last entry, that is set to 0.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>Gets or sets the format pattern for negative currency values.</summary>
      <returns>The format pattern for negative currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "($n)", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 15.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>Gets or sets the format pattern for positive currency values.</summary>
      <returns>The format pattern for positive currency values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "$n", where "$" is the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 3.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>Gets or sets the string to use as the currency symbol.</summary>
      <returns>The string to use as the currency symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "¤".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> that formats values based on the current culture.</summary>
      <returns>A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> based on the culture of the current thread.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.DigitSubstitution">
      <summary>Gets or sets a value that specifies how the graphical user interface displays the shape of a digit.</summary>
      <returns>One of the enumeration values that specifies the culture-specific digit shape.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentException">The value in a set operation is not a valid <see cref="T:System.Globalization.DigitShapes" /> value.</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>Gets an object of the specified type that provides a number formatting service.</summary>
      <param name="formatType">The <see cref="T:System.Type" /> of the required formatting service.</param>
      <returns>The current <see cref="T:System.Globalization.NumberFormatInfo" />, if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.NumberFormatInfo" />; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>Gets the <see cref="T:System.Globalization.NumberFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</summary>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> used to get the <see cref="T:System.Globalization.NumberFormatInfo" />.  
 -or-  
 <see langword="null" /> to get <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</param>
      <returns>The <see cref="T:System.Globalization.NumberFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> object that is culture-independent (invariant).</summary>
      <returns>A read-only  object that is culture-independent (invariant).</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>Gets a value that indicates whether this <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Globalization.NumberFormatInfo" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>Gets or sets the string that represents the IEEE NaN (not a number) value.</summary>
      <returns>The string that represents the IEEE NaN (not a number) value. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "NaN".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NativeDigits">
      <summary>Gets or sets a string array of native digits equivalent to the Western digits 0 through 9.</summary>
      <returns>A string array that contains the native equivalent of the Western digits 0 through 9. The default is an array having the elements "0", "1", "2", "3", "4", "5", "6", "7", "8", and "9".</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value is <see langword="null" />.  
 -or-  
 In a set operation, an element of the value array is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">In a set operation, the value array does not contain 10 elements.  
 -or-  
 In a set operation, an element of the value array does not contain either a single <see cref="T:System.Char" /> object or a pair of <see cref="T:System.Char" /> objects that comprise a surrogate pair.  
 -or-  
 In a set operation, an element of the value array is not a number digit as defined by the Unicode Standard. That is, the digit in the array element does not have the Unicode <see langword="Number, Decimal Digit" /> (Nd) General Category value.  
 -or-  
 In a set operation, the numeric value of an element in the value array does not correspond to the element's position in the array. That is, the element at index 0, which is the first element of the array, does not have a numeric value of 0, or the element at index 1 does not have a numeric value of 1.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>Gets or sets the string that represents negative infinity.</summary>
      <returns>The string that represents negative infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-Infinity".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>Gets or sets the string that denotes that the associated number is negative.</summary>
      <returns>The string that denotes that the associated number is negative. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "-".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>Gets or sets the number of decimal places to use in numeric values.</summary>
      <returns>The number of decimal places to use in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>Gets or sets the string to use as the decimal separator in numeric values.</summary>
      <returns>The string to use as the decimal separator in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>Gets or sets the string that separates groups of digits to the left of the decimal in numeric values.</summary>
      <returns>The string that separates groups of digits to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>Gets or sets the number of digits in each group to the left of the decimal in numeric values.</summary>
      <returns>The number of digits in each group to the left of the decimal in numeric values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.  
 -or-  
 The property is being set and the array contains an entry, other than the last entry, that is set to 0.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>Gets or sets the format pattern for negative numeric values.</summary>
      <returns>The format pattern for negative numeric values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 4.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>Gets or sets the number of decimal places to use in percent values.</summary>
      <returns>The number of decimal places to use in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 2.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 99.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>Gets or sets the string to use as the decimal separator in percent values.</summary>
      <returns>The string to use as the decimal separator in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ".".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentException">The property is being set to an empty string.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>Gets or sets the string that separates groups of digits to the left of the decimal in percent values.</summary>
      <returns>The string that separates groups of digits to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is ",".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>Gets or sets the number of digits in each group to the left of the decimal in percent values.</summary>
      <returns>The number of digits in each group to the left of the decimal in percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is a one-dimensional array with only one element, which is set to 3.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The property is being set and the array contains an entry that is less than 0 or greater than 9.  
 -or-  
 The property is being set and the array contains an entry, other than the last entry, that is set to 0.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>Gets or sets the format pattern for negative percent values.</summary>
      <returns>The format pattern for negative percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "-n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 11.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>Gets or sets the format pattern for positive percent values.</summary>
      <returns>The format pattern for positive percent values. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is 0, which represents "n %", where "%" is the <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> and <paramref name="n" /> is a number.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is being set to a value that is less than 0 or greater than 3.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>Gets or sets the string to use as the percent symbol.</summary>
      <returns>The string to use as the percent symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "%".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>Gets or sets the string to use as the per mille symbol.</summary>
      <returns>The string to use as the per mille symbol. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "‰", which is the Unicode character U+2030.</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>Gets or sets the string that represents positive infinity.</summary>
      <returns>The string that represents positive infinity. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "Infinity".</returns>
      <exception cref="T:System.ArgumentNullException">The property is being set to <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>Gets or sets the string that denotes that the associated number is positive.</summary>
      <returns>The string that denotes that the associated number is positive. The default for <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> is "+".</returns>
      <exception cref="T:System.ArgumentNullException">In a set operation, the value to be assigned is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The property is being set and the <see cref="T:System.Globalization.NumberFormatInfo" /> object is read-only.</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>Returns a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper.</summary>
      <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo" /> to wrap.</param>
      <returns>A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper around <paramref name="nfi" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>Determines the styles permitted in numeric string arguments that are passed to the <see langword="Parse" /> and <see langword="TryParse" /> methods of the integral and floating-point numeric types.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>Indicates that the numeric string can contain a currency symbol. Valid currency symbols are determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>Indicates that the numeric string can have a decimal point. If the <see cref="T:System.Globalization.NumberStyles" /> value includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag and the parsed string includes a currency symbol, the decimal separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> property. Otherwise, the decimal separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>Indicates that the numeric string can be in exponential notation. The <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> flag allows the parsed string to contain an exponent that begins with the "E" or "e" character and that is followed by an optional positive or negative sign and an integer. In other words, it successfully parses strings in the form nnnExx, nnnE+xx, and nnnE-xx. It does not allow a decimal separator or sign in the significand or mantissa; to allow these elements in the string to be parsed, use the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> flags, or use a composite style that includes these individual flags.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>Indicates that the numeric string represents a hexadecimal value. Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f. Strings that are parsed using this style cannot be prefixed with "0x" or "&amp;h". A string that is parsed with the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> style will always be interpreted as a hexadecimal value. The only flags that can be combined with <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />. The <see cref="T:System.Globalization.NumberStyles" /> enumeration includes a composite style, <see cref="F:System.Globalization.NumberStyles.HexNumber" />, that consists of these three flags.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>Indicates that the numeric string can have a leading sign. Valid leading sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>Indicates that leading white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method returns <see langword="true" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>Indicates that the numeric string can have one pair of parentheses enclosing the number. The parentheses indicate that the string to be parsed represents a negative number.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>Indicates that the numeric string can have group separators, such as symbols that separate hundreds from thousands. If the <see cref="T:System.Globalization.NumberStyles" /> value includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> flag and the string to be parsed includes a currency symbol, the valid group separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> property,  and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> property. Otherwise, the valid group separator character is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> property, and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> property.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>Indicates that the numeric string can have a trailing sign. Valid trailing sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>Indicates that trailing white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method returns <see langword="true" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>Indicates that all styles except <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>Indicates that all styles except <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>Indicates that no style elements, such as leading or trailing white space, thousands separators, or a decimal separator, can be present in the parsed string. The string to be parsed must consist of integral decimal digits only.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>Indicates that the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" />, and <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> styles are used. This is a composite number style.</summary>
    </member>
    <member name="T:System.Globalization.PersianCalendar">
      <summary>Represents the Persian calendar.</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.PersianCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> object that is offset the specified number of months from the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The positive or negative number of months to add.</param>
      <returns>A <see cref="T:System.DateTime" /> object that represents the date yielded by adding the number of months specified by the <paramref name="months" /> parameter to the date specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> object that is offset the specified number of years from the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The positive or negative number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> object that results from adding the specified number of years to the specified <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is less than -10,000 or greater than 10,000.</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or lunisolar-based.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.Eras">
      <summary>Gets the list of eras in a <see cref="T:System.Globalization.PersianCalendar" /> object.</summary>
      <returns>An array of integers that represents the eras in a <see cref="T:System.Globalization.PersianCalendar" /> object. The array consists of a single element having a value of <see cref="F:System.Globalization.PersianCalendar.PersianEra" />.</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 31 that represents the day of the month in the specified <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="time" /> parameter represents a date less than <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 366 that represents the day of the year in the specified <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="time" /> parameter represents a date less than <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month of the specified year and era.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="month">An integer that represents the month, and ranges from 1 through 12 if <paramref name="year" /> is not 9378, or 1 through 10 if <paramref name="year" /> is 9378.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>The number of days in the specified month of the specified year and era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year of the specified era.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>The number of days in the specified year and era. The number of days is 365 in a common year or 366 in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>Always returns <see cref="F:System.Globalization.PersianCalendar.PersianEra" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="time" /> parameter represents a date less than <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Returns the leap month for a specified year and era.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year to convert.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>The return value is always 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 12 that represents the month in the specified <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="time" /> parameter represents a date less than <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year of the specified era.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>Returns 10 if the <paramref name="year" /> parameter is 9378; otherwise, always returns 12.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" /> object.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 through 9378 that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="time" /> parameter represents a date less than <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> or greater than <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" />.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date is a leap day.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="month">An integer that represents the month and ranges from 1 through 12 if <paramref name="year" /> is not 9378, or 1 through 10 if <paramref name="year" /> is 9378.</param>
      <param name="day">An integer from 1 through 31 that represents the day.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="month">An integer that represents the month and ranges from 1 through 12 if <paramref name="year" /> is not 9378, or 1 through 10 if <paramref name="year" /> is 9378.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>Always returns <see langword="false" /> because the <see cref="T:System.Globalization.PersianCalendar" /> class does not support the notion of a leap month.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.PersianCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.PersianCalendar" /> class.</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.PersianCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.PersianCalendar" /> class.</returns>
    </member>
    <member name="F:System.Globalization.PersianCalendar.PersianEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> object that is set to the specified date, time, and era.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year.</param>
      <param name="month">An integer from 1 through 12 that represents the month.</param>
      <param name="day">An integer from 1 through 31 that represents the day.</param>
      <param name="hour">An integer from 0 through 23 that represents the hour.</param>
      <param name="minute">An integer from 0 through 59 that represents the minute.</param>
      <param name="second">An integer from 0 through 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 through 999 that represents the millisecond.</param>
      <param name="era">An integer from 0 through 1 that represents the era.</param>
      <returns>A <see cref="T:System.DateTime" /> object that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, <paramref name="millisecond" />, or <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year representation.</summary>
      <param name="year">An integer from 1 through 9378 that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 0 or greater than 9378.</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">This calendar is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than 100 or greater than 9378.</exception>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>Contains information about the country/region.</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class based on the country/region associated with the specified culture identifier.</summary>
      <param name="culture">A culture identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="culture" /> specifies either an invariant, custom, or neutral culture.</exception>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class based on the country/region or specific culture, specified by name.</summary>
      <param name="name">A string that contains a two-letter code defined in ISO 3166 for country/region.  
 -or-  
 A string that contains the culture name for a specific culture, custom culture, or Windows-only culture. If the culture name is not in RFC 4646 format, your application should specify the entire culture name instead of just the country/region.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid country/region name or specific culture name.</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyEnglishName">
      <summary>Gets the name, in English, of the currency used in the country/region.</summary>
      <returns>The name, in English, of the currency used in the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyNativeName">
      <summary>Gets the name of the currency used in the country/region, formatted in the native language of the country/region.</summary>
      <returns>The native name of the currency used in the country/region, formatted in the language associated with the ISO 3166 country/region code.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>Gets the currency symbol associated with the country/region.</summary>
      <returns>The currency symbol associated with the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>Gets the <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.</summary>
      <returns>The <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>Gets the full name of the country/region in the language of the localized version of .NET Framework.</summary>
      <returns>The full name of the country/region in the language of the localized version of .NET Framework.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>Gets the full name of the country/region in English.</summary>
      <returns>The full name of the country/region in English.</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is the same instance as the current <see cref="T:System.Globalization.RegionInfo" />.</summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.RegionInfo" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.RegionInfo" /> object and its <see cref="P:System.Globalization.RegionInfo.Name" /> property is the same as the <see cref="P:System.Globalization.RegionInfo.Name" /> property of the current <see cref="T:System.Globalization.RegionInfo" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.GeoId">
      <summary>Gets a unique identification number for a geographical region, country, city, or location.</summary>
      <returns>A 32-bit signed number that uniquely identifies a geographical location.</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.RegionInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.RegionInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>Gets a value indicating whether the country/region uses the metric system for measurements.</summary>
      <returns>
        <see langword="true" /> if the country/region uses the metric system for measurements; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>Gets the three-character ISO 4217 currency symbol associated with the country/region.</summary>
      <returns>The three-character ISO 4217 currency symbol associated with the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>Gets the name or ISO 3166 two-letter country/region code for the current <see cref="T:System.Globalization.RegionInfo" /> object.</summary>
      <returns>The value specified by the <paramref name="name" /> parameter of the <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> constructor. The return value is in uppercase.  
 -or-  
 The two-letter code defined in ISO 3166 for the country/region specified by the <paramref name="culture" /> parameter of the <see cref="M:System.Globalization.RegionInfo.#ctor(System.Int32)" /> constructor. The return value is in uppercase.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>Gets the name of a country/region formatted in the native language of the country/region.</summary>
      <returns>The native name of the country/region formatted in the language associated with the ISO 3166 country/region code.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterISORegionName">
      <summary>Gets the three-letter code defined in ISO 3166 for the country/region.</summary>
      <returns>The three-letter code defined in ISO 3166 for the country/region.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName">
      <summary>Gets the three-letter code assigned by Windows to the country/region represented by this <see cref="T:System.Globalization.RegionInfo" />.</summary>
      <returns>The three-letter code assigned by Windows to the country/region represented by this <see cref="T:System.Globalization.RegionInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>Returns a string containing the culture name or ISO 3166 two-letter country/region codes specified for the current <see cref="T:System.Globalization.RegionInfo" />.</summary>
      <returns>A string containing the culture name or ISO 3166 two-letter country/region codes defined for the current <see cref="T:System.Globalization.RegionInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>Gets the two-letter code defined in ISO 3166 for the country/region.</summary>
      <returns>The two-letter code defined in ISO 3166 for the country/region.</returns>
    </member>
    <member name="T:System.Globalization.SortKey">
      <summary>Represents the result of mapping a string to its sort key.</summary>
    </member>
    <member name="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)">
      <summary>Compares two sort keys.</summary>
      <param name="sortkey1">The first sort key to compare.</param>
      <param name="sortkey2">The second sort key to compare.</param>
      <returns>A signed integer that indicates the relationship between <paramref name="sortkey1" /> and <paramref name="sortkey2" />.  
  Value  

  Condition  

  Less than zero  

 <paramref name="sortkey1" /> is less than <paramref name="sortkey2" />.  

  Zero  

 <paramref name="sortkey1" /> is equal to <paramref name="sortkey2" />.  

  Greater than zero  

 <paramref name="sortkey1" /> is greater than <paramref name="sortkey2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortkey1" /> or <paramref name="sortkey2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.SortKey.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.SortKey" /> object.</summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.SortKey" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is equal to the current <see cref="T:System.Globalization.SortKey" /> object; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.SortKey.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.SortKey" /> object that is suitable for hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.SortKey" /> object.</returns>
    </member>
    <member name="P:System.Globalization.SortKey.KeyData">
      <summary>Gets the byte array representing the current <see cref="T:System.Globalization.SortKey" /> object.</summary>
      <returns>A byte array representing the current <see cref="T:System.Globalization.SortKey" /> object.</returns>
    </member>
    <member name="P:System.Globalization.SortKey.OriginalString">
      <summary>Gets the original string used to create the current <see cref="T:System.Globalization.SortKey" /> object.</summary>
      <returns>The original string used to create the current <see cref="T:System.Globalization.SortKey" /> object.</returns>
    </member>
    <member name="M:System.Globalization.SortKey.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Globalization.SortKey" /> object.</summary>
      <returns>A string that represents the current <see cref="T:System.Globalization.SortKey" /> object.</returns>
    </member>
    <member name="T:System.Globalization.SortVersion">
      <summary>Provides information about the version of Unicode used to compare and order strings.</summary>
    </member>
    <member name="M:System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Globalization.SortVersion" /> class.</summary>
      <param name="fullVersion">A version number.</param>
      <param name="sortId">A sort ID.</param>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Globalization.SortVersion" /> instance is equal to a specified <see cref="T:System.Globalization.SortVersion" /> object.</summary>
      <param name="other">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> represents the same version as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Object)">
      <summary>Returns a value that indicates whether this <see cref="T:System.Globalization.SortVersion" /> instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Globalization.SortVersion" /> object that represents the same version as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.FullVersion">
      <summary>Gets the full version number of the <see cref="T:System.Globalization.SortVersion" /> object.</summary>
      <returns>The version number of this <see cref="T:System.Globalization.SortVersion" /> object.</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>Indicates whether two <see cref="T:System.Globalization.SortVersion" /> instances are equal.</summary>
      <param name="left">The first instance to compare.</param>
      <param name="right">The second instance to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>Indicates whether two <see cref="T:System.Globalization.SortVersion" /> instances are not equal.</summary>
      <param name="left">The first instance to compare.</param>
      <param name="right">The second instance to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.SortId">
      <summary>Gets a globally unique identifier for this <see cref="T:System.Globalization.SortVersion" /> object.</summary>
      <returns>A globally unique identifier for this <see cref="T:System.Globalization.SortVersion" /> object.</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>Provides functionality to split a string into text elements and to iterate through those text elements.</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class.</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.StringInfo" /> class to a specified string.</summary>
      <param name="value">A string to initialize this <see cref="T:System.Globalization.StringInfo" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Globalization.StringInfo" /> object is equal to a specified object.</summary>
      <param name="value">An object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is a <see cref="T:System.Globalization.StringInfo" /> object and its <see cref="P:System.Globalization.StringInfo.String" /> property equals the <see cref="P:System.Globalization.StringInfo.String" /> property of this <see cref="T:System.Globalization.StringInfo" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>Calculates a hash code for the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>A 32-bit signed integer hash code based on the string value of this <see cref="T:System.Globalization.StringInfo" /> object.</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>Gets the first text element in a specified string.</summary>
      <param name="str">The string from which to get the text element.</param>
      <returns>A string containing the first text element in the specified string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>Gets the text element at the specified index of the specified string.</summary>
      <param name="str">The string from which to get the text element.</param>
      <param name="index">The zero-based index at which the text element starts.</param>
      <returns>A string containing the text element at the specified index of the specified string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>Returns an enumerator that iterates through the text elements of the entire string.</summary>
      <param name="str">The string to iterate through.</param>
      <returns>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the entire string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</summary>
      <param name="str">The string to iterate through.</param>
      <param name="index">The zero-based index at which to start iterating.</param>
      <returns>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the string starting at <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for <paramref name="str" />.</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>Gets the number of text elements in the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>The number of base characters, surrogate pairs, and combining character sequences in this <see cref="T:System.Globalization.StringInfo" /> object.</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>Returns the indexes of each base character, high surrogate, or control character within the specified string.</summary>
      <param name="str">The string to search.</param>
      <returns>An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>Gets or sets the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</summary>
      <returns>The string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
      <summary>Retrieves a substring of text elements from the current <see cref="T:System.Globalization.StringInfo" /> object starting from a specified text element and continuing through the last text element.</summary>
      <param name="startingTextElement">The zero-based index of a text element in this <see cref="T:System.Globalization.StringInfo" /> object.</param>
      <returns>A substring of text elements in this <see cref="T:System.Globalization.StringInfo" /> object, starting from the text element index specified by the <paramref name="startingTextElement" /> parameter and continuing through the last text element in this object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> is less than zero.  
-or-  
The string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object is the empty string ("").</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
      <summary>Retrieves a substring of text elements from the current <see cref="T:System.Globalization.StringInfo" /> object starting from a specified text element and continuing through the specified number of text elements.</summary>
      <param name="startingTextElement">The zero-based index of a text element in this <see cref="T:System.Globalization.StringInfo" /> object.</param>
      <param name="lengthInTextElements">The number of text elements to retrieve.</param>
      <returns>A substring of text elements in this <see cref="T:System.Globalization.StringInfo" /> object. The substring consists of the number of text elements specified by the <paramref name="lengthInTextElements" /> parameter and starts from the text element index specified by the <paramref name="startingTextElement" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> is less than zero.  
-or-  
<paramref name="startingTextElement" /> is greater than or equal to the length of the string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object.  
-or-  
<paramref name="lengthInTextElements" /> is less than zero.  
-or-  
The string that is the value of the current <see cref="T:System.Globalization.StringInfo" /> object is the empty string ("").  
-or-  
<paramref name="startingTextElement" /> + <paramref name="lengthInTextElements" /> specify an index that is greater than the number of text elements in this <see cref="T:System.Globalization.StringInfo" /> object.</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>the Taiwan calendar.</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <exception cref="T:System.TypeInitializationException">Unable to initialize a <see cref="T:System.Globalization.TaiwanCalendar" /> object because of missing culture information.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.AlgorithmType">
      <summary>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.TaiwanCalendar" />.</summary>
      <returns>An array that consists of a single element for which the value is always the current era.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.TaiwanCalendar" /> class does not support the notion of a leap month.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week.</param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week.</param>
      <returns>A positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.  
-or-  
<paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.TaiwanCalendar" /> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.TaiwanLunisolarCalendar">
      <summary>Represents the Taiwan lunisolar calendar. As for the Taiwan calendar, years are calculated using the Gregorian calendar, while days and months are calculated using the lunisolar calendar.</summary>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> class.</summary>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year specified by the <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.Eras">
      <summary>Gets the eras that are relevant to the current <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> object.</summary>
      <returns>An array that consists of a single element having a value that is always the current era.</returns>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>Retrieves the era that corresponds to the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era specified in the <paramref name="time" /> parameter.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MaxSupportedDateTime">
      <summary>Gets the maximum date and time supported by the <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> class, which is equivalent to the last moment of February 10, 2051 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime">
      <summary>Gets the minimum date and time supported by the <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> class, which is equivalent to the first moment of February 18, 1912 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>Enumerates the text elements of a string.</summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>Gets the current text element in the string.</summary>
      <returns>An object containing the current text element in the string.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element.</exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>Gets the index of the text element that the enumerator is currently positioned over.</summary>
      <returns>The index of the text element that the enumerator is currently positioned over.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element.</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>Gets the current text element in the string.</summary>
      <returns>A new string containing the current text element in the string being read.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first text element of the string or after the last text element.</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>Advances the enumerator to the next text element of the string.</summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next text element; <see langword="false" /> if the enumerator has passed the end of the string.</returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first text element in the string.</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>Defines text properties and behaviors, such as casing, that are specific to a writing system.</summary>
    </member>
    <member name="P:System.Globalization.TextInfo.ANSICodePage">
      <summary>Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>The ANSI code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <returns>A new instance of <see cref="T:System.Object" /> that is the memberwise clone of the current <see cref="T:System.Globalization.TextInfo" /> object.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>Gets the name of the culture associated with the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <returns>The name of a culture.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.EBCDICCodePage">
      <summary>Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>The EBCDIC code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>Determines whether the specified object represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <param name="obj">The object to compare with the current <see cref="T:System.Globalization.TextInfo" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> represents the same writing system as the current <see cref="T:System.Globalization.TextInfo" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Globalization.TextInfo" />, suitable for hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Globalization.TextInfo" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsRightToLeft">
      <summary>Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo" /> object represents a writing system where text flows from right to left.</summary>
      <returns>
        <see langword="true" /> if text flows from right to left; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.LCID">
      <summary>Gets the culture identifier for the culture associated with the current <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <returns>A number that identifies the culture from which the current <see cref="T:System.Globalization.TextInfo" /> object was created.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>Gets or sets the string that separates items in a list.</summary>
      <returns>The string that separates items in a list.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is null.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current <see cref="T:System.Globalization.TextInfo" /> object is read-only.</exception>
    </member>
    <member name="P:System.Globalization.TextInfo.MacCodePage">
      <summary>Gets the Macintosh code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>The Macintosh code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.OEMCodePage">
      <summary>Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>The OEM code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)">
      <summary>Returns a read-only version of the specified <see cref="T:System.Globalization.TextInfo" /> object.</summary>
      <param name="textInfo">A <see cref="T:System.Globalization.TextInfo" /> object.</param>
      <returns>The <see cref="T:System.Globalization.TextInfo" /> object specified by the <paramref name="textInfo" /> parameter, if <paramref name="textInfo" /> is read-only.  
 -or-  
 A read-only memberwise clone of the <see cref="T:System.Globalization.TextInfo" /> object specified by <paramref name="textInfo" />, if <paramref name="textInfo" /> is not read-only.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textInfo" /> is null.</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Raises the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>Converts the specified character to lowercase.</summary>
      <param name="c">The character to convert to lowercase.</param>
      <returns>The specified character converted to lowercase.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>Converts the specified string to lowercase.</summary>
      <param name="str">The string to convert to lowercase.</param>
      <returns>The specified string converted to lowercase.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null.</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Globalization.TextInfo" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Globalization.TextInfo" />.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToTitleCase(System.String)">
      <summary>Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).</summary>
      <param name="str">The string to convert to title case.</param>
      <returns>The specified string converted to title case.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>Converts the specified character to uppercase.</summary>
      <param name="c">The character to convert to uppercase.</param>
      <returns>The specified character converted to uppercase.</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>Converts the specified string to uppercase.</summary>
      <param name="str">The string to convert to uppercase.</param>
      <returns>The specified string converted to uppercase.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null.</exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>Represents the Thai Buddhist calendar.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120000.  
-or-  
<paramref name="months" /> is greater than 120000.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTime" /> is outside the supported range.</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>Gets the list of eras in the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>An array that consists of a single element having a value that is always the current era.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified month in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of days in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>Returns the era in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era.</param>
      <returns>The return value is always 0 because the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class does not support the notion of a leap month.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>Returns the month in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Returns the number of months in the specified year in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The number of months in the specified year in the specified era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <param name="rule">One of the <see cref="T:System.Globalization.CalendarWeekRule" /> values that defines a calendar week.</param>
      <param name="firstDayOfWeek">One of the <see cref="T:System.DayOfWeek" /> values that represents the first day of the week.</param>
      <returns>A 1-based positive integer that represents the week of the year that includes the date in the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> or <paramref name="firstDayOfWeek" /> is outside the range supported by the calendar.  
-or-  
<paramref name="rule" /> is not a valid <see cref="T:System.Globalization.CalendarWeekRule" /> value.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>Returns the year in the specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>An integer that represents the year in the specified <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date in the specified era is a leap day.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year in the specified era is a leap month.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>This method always returns <see langword="false" />, unless overridden by a derived class.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer from 1 to 12 that represents the month.</param>
      <param name="day">An integer from 1 to 31 that represents the day.</param>
      <param name="hour">An integer from 0 to 23 that represents the hour.</param>
      <param name="minute">An integer from 0 to 59 that represents the minute.</param>
      <param name="second">An integer from 0 to 59 that represents the second.</param>
      <param name="millisecond">An integer from 0 to 999 that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.  
-or-  
<paramref name="month" /> is outside the range supported by the calendar.  
-or-  
<paramref name="day" /> is outside the range supported by the calendar.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.  
-or-  
<paramref name="era" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A two-digit or four-digit integer that represents the year to convert.</param>
      <returns>An integer that contains the four-digit representation of <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by the calendar.</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 99.  
 -or-  
 The value specified in a set operation is greater than <see langword="MaxSupportedDateTime.Year" />.</exception>
      <exception cref="T:System.InvalidOperationException">In a set operation, the current instance is read-only.</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>Defines the formatting options that customize string parsing for the <see cref="Overload:System.TimeSpan.ParseExact" /> and <see cref="Overload:System.TimeSpan.TryParseExact" /> methods.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>Indicates that input is always interpreted as a negative time interval.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>Indicates that input is interpreted as a negative time interval only if a negative sign is present.</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>Represents the Saudi Hijri (Um Al Qura) calendar.</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>Calculates a date that is a specified number of months away from a specified initial date.</summary>
      <param name="time">The date to which to add months. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <param name="months">The positive or negative number of months to add.</param>
      <returns>The date yielded by adding the number of months specified by the <paramref name="months" /> parameter to the date specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> is less than -120,000 or greater than 120,000.  
-or-  
<paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>Calculates a date that is a specified number of years away from a specified initial date.</summary>
      <param name="time">The date to which to add years. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <param name="years">The positive or negative number of years to add.</param>
      <returns>The date yielded by adding the number of years specified by the <paramref name="years" /> parameter to the date specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The resulting date is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> is less than -10,000 or greater than 10,000.  
-or-  
<paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.AlgorithmType">
      <summary>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</summary>
      <returns>Always returns <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />.</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>Gets the number of days in the year that precedes the year that is specified by the <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" /> property.</summary>
      <returns>The number of days in the year that precedes the year specified by <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" />.</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>Gets a list of the eras that are supported by the current <see cref="T:System.Globalization.UmAlQuraCalendar" />.</summary>
      <returns>An array that consists of a single element having a value that is <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>Calculates the day of the month on which a specified date occurs.</summary>
      <param name="time">The date value to read. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <returns>An integer from 1 through 30 that represents the day of the month specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>Calculates the day of the week on which a specified date occurs.</summary>
      <param name="time">The date value to read. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <returns>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>Calculates the day of the year on which a specified date occurs.</summary>
      <param name="time">The date value to read. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <returns>An integer from 1 through 355 that represents the day of the year specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified month of the specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="month">An integer from 1 through 12 that represents a month.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>The number of days in the specified month in the specified year and era. The return value is 29 in a common year and 30 in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of days in the specified year of the specified era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>Calculates the era in which a specified date occurs.</summary>
      <param name="time">The date value to read.</param>
      <returns>Always returns the <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" /> value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>Calculates the leap month for a specified year and era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>Always 0 because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support leap months.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1318 or greater than 1450.  
-or-  
<paramref name="era" /> is not <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>Calculates the month in which a specified date occurs.</summary>
      <param name="time">The date value to read. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <returns>An integer from 1 through 12 that represents the month in the date specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>Calculates the number of months in the specified year of the specified era.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see langword="UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>Always 12.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>Calculates the year of a date represented by a specified <see cref="T:System.DateTime" />.</summary>
      <param name="time">The date value to read. The <see cref="T:System.Globalization.UmAlQuraCalendar" /> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</param>
      <returns>An integer that represents the year specified by the <paramref name="time" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified date is a leap day.</summary>
      <param name="year">A year.</param>
      <param name="month">An integer from 1 through 12 that represents a month.</param>
      <param name="day">An integer from 1 through 30 that represents a day.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>
        <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />. The return value is always <see langword="false" /> because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support leap days.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>Determines whether the specified month in the specified year and era is a leap month.</summary>
      <param name="year">A year.</param>
      <param name="month">An integer from 1 through 12 that represents a month.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>Always <see langword="false" /> because the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class does not support leap months.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>Determines whether the specified year in the specified era is a leap year.</summary>
      <param name="year">A year.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>
        <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>Gets the latest date and time supported by this calendar.</summary>
      <returns>The latest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the last moment of November 16, 2077 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>Gets the earliest date and time supported by this calendar.</summary>
      <returns>The earliest date and time supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class, which is equivalent to the first moment of April 30, 1900 C.E. in the Gregorian calendar.</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:System.DateTime" /> that is set to the specified date, time, and era.</summary>
      <param name="year">A year.</param>
      <param name="month">An integer from 1 through 12 that represents a month.</param>
      <param name="day">An integer from 1 through 29 that represents a day.</param>
      <param name="hour">An integer from 0 through 23 that represents an hour.</param>
      <param name="minute">An integer from 0 through 59 that represents a minute.</param>
      <param name="second">An integer from 0 through 59 that represents a second.</param>
      <param name="millisecond">An integer from 0 through 999 that represents a millisecond.</param>
      <param name="era">An era. Specify <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> or <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
      <returns>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, or <paramref name="era" /> is outside the range supported by the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.  
-or-  
<paramref name="hour" /> is less than zero or greater than 23.  
-or-  
<paramref name="minute" /> is less than zero or greater than 59.  
-or-  
<paramref name="second" /> is less than zero or greater than 59.  
-or-  
<paramref name="millisecond" /> is less than zero or greater than 999.</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>Converts the specified year to a four-digit year by using the <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</summary>
      <param name="year">A 2-digit year from 0 through 99, or a 4-digit Um Al Qura calendar year from 1318 through 1450.</param>
      <returns>If the <paramref name="year" /> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <paramref name="year" /> parameter is a 4-digit year, the return value is the unchanged <paramref name="year" /> parameter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is outside the range supported by this calendar.</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</summary>
      <returns>The last year of a 100-year range that can be represented by a 2-digit year.</returns>
      <exception cref="T:System.InvalidOperationException">This calendar is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the Um Al Qura calendar year value is less than 1318 but not 99, or is greater than 1450.</exception>
    </member>
    <member name="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra">
      <summary>Represents the current era. This field is constant.</summary>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>Defines the Unicode category of a character.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>Closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Pe" (punctuation, close). The value is 21.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>Connector punctuation character that connects two characters. Signified by the Unicode designation "Pc" (punctuation, connector). The value is 18.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>Control code character, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F. Signified by the Unicode designation "Cc" (other, control). The value is 14.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>Currency symbol character. Signified by the Unicode designation "Sc" (symbol, currency). The value is 26.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>Dash or hyphen character. Signified by the Unicode designation "Pd" (punctuation, dash). The value is 19.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>Decimal digit character, that is, a character in the range 0 through 9. Signified by the Unicode designation "Nd" (number, decimal digit). The value is 8.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>Enclosing mark character, which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark, enclosing). The value is 7.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>Closing or final quotation mark character. Signified by the Unicode designation "Pf" (punctuation, final quote). The value is 23.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>Format character that affects the layout of text or the operation of text processes, but is not normally rendered. Signified by the Unicode designation "Cf" (other, format). The value is 15.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>Opening or initial quotation mark character. Signified by the Unicode designation "Pi" (punctuation, initial quote). The value is 22.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>Number represented by a letter, instead of a decimal digit, for example, the Roman numeral for five, which is "V". The indicator is signified by the Unicode designation "Nl" (number, letter). The value is 9.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>Character that is used to separate lines of text. Signified by the Unicode designation "Zl" (separator, line). The value is 12.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>Lowercase letter. Signified by the Unicode designation "Ll" (letter, lowercase). The value is 1.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>Mathematical symbol character, such as "+" or "= ". Signified by the Unicode designation "Sm" (symbol, math). The value is 25.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>Modifier letter character, which is free-standing spacing character that indicates modifications of a preceding letter. Signified by the Unicode designation "Lm" (letter, modifier). The value is 3.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>Modifier symbol character, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator. The indicator is signified by the Unicode designation "Sk" (symbol, modifier). The value is 27.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn" (mark, nonspacing). The value is 5.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>Opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Ps" (punctuation, open). The value is 20.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>Letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter. Signified by the Unicode designation "Lo" (letter, other). The value is 4.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>Character that is not assigned to any Unicode category. Signified by the Unicode designation "Cn" (other, not assigned). The value is 29.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>Number that is neither a decimal digit nor a letter number, for example, the fraction 1/2. The indicator is signified by the Unicode designation "No" (number, other). The value is 10.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>Punctuation character that is not a connector, a dash, open punctuation, close punctuation, an initial quote, or a final quote. Signified by the Unicode designation "Po" (punctuation, other). The value is 24.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>Symbol character that is not a mathematical symbol, a currency symbol or a modifier symbol. Signified by the Unicode designation "So" (symbol, other). The value is 28.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>Character used to separate paragraphs. Signified by the Unicode designation "Zp" (separator, paragraph). The value is 13.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>Private-use character, with a Unicode value in the range U+E000 through U+F8FF. Signified by the Unicode designation "Co" (other, private use). The value is 17.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>Space character, which has no glyph but is not a control or format character. Signified by the Unicode designation "Zs" (separator, space). The value is 11.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark, spacing combining). The value is 6.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>High surrogate or a low surrogate character. Surrogate code values are in the range U+D800 through U+DFFF. Signified by the Unicode designation "Cs" (other, surrogate). The value is 16.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>Titlecase letter. Signified by the Unicode designation "Lt" (letter, titlecase). The value is 2.</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>Uppercase letter. Signified by the Unicode designation "Lu" (letter, uppercase). The value is 0.</summary>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>A customizable parser based on the Gopher scheme.</summary>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the Gopher scheme.</summary>
    </member>
    <member name="T:System.Guid">
      <summary>Represents a globally unique identifier (GUID).</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified array of bytes.</summary>
      <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> is not 16 bytes long.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and byte array.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The remaining 8 bytes of the GUID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> is not 8 bytes long.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.ReadOnlySpan{System.Byte})">
      <param name="b" />
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the value represented by the specified string.</summary>
      <param name="g">A string that contains a GUID in one of the following formats ("d" represents a hexadecimal digit whose case is ignored):  
 32 contiguous digits:  
 dddddddddddddddddddddddddddddddd  
 -or-  
 Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:  
 dddddddd-dddd-dddd-dddd-dddddddddddd  
 -or-  
 {dddddddd-dddd-dddd-dddd-dddddddddddd}  
 -or-  
 (dddddddd-dddd-dddd-dddd-dddddddddddd)  
 -or-  
 Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
 All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.  
 The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The format of <paramref name="g" /> is invalid.</exception>
      <exception cref="T:System.OverflowException">The format of <paramref name="g" /> is invalid.</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.Byte,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified unsigned integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return value  

  Description  

  A negative integer  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  A positive integer  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return value  

  Description  

  A negative integer  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  A positive integer  

  This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>A read-only instance of the <see cref="T:System.Guid" /> structure whose value is all zeros.</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.</summary>
      <param name="g">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="g" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure.</summary>
      <returns>A new GUID object.</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are equal.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.</summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">The string to convert.</param>
      <returns>A structure that contains the value that was parsed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in a recognized format.</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="input" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <returns>A structure that contains the value that was parsed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not in the format specified by <paramref name="format" />.</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
      <returns>A 16-element byte array.</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>Returns a string representation of the value of this instance in registry format.</summary>
      <returns>The value of this <see cref="T:System.Guid" />, formatted by using the "D" format specifier as follows:  
 <c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>  
 where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal digits from a through f to uppercase, call the <see cref="M:System.String.ToUpper" /> method on the returned string.</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>Returns a string representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", "P", or "X". If <paramref name="format" /> is <see langword="null" /> or an empty string (""), "D" is used.</param>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>Returns a string representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.</summary>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", "P", or "X". If <paramref name="format" /> is <see langword="null" /> or an empty string (""), "D" is used.</param>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
    </member>
    <member name="M:System.Guid.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char})">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.TryParse(System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
      <param name="input">The GUID to convert.</param>
      <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="format" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
      <param name="input">The GUID to convert.</param>
      <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B", "P", or "X".</param>
      <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
      <returns>
        <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Guid.TryWriteBytes(System.Span{System.Byte})">
      <param name="destination" />
    </member>
    <member name="T:System.HashCode">
      <summary>Combines the hash code for multiple values into a single hash code.</summary>
    </member>
    <member name="M:System.HashCode.Add``1(``0)">
      <summary>Adds a single value to the hash code.</summary>
      <param name="value">The value to add to the hash code.</param>
      <typeparam name="T">The type of the value to add to the hash code.</typeparam>
    </member>
    <member name="M:System.HashCode.Add``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Adds a single value to the hash code, specifying the type that provides the hash code function.</summary>
      <param name="value">The value to add to the hash code.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to calculate the hash code.
This value can be a null reference (Nothing in Visual Basic), which will use the default equality comparer for
<typeparamref name="T" />.</param>
      <typeparam name="T">The type of the value to add to the hash code.</typeparam>
    </member>
    <member name="M:System.HashCode.Combine``1(``0)">
      <summary>Diffuses the hash code returned by the specified value.</summary>
      <param name="value1">The value to add to the hash code.</param>
      <typeparam name="T1">The type of the value to add the hash code.</typeparam>
      <returns>The hash code that represents the single value.</returns>
    </member>
    <member name="M:System.HashCode.Combine``2(``0,``1)">
      <summary>Combines two values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the two values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``3(``0,``1,``2)">
      <summary>Combines three values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the three values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``4(``0,``1,``2,``3)">
      <summary>Combines four values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <param name="value4">The fourth value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the four values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``5(``0,``1,``2,``3,``4)">
      <summary>Combines five values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <param name="value4">The fourth value to combine into the hash code.</param>
      <param name="value5">The fifth value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
      <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the five values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``6(``0,``1,``2,``3,``4,``5)">
      <summary>Combines six values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <param name="value4">The fourth value to combine into the hash code.</param>
      <param name="value5">The fifth value to combine into the hash code.</param>
      <param name="value6">The sixth value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
      <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
      <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the six values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Combines seven values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <param name="value4">The fourth value to combine into the hash code.</param>
      <param name="value5">The fifth value to combine into the hash code.</param>
      <param name="value6">The sixth value to combine into the hash code.</param>
      <param name="value7">The seventh value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
      <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
      <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
      <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the seven values.</returns>
    </member>
    <member name="M:System.HashCode.Combine``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Combines eight values into a hash code.</summary>
      <param name="value1">The first value to combine into the hash code.</param>
      <param name="value2">The second value to combine into the hash code.</param>
      <param name="value3">The third value to combine into the hash code.</param>
      <param name="value4">The fourth value to combine into the hash code.</param>
      <param name="value5">The fifth value to combine into the hash code.</param>
      <param name="value6">The sixth value to combine into the hash code.</param>
      <param name="value7">The seventh value to combine into the hash code.</param>
      <param name="value8">The eighth value to combine into the hash code.</param>
      <typeparam name="T1">The type of the first value to combine into the hash code.</typeparam>
      <typeparam name="T2">The type of the second value to combine into the hash code.</typeparam>
      <typeparam name="T3">The type of the third value to combine into the hash code.</typeparam>
      <typeparam name="T4">The type of the fourth value to combine into the hash code.</typeparam>
      <typeparam name="T5">The type of the fifth value to combine into the hash code.</typeparam>
      <typeparam name="T6">The type of the sixth value to combine into the hash code.</typeparam>
      <typeparam name="T7">The type of the seventh value to combine into the hash code.</typeparam>
      <typeparam name="T8">The type of the eighth value to combine into the hash code.</typeparam>
      <returns>The hash code that represents the eight values.</returns>
    </member>
    <member name="M:System.HashCode.Equals(System.Object)">
      <summary>This method is not supported and should not be called.</summary>
      <param name="obj">Ignored.</param>
      <returns>This method will always throw a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown when this method is called.</exception>
    </member>
    <member name="M:System.HashCode.GetHashCode">
      <summary>This method is not supported and should not be called.</summary>
      <returns>This method will always throw a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown when this method is called.</exception>
    </member>
    <member name="M:System.HashCode.ToHashCode">
      <summary>Calculates the final hash code after consecutive <see cref="Overload:System.HashCode.Add" /> invocations.</summary>
      <returns>The calculated hash code.</returns>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>A customizable parser based on the HTTP scheme.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>Create a customizable parser based on the HTTP scheme.</summary>
    </member>
    <member name="T:System.IAsyncDisposable">
      <summary>Provides a mechanism for releasing unmanaged resources asynchronously.</summary>
    </member>
    <member name="M:System.IAsyncDisposable.DisposeAsync">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary>
      <returns>A task that represents the asynchronous dispose operation.</returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>Represents the status of an asynchronous operation.</summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
      <returns>
        <see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
      <returns>
        <see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ICloneable">
      <summary>Supports cloning, which creates a new instance of a class with the same value as an existing instance.</summary>
    </member>
    <member name="M:System.ICloneable.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:  
  Value  

  Meaning  

  Less than zero  

  This instance precedes <paramref name="obj" /> in the sort order.  

  Zero  

  This instance occurs in the same position in the sort order as <paramref name="obj" />.  

  Greater than zero  

  This instance follows <paramref name="obj" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.</exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</summary>
      <typeparam name="T">The type of object to compare.</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:  
  Value  

  Meaning  

  Less than zero  

  This instance precedes <paramref name="other" /> in the sort order.  

  Zero  

  This instance occurs in the same position in the sort order as <paramref name="other" />.  

  Greater than zero  

  This instance follows <paramref name="other" /> in the sort order.</returns>
    </member>
    <member name="T:System.IConvertible">
      <summary>Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>Defines a method that supports custom formatting of the value of an object.</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
      <param name="format">A format string containing formatting specifications.</param>
      <param name="arg">An object to format.</param>
      <param name="formatProvider">An object that supplies format information about the current instance.</param>
      <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>Provides a mechanism for releasing unmanaged resources.</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>Provides a mechanism for retrieving an object to control formatting.</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>Returns an object that provides formatting services for the specified type.</summary>
      <param name="formatType">An object that specifies the type of format object to return.</param>
      <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>Provides functionality to format the value of an object into a string representation.</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <param name="format">The format to use.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="formatProvider">The provider to use to format the value.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="T:System.Index">
      <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
    </member>
    <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new <see cref="T:System.Index" /> with a specified index position and a value that indicates if the index is from the start or the end of a collection.</summary>
      <param name="value">The index value. It has to be greater or equal than zero.</param>
      <param name="fromEnd">A boolean indicating if the index is from the start (<see langword="false" />) or from the end (<see langword="true" />) of a collection.</param>
    </member>
    <member name="P:System.Index.End">
      <summary>Gets an <see cref="T:System.Index" /> that points beyond the last element.</summary>
      <returns>an <see cref="T:System.Index" /> that points beyond the last element.</returns>
    </member>
    <member name="M:System.Index.Equals(System.Index)">
      <summary>Returns a value that indicates whether the current object is equal to another <see cref="T:System.Index" /> object.</summary>
      <param name="other">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current Index object is equal to <paramref name="other" />; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Index.Equals(System.Object)">
      <summary>Indicates whether the current Index object is equal to a specified object.</summary>
      <param name="value">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is of type <see cref="T:System.Index" /> and is equal to the current instance; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Index.FromEnd(System.Int32)">
      <summary>Creates an <see cref="T:System.Index" /> from the end of a collection at a specified index position.</summary>
      <param name="value">The index value from the end of a collection.</param>
      <returns>The Index value.</returns>
    </member>
    <member name="M:System.Index.FromStart(System.Int32)">
      <summary>Create an <see cref="T:System.Index" /> from the specified index at the start of a collection.</summary>
      <param name="value">The index position from the start of a collection.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:System.Index.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Index.GetOffset(System.Int32)">
      <summary>Calculates the offset from the start using the given collection length.</summary>
      <param name="length">The length of the collection that the Index will be used with. Must be a positive value.</param>
      <returns>The offset.</returns>
    </member>
    <member name="P:System.Index.IsFromEnd">
      <summary>Gets a value that indicates whether the index is from the start or the end.</summary>
      <returns>
        <see langword="true" /> if the Index is from the end; otherwise, &lt;see. langword="false"&gt;&lt;/see.&gt;.</returns>
    </member>
    <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
      <summary>Converts integer number to an Index.</summary>
      <param name="value">The integer to convert.</param>
      <returns>An Index representing the integer.</returns>
    </member>
    <member name="P:System.Index.Start">
      <summary>Gets an <see cref="T:System.Index" /> that points to the first element of a collection.</summary>
      <returns>An instance that points to the first element of a collection.</returns>
    </member>
    <member name="M:System.Index.ToString">
      <summary>Returns the string representation of the current <see cref="T:System.Index" /> instance.</summary>
      <returns>The string representation of the <see cref="T:System.Index" />.</returns>
    </member>
    <member name="P:System.Index.Value">
      <summary>Gets the index value.</summary>
      <returns>The index value.</returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>The exception that is thrown when there is insufficient execution stack available to allow most methods to execute.</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class.</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientExecutionStackException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <c>inner</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InsufficientMemoryException">
      <summary>The exception that is thrown when a check for sufficient available memory fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientMemoryException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientMemoryException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InsufficientMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Int16">
      <summary>Represents a 16-bit signed integer.</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified 16-bit signed integer.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int16" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int16" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int16" />.</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Int32">
      <summary>Represents a 32-bit signed integer.</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int32" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int32" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int32" />.</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int32" /> value.</param>
      <param name="provider">An object that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Int64">
      <summary>Represents a 64-bit signed integer.</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.</summary>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Represents the largest possible value of an <see langword="Int64" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Represents the smallest possible value of an <see langword="Int64" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.  
-or-  
<paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.  
-or-  
<paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Int64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Int64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />.</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>Adds an offset to the value of a pointer.</summary>
      <param name="pointer">The pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>Adds an offset to the value of a pointer.</summary>
      <param name="pointer">The pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />.</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer.</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.  
 This API is not CLS-compliant.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of a pointer.</summary>
      <param name="pointer">The pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the <see langword="/platform" /> switch when you compile your code with the C# and Visual Basic compilers.</returns>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of a pointer.</summary>
      <param name="pointer">The pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.IntPtr" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>Converts the value of this instance to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>Converts the value of this instance to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <param name="format">A format specification that governs how the current <see cref="T:System.IntPtr" /> object is converted.</param>
      <returns>The string representation of the value of the current <see cref="T:System.IntPtr" /> object.</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>The exception that is thrown for invalid casting or explicit conversion.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with the exception.</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>The exception that is thrown when a method call is invalid for the object's current state.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with default properties.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>The exception that is thrown when time zone information is invalid.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class from serialized data.</summary>
      <param name="info">The object that contains the serialized data.</param>
      <param name="context">The stream that contains the serialized data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.  
 -or-  
 The <paramref name="context" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with the specified message string.</summary>
      <param name="message">A string that describes the exception.</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>The exception that is thrown when part of a file or directory cannot be found.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to a system-supplied message and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>Defines constants for read, write, or read/write access to a file.</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>Read access to the file. Data can be read from the file. Combine with <see langword="Write" /> for read/write access.</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>Read and write access to the file. Data can be written to and read from the file.</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>Write access to the file. Data can be written to the file. Combine with <see langword="Read" /> for read/write access.</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>Provides attributes for files and directories.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>This file is marked to be included in incremental backup operation. Windows sets this attribute whenever the file is modified, and backup software should clear it when processing the file during incremental backup.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>The file is compressed.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>The file is a directory. <see langword="Directory" /> is supported on Windows, Linux, and macOS.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>The file is hidden, and thus is not included in an ordinary directory listing. <see langword="Hidden" /> is supported on Windows, Linux, and macOS.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.IntegrityStream">
      <summary>The file or directory includes data integrity support. When this value is applied to a file, all data streams in the file have integrity support. When this value is applied to a directory, all new files and subdirectories within that directory, by default, include integrity support.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>The file is a standard file that has no special attributes. This attribute is valid only if it is used alone. <see langword="Normal" /> is supported on Windows, Linux, and macOS.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NoScrubData">
      <summary>The file or directory is excluded from the data integrity scan. When this value is applied to a directory, by default, all new files and subdirectories within that directory are excluded from data integrity.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>The file will not be indexed by the operating system's content indexing service.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>The file is offline. The data of the file is not immediately available.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>The file is read-only. <see langword="ReadOnly" /> is supported on Windows, Linux, and macOS. On Linux and macOS, changing the <see langword="ReadOnly" /> flag is a permissions operation.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>The file contains a reparse point, which is a block of user-defined data associated with a file or a directory. <see langword="ReparsePoint" /> is supported on Windows, Linux, and macOS.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>The file is a sparse file. Sparse files are typically large files whose data consists of mostly zeros.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system.</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>The file is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed.</summary>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>The exception that is thrown when a managed assembly is found but cannot be loaded.</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Could not load the specified file." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with the specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message and the name of the file that could not be loaded.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message, the name of the file that could not be loaded, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>Gets the name of the file that causes this exception.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the file with the invalid image, or a null reference if no file name was passed to the constructor for the current instance.</returns>
    </member>
    <member name="P:System.IO.FileLoadException.FusionLog">
      <summary>Gets the log file that describes why an assembly load failed.</summary>
      <returns>A string containing errors reported by the assembly cache.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.FileLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the file name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>Returns the fully qualified name of the current exception, and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>A string containing the fully qualified name of this exception, and possibly the error message, the name of the inner exception, and the stack trace, depending on which <see cref="T:System.IO.FileLoadException" /> constructor is used.</returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>Specifies how the operating system should open a file.</summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /> permission. <see langword="FileMode.Append" /> can be used only in conjunction with <see langword="FileAccess.Write" />. Trying to seek to a position before the end of the file throws an <see cref="T:System.IO.IOException" /> exception, and any attempt to read fails and throws a <see cref="T:System.NotSupportedException" /> exception.</summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. <see langword="FileMode.Create" /> is equivalent to requesting that if the file does not exist, use <see cref="F:System.IO.FileMode.CreateNew" />; otherwise, use <see cref="F:System.IO.FileMode.Truncate" />. If the file already exists but is a hidden file, an <see cref="T:System.UnauthorizedAccessException" /> exception is thrown.</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>Specifies that the operating system should create a new file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. If the file already exists, an <see cref="T:System.IO.IOException" /> exception is thrown.</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <see cref="T:System.IO.FileAccess" /> enumeration. A <see cref="T:System.IO.FileNotFoundException" /> exception is thrown if the file does not exist.</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with <see langword="FileAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> permission is required. If the file access is <see langword="FileAccess.Write" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission is required. If the file is opened with <see langword="FileAccess.ReadWrite" />, both <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permissions are required.</summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> permission. Attempts to read from a file opened with <see langword="FileMode.Truncate" /> cause an <see cref="T:System.ArgumentException" /> exception.</summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>The exception that is thrown when an attempt to access a file that does not exist on disk fails.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to a system-supplied message.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with the specified serialization and context information.</summary>
      <param name="info">An object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">An object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A description of the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message, and the file name that cannot be found.</summary>
      <param name="message">A description of the error, or <see langword="null" /> to use a system-supplied message with the given <paramref name="fileName" />. The content of <paramref name="message" /> should be understood by humans. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> class with a specified error message, the file name that cannot be found, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>Gets the name of the file that cannot be found.</summary>
      <returns>The name of the file, or <see langword="null" /> if no file name was passed to the constructor for this instance.</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.FusionLog">
      <summary>Gets the log file that describes why loading of an assembly failed.</summary>
      <returns>The errors reported by the assembly cache.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The object that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>Gets the error message that explains the reason for the exception.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</summary>
      <returns>The fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</returns>
    </member>
    <member name="T:System.IO.FileOptions">
      <summary>Represents advanced options for creating a <see cref="T:System.IO.FileStream" /> object.</summary>
    </member>
    <member name="F:System.IO.FileOptions.Asynchronous">
      <summary>Indicates that a file can be used for asynchronous reading and writing.</summary>
    </member>
    <member name="F:System.IO.FileOptions.DeleteOnClose">
      <summary>Indicates that a file is automatically deleted when it is no longer in use.</summary>
    </member>
    <member name="F:System.IO.FileOptions.Encrypted">
      <summary>Indicates that a file is encrypted and can be decrypted only by using the same user account used for encryption.</summary>
    </member>
    <member name="F:System.IO.FileOptions.None">
      <summary>Indicates that no additional options should be used when creating a <see cref="T:System.IO.FileStream" /> object.</summary>
    </member>
    <member name="F:System.IO.FileOptions.RandomAccess">
      <summary>Indicates that the file is accessed randomly. The system can use this as a hint to optimize file caching.</summary>
    </member>
    <member name="F:System.IO.FileOptions.SequentialScan">
      <summary>Indicates that the file is to be accessed sequentially from beginning to end. The system can use this as a hint to optimize file caching. If an application moves the file pointer for random access, optimum caching may not occur; however, correct operation is still guaranteed. Specifying this flag can increase performance in some cases.</summary>
    </member>
    <member name="F:System.IO.FileOptions.WriteThrough">
      <summary>Indicates that the system should write through any intermediate cache and go directly to disk.</summary>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>Contains constants for controlling the kind of access other <see cref="T:System.IO.FileStream" /> objects can have to the same file.</summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>Allows subsequent deleting of a file.</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>Makes the file handle inheritable by child processes. This is not directly supported by Win32.</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>Declines sharing of the current file. Any request to open the file (by this process or another process) will fail until the file is closed.</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>Allows subsequent opening of the file for reading. If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.</summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>Allows subsequent opening of the file for reading or writing. If this flag is not specified, any request to open the file for reading or writing (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.</summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>Allows subsequent opening of the file for writing. If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed. However, even if this flag is specified, additional permissions might still be needed to access the file.</summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>Provides a <see cref="T:System.IO.Stream" /> for a file, supporting both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, and buffer size.</summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="handle" /> parameter is an invalid handle.  
 -or-  
 The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize" /> parameter is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</summary>
      <param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="isAsync">
        <see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="handle" /> parameter is an invalid handle.  
 -or-  
 The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize" /> parameter is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission and <see langword="FileStream" /> instance ownership.</summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, and buffer size.</summary>
      <param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, buffer size, and synchronous or asynchronous state.</summary>
      <param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="isAsync">
        <see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="access" /> is less than <see langword="FileAccess.Read" /> or greater than <see langword="FileAccess.ReadWrite" /> or <paramref name="bufferSize" /> is less than or equal to 0.</exception>
      <exception cref="T:System.ArgumentException">The handle is invalid.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specifies a file that is read-only.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying <see langword="true" />, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync" /> parameter to <see langword="true" />. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A constant that determines how to open or create the file.</param>
      <param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A constant that determines how the file will be shared by processes.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
      <param name="options">A value that specifies additional file options.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.  
 -or-  
 <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation. Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.</summary>
      <param name="array">The buffer to read data into.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin reading.</param>
      <param name="numBytes">The maximum number of bytes to read.</param>
      <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>An object that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentException">The array length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file.</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.</summary>
      <param name="array">The buffer containing data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> at which to begin copying bytes to the current stream.</param>
      <param name="numBytes">The maximum number of bytes to write.</param>
      <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>An object that references the asynchronous write.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>Gets a value that indicates whether the current stream supports reading.</summary>
      <returns>
        <see langword="true" /> if the stream supports reading; <see langword="false" /> if the stream is closed or was opened with write-only access.</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>Gets a value that indicates whether the current stream supports seeking.</summary>
      <returns>
        <see langword="true" /> if the stream supports seeking; <see langword="false" /> if the stream is closed or if the <see langword="FileStream" /> was constructed from an operating-system handle such as a pipe or output to the console.</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>Gets a value that indicates whether the current stream supports writing.</summary>
      <returns>
        <see langword="true" /> if the stream supports writing; <see langword="false" /> if the stream is closed or was opened with read-only access.</returns>
    </member>
    <member name="M:System.IO.FileStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads the bytes from the current file stream and writes them to another stream, using a specified buffer size and cancellation token.</summary>
      <param name="destination">The stream to which the contents of the current file stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.FileStream.DisposeAsync">
      <summary>Asynchronously releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" />.</summary>
      <returns>A task that represents the asynchronous dispose operation.</returns>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read operation to complete. (Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</summary>
      <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
      <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> is called multiple times.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</summary>
      <param name="asyncResult">The pending asynchronous I/O request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see langword="FileStream" />.</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">
        <see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="P:System.IO.FileStream.Handle">
      <summary>Gets the operating system file handle for the file that the current <see langword="FileStream" /> object encapsulates.</summary>
      <returns>The operating system file handle for the file encapsulated by this <see langword="FileStream" /> object, or -1 if the <see langword="FileStream" /> has been closed.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.IO.FileStream.IsAsync">
      <summary>Gets a value that indicates whether the <see langword="FileStream" /> was opened asynchronously or synchronously.</summary>
      <returns>
        <see langword="true" /> if the <see langword="FileStream" /> was opened asynchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>Gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is <see langword="false" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as the file being closed, occurred.</exception>
    </member>
    <member name="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
      <summary>Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</summary>
      <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
      <param name="length">The range to be locked.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
      <exception cref="T:System.IO.IOException">The process cannot access the file because another process has locked a portion of the file.</exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>Gets the absolute path of the file opened in the <see langword="FileStream" />.</summary>
      <returns>A string that is the absolute path of the file.</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>Gets or sets the current position of this stream.</summary>
      <returns>The current position of this stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.  
-or-
 The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the position to a negative value.</exception>
      <exception cref="T:System.IO.EndOfStreamException">Attempted seeking past the end of a stream that does not support this.</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the stream and writes the data in a given buffer.</summary>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1<c>)</c> replaced by the bytes read from the current source.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which the read bytes will be placed.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Span{System.Byte})">
      <summary>Reads a sequence of bytes from the current file stream and advances the position within the file stream by the number of bytes read.</summary>
      <param name="buffer">A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current file stream.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current file stream and writes them to a byte array beginning at a specified offset, advances the position within the file stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current file stream and writes them to a memory region, advances the position within the file stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>Reads a byte from the file and advances the read position one byte.</summary>
      <returns>The byte, cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</returns>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed.</exception>
    </member>
    <member name="P:System.IO.FileStream.SafeFileHandle">
      <summary>Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</summary>
      <returns>An object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</returns>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this stream to the given value.</summary>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking.</param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>The new position in the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output.</exception>
      <exception cref="T:System.ArgumentException">Seeking is attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>Sets the length of this stream to the given value.</summary>
      <param name="value">The new length of the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set the <paramref name="value" /> parameter to less than 0.</exception>
    </member>
    <member name="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
      <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
      <param name="position">The beginning of the range to unlock.</param>
      <param name="length">The range to be unlocked.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> or <paramref name="length" /> is negative.</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the file stream.</summary>
      <param name="array">The buffer containing data to write to the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="array" /> from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.  
-or-
 Another thread may have caused an unexpected change in the position of the operating system's file handle.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The current stream instance does not support writing.</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Writes a sequence of bytes from a read-only span to the current file stream and advances the current position within this file stream by the number of bytes written.</summary>
      <param name="buffer">A region of memory. This method copies the contents of this region to the current file stream.</param>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes from a memory region to the current file stream, advances the current position within this file stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The region of memory to write data from.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte to write to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>Specifies whether the underlying handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Specifies that the handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Specifies that the handle is not inheritable by child processes.</summary>
    </member>
    <member name="T:System.IO.IOException">
      <summary>The exception that is thrown when an I/O error occurs.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source and destination for the object.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" />, its HRESULT set to COR_E_IO, and its inner exception set to <see langword="null" />.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" /> and its HRESULT user-defined.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="hresult">An integer identifying the error that has occurred.</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>The exception that is thrown when a path or fully qualified file name is longer than the system-defined maximum length.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its HRESULT set to COR_E_PATHTOOLONG.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_PATHTOOLONG.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>Specifies the position in a stream to use for seeking.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>Specifies the beginning of a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>Specifies the current position within a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>Specifies the end of a stream.</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>Provides a generic view of a sequence of bytes. This is an abstract class.</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</summary>
      <param name="buffer">The buffer to read the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</returns>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <exception cref="T:System.NotSupportedException">The current <see langword="Stream" /> implementation does not support the read operation.</exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> from which to begin writing.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</returns>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
      <exception cref="T:System.NotSupportedException">The current <see langword="Stream" /> implementation does not support the write operation.</exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
      <returns>
        <see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
      <returns>
        <see langword="true" /> if the stream supports seeking; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>Gets a value that determines whether the current stream can time out.</summary>
      <returns>A value that determines whether the current stream can time out.</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
      <returns>
        <see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>Reads the bytes from the current stream and writes them to another stream.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.  
 -or-  
 <paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.  
 -or-  
 <paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
      <summary>Asynchronously reads the bytes from the current stream and writes them to another stream.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or the destination stream is disposed.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading, or the destination stream does not support writing.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
      <summary>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> is negative or zero.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or the destination stream is disposed.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading, or the destination stream does not support writing.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> is negative or zero.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or the destination stream is disposed.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading, or the destination stream does not support writing.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified cancellation token.</summary>
      <param name="destination">The stream to which the contents of the current stream will be copied.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous copy operation.</returns>
    </member>
    <member name="M:System.IO.Stream.CreateWaitHandle">
      <summary>Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</summary>
      <returns>A reference to the allocated <see langword="WaitHandle" />.</returns>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Stream" />.</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Stream.DisposeAsync">
      <summary>Asynchronously releases the unmanaged resources used by the <see cref="T:System.IO.Stream" />.</summary>
      <returns>A task that represents the asynchronous dispose operation.</returns>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</summary>
      <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
      <returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.  
 -or-  
 The pending operation does not support reading.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</summary>
      <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A handle to the pending write operation is not available.  
 -or-  
 The pending operation does not support writing.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync">
      <summary>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous flush operation.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">A class derived from <see langword="Stream" /> does not support seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>A <see langword="Stream" /> with no backing store.</summary>
    </member>
    <member name="M:System.IO.Stream.ObjectInvariant">
      <summary>Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Span{System.Byte})">
      <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source.</param>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous read operation. The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous read operation.</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The region of memory to write the data into.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous read operation. The value of its <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or it can be 0 (zero) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out.</summary>
      <returns>A value, in milliseconds, that determines how long the stream will attempt to read before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>When overridden in a derived class, sets the position within the current stream.</summary>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
      <returns>The new position within the current stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>When overridden in a derived class, sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.Stream.Synchronized(System.IO.Stream)">
      <summary>Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to synchronize.</param>
      <returns>A thread-safe <see cref="T:System.IO.Stream" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred, such as the specified file cannot be found.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">A region of memory. This method copies the contents of this region to the current stream.</param>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The region of memory to write data from.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
      <param name="value">The byte to write to the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed.</exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out.</summary>
      <returns>A value, in milliseconds, that determines how long the stream will attempt to write before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</exception>
    </member>
    <member name="T:System.IObservable`1">
      <summary>Defines a provider for push-based notification.</summary>
      <typeparam name="T">The object that provides notification information.</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>Notifies the provider that an observer is to receive notifications.</summary>
      <param name="observer">The object that is to receive notifications.</param>
      <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
    </member>
    <member name="T:System.IObserver`1">
      <summary>Provides a mechanism for receiving push-based notifications.</summary>
      <typeparam name="T">The object that provides notification information.</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>Notifies the observer that the provider has finished sending push-based notifications.</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>Notifies the observer that the provider has experienced an error condition.</summary>
      <param name="error">An object that provides additional information about the error.</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>Provides the observer with new data.</summary>
      <param name="value">The current notification information.</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>Defines a provider for progress updates.</summary>
      <typeparam name="T">The type of progress update value.</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>Reports a progress update.</summary>
      <param name="value">The value of the updated progress.</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>Provides support for lazy initialization.</summary>
      <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the parameterless constructor of the target type is used.</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</summary>
      <param name="value">The preinitialized value to be used.</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</summary>
      <param name="isThreadSafe">
        <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the specified initialization function is used.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <param name="isThreadSafe">
        <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</summary>
      <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
      <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</summary>
      <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contains an invalid value.</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</summary>
      <returns>
        <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</summary>
      <returns>The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />). Otherwise, a string indicating that the value has not been created.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</summary>
      <returns>The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</returns>
      <exception cref="T:System.MemberAccessException">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</exception>
      <exception cref="T:System.MissingMemberException">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</exception>
      <exception cref="T:System.InvalidOperationException">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>Provides a lazy indirect reference to an object and its associated metadata for use by the Managed Extensibility Framework.</summary>
      <typeparam name="T">The type of the object referenced.</typeparam>
      <typeparam name="TMetadata">The type of the metadata.</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode.</summary>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread safety value that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object.</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="isThreadSafe">Indicates whether the <see cref="T:System.Lazy`2" /> object that is created will be thread-safe.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Lazy`2" /> class with the specified metadata and thread synchronization mode that uses the specified function to get the referenced object.</summary>
      <param name="valueFactory">A function that returns the referenced object</param>
      <param name="metadata">The metadata associated with the referenced object.</param>
      <param name="mode">The thread synchronization mode</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>Gets the metadata associated with the referenced object.</summary>
      <returns>The metadata associated with the referenced object.</returns>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>A customizable parser based on the Lightweight Directory Access Protocol (LDAP) scheme.</summary>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>Creates a customizable parser based on the Lightweight Directory Access Protocol (LDAP) scheme.</summary>
    </member>
    <member name="T:System.MarshalByRefObject">
      <summary>Enables access to objects across application domain boundaries in applications that support remoting.</summary>
    </member>
    <member name="M:System.MarshalByRefObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MarshalByRefObject" /> class.</summary>
    </member>
    <member name="M:System.MarshalByRefObject.GetLifetimeService">
      <summary>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</summary>
      <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.</returns>
      <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
    </member>
    <member name="M:System.MarshalByRefObject.InitializeLifetimeService">
      <summary>Obtains a lifetime service object to control the lifetime policy for this instance.</summary>
      <returns>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.</returns>
      <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
    </member>
    <member name="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
      <summary>Creates a shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</summary>
      <param name="cloneIdentity">
        <see langword="false" /> to delete the current <see cref="T:System.MarshalByRefObject" /> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary. A value of <see langword="false" /> is usually appropriate. <see langword="true" /> to copy the current <see cref="T:System.MarshalByRefObject" /> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</param>
      <returns>A shallow copy of the current <see cref="T:System.MarshalByRefObject" /> object.</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>The exception that is thrown when an attempt to access a class member fails.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Memory`1">
      <summary>Represents a contiguous region of memory.</summary>
      <typeparam name="T">The type of items in the <see cref="T:System.Memory`1" />.</typeparam>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[])">
      <summary>Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</summary>
      <param name="array">The array from which to create the <see cref="T:System.Memory`1" /> object.</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.
-or-
The array is covariant.</exception>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</summary>
      <param name="array">The source array.</param>
      <param name="start">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</param>
      <param name="length">The number of elements to include in the new <see cref="T:System.Memory`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.
-or-
<paramref name="start" /> is outside the bounds of the array.
-or-
<paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Memory`1.CopyTo(System.Memory{`0})">
      <summary>Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</summary>
      <param name="destination">The destination <see cref="T:System.Memory`1" /> object.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="destination" /> is less than the length of the current instance.</exception>
    </member>
    <member name="P:System.Memory`1.Empty">
      <summary>Returns an empty <see cref="T:System.Memory`1" /> object.</summary>
      <returns>An empty object.</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Memory{`0})">
      <summary>Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Memory`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Memory`1.IsEmpty">
      <summary>Indicates whether the current instance is empty.</summary>
      <returns>
        <see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Memory`1.Length">
      <summary>Gets the number of items in the current instance.</summary>
      <returns>The number of items in the current instance.</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}">
      <summary>Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</summary>
      <param name="segment">The object to convert.</param>
      <returns>The converted <see cref="T:System.ArraySegment`1" /> object.</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}">
      <summary>Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</summary>
      <param name="memory">The object to convert.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(T[])~System.Memory{`0}">
      <summary>Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</summary>
      <param name="array">The array to convert.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:System.Memory`1.Pin">
      <summary>Creates a handle for the <see cref="T:System.Memory`1" /> object.</summary>
      <returns>A handle for the <see cref="T:System.Memory`1" /> object.</returns>
      <exception cref="T:System.ArgumentException">An instance with non-primitive (non-blittable) members cannot be pinned.</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32)">
      <summary>Forms a slice out of the current memory that begins at a specified index.</summary>
      <param name="start">The index at which to begin the slice.</param>
      <returns>An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice out of the current memory starting at a specified index for a specified length.</summary>
      <param name="start">The index at which to begin the slice.</param>
      <param name="length">The number of elements to include in the slice.</param>
      <returns>An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.
-or-
<paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></exception>
    </member>
    <member name="P:System.Memory`1.Span">
      <summary>Returns a span from the current instance.</summary>
      <returns>A span created from the current <see cref="T:System.Memory`1" /> object.</returns>
    </member>
    <member name="M:System.Memory`1.ToArray">
      <summary>Copies the contents from the memory into a new array.</summary>
      <returns>An array containing the elements in the current memory.</returns>
    </member>
    <member name="M:System.Memory`1.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Memory`1" /> object.</summary>
      <returns>the string representation of this <see cref="T:System.Memory`1" /> object.</returns>
    </member>
    <member name="M:System.Memory`1.TryCopyTo(System.Memory{`0})">
      <summary>Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</summary>
      <param name="destination">The destination <see cref="T:System.Memory`1" /> object.</param>
      <returns>
        <see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a method, such as accessing a private method from partially trusted code.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Attempt to access the method failed." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>Specifies how mathematical rounding methods should process a number that is midway between two numbers.</summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>When a number is halfway between two others, it is rounded toward the nearest even number.</summary>
    </member>
    <member name="F:System.MidpointRounding.ToNegativeInfinity">
      <summary>When a number is halfway between two others, it is rounded toward the result closest to and no greater than the infinitely precise result.</summary>
    </member>
    <member name="F:System.MidpointRounding.ToPositiveInfinity">
      <summary>When a number is halfway between two others, it is rounded toward the result closest to and no less than the infinitely precise result.</summary>
    </member>
    <member name="F:System.MidpointRounding.ToZero">
      <summary>When a number is halfway between two others, it is rounded toward the result closest to and no greater in magnitude than the infinitely precise result.</summary>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a field that does not exist. If a field in a class library has been removed or renamed, recompile any assemblies that reference that library.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with the specified class name and field name.</summary>
      <param name="className">The name of the class in which access to a nonexistent field was attempted.</param>
      <param name="fieldName">The name of the field that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>Gets the text string showing the signature of the missing field, the class name, and the field name. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a class member that does not exist or that is not declared as public. If a member in a class library has been removed or renamed, recompile any assemblies that reference that library.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current <see langword="Exception" />. If <paramref name="inner" /> is not a null reference (<see langword="Nothing" /> in Visual Basic), then the current <see langword="Exception" /> is raised in a catch block handling <paramref name="inner" />.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with the specified class name and member name.</summary>
      <param name="className">The name of the class in which access to a nonexistent member was attempted.</param>
      <param name="memberName">The name of the member that cannot be accessed.</param>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>Holds the class name of the missing member.</summary>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the class name, the member name, the signature of the missing member, and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>Holds the name of the missing member.</summary>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>Gets the text string showing the class name, the member name, and the signature of the missing member.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>Holds the signature of the missing member.</summary>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a method that does not exist.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with the specified class name and method name.</summary>
      <param name="className">The name of the class in which access to a nonexistent method was attempted.</param>
      <param name="methodName">The name of the method that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.ModuleHandle">
      <summary>Represents a runtime handle for a module.</summary>
    </member>
    <member name="F:System.ModuleHandle.EmptyHandle">
      <summary>Represents an empty module handle.</summary>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.ModuleHandle)">
      <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the specified <see cref="T:System.ModuleHandle" /> structure is equal to the current <see cref="T:System.ModuleHandle" />.</summary>
      <param name="handle">The <see cref="T:System.ModuleHandle" /> structure to be compared with the current <see cref="T:System.ModuleHandle" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="handle" /> is equal to the current <see cref="T:System.ModuleHandle" /> structure; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.Object)">
      <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the specified object is a <see cref="T:System.ModuleHandle" /> structure, and equal to the current <see cref="T:System.ModuleHandle" />.</summary>
      <param name="obj">The object to be compared with the current <see cref="T:System.ModuleHandle" /> structure.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.ModuleHandle" /> structure, and is equal to the current <see cref="T:System.ModuleHandle" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)">
      <summary>Returns a runtime handle for the field identified by the specified metadata token.</summary>
      <param name="fieldToken">A metadata token that identifies a field in the module.</param>
      <returns>A <see cref="T:System.RuntimeFieldHandle" /> for the field identified by <paramref name="fieldToken" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)">
      <summary>Returns a runtime method handle for the method or constructor identified by the specified metadata token.</summary>
      <param name="methodToken">A metadata token that identifies a method or constructor in the module.</param>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> for the method or constructor identified by <paramref name="methodToken" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)">
      <summary>Returns a runtime type handle for the type identified by the specified metadata token.</summary>
      <param name="typeToken">A metadata token that identifies a type in the module.</param>
      <returns>A <see cref="T:System.RuntimeTypeHandle" /> for the type identified by <paramref name="typeToken" />.</returns>
    </member>
    <member name="P:System.ModuleHandle.MDStreamVersion">
      <summary>Gets the metadata stream version.</summary>
      <returns>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)">
      <summary>Tests whether two <see cref="T:System.ModuleHandle" /> structures are equal.</summary>
      <param name="left">The <see cref="T:System.ModuleHandle" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.ModuleHandle" /> structure to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.ModuleHandle" /> structures are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)">
      <summary>Tests whether two <see cref="T:System.ModuleHandle" /> structures are unequal.</summary>
      <param name="left">The <see cref="T:System.ModuleHandle" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:System.ModuleHandle" /> structure to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.ModuleHandle" /> structures are unequal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32)">
      <summary>Returns a runtime handle for the field identified by the specified metadata token.</summary>
      <param name="fieldToken">A metadata token that identifies a field in the module.</param>
      <returns>A <see cref="T:System.RuntimeFieldHandle" /> for the field identified by <paramref name="fieldToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a field in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> identifies a field whose parent <see langword="TypeSpec" /> has a signature containing element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty field handle.</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.</summary>
      <param name="fieldToken">A metadata token that identifies a field in the module.</param>
      <param name="typeInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="methodInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.RuntimeFieldHandle" /> for the field identified by <paramref name="fieldToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a field in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> identifies a field whose parent <see langword="TypeSpec" /> has a signature containing element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty field handle.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldToken" /> is not a valid token.</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32)">
      <summary>Returns a runtime method handle for the method or constructor identified by the specified metadata token.</summary>
      <param name="methodToken">A metadata token that identifies a method or constructor in the module.</param>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> for the method or constructor identified by <paramref name="methodToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="methodToken" /> is not a valid metadata token for a method in the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> whose signature contains element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty method handle.</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>Returns a runtime method handle for the method or constructor identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.</summary>
      <param name="methodToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="typeInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="methodInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> for the method or constructor identified by <paramref name="methodToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="methodToken" /> is not a valid metadata token for a method in the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> whose signature contains element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty method handle.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="methodToken" /> is not a valid token.</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32)">
      <summary>Returns a runtime type handle for the type identified by the specified metadata token.</summary>
      <param name="typeToken">A metadata token that identifies a type in the module.</param>
      <returns>A <see cref="T:System.RuntimeTypeHandle" /> for the type identified by <paramref name="typeToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeToken" /> is not a valid metadata token for a type in the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a type in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty type handle.</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>Returns a runtime type handle for the type identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.</summary>
      <param name="typeToken">A metadata token that identifies a type in the module.</param>
      <param name="typeInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="methodInstantiationContext">An array of <see cref="T:System.RuntimeTypeHandle" /> structures objects representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.RuntimeTypeHandle" /> for the type identified by <paramref name="typeToken" />.</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeToken" /> is not a valid metadata token for a type in the current module.  
-or-  
<paramref name="metadataToken" /> is not a token for a type in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> or <see langword="mvar" />.</exception>
      <exception cref="T:System.InvalidOperationException">The method is called on an empty type handle.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="typeToken" /> is not a valid token.</exception>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is multithreaded apartment (MTA).</summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MTAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the method for which a delegate is created.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The type of object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the static method for which a delegate is created.</param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</summary>
      <param name="follow">The delegate to combine with this delegate.</param>
      <returns>A delegate that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="follow" /> does not have the same type as this instance.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>Determines whether this multicast delegate and the specified object are equal.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>Returns the invocation list of this multicast delegate, in invocation order.</summary>
      <returns>An array of delegates whose invocation lists collectively match the invocation list of this instance.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetMethodImpl">
      <summary>Returns a static method represented by the current <see cref="T:System.MulticastDelegate" />.</summary>
      <returns>A static method represented by the current <see cref="T:System.MulticastDelegate" />.</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize this instance.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name="context">(Reserved) The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A serialization error occurred.</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</summary>
      <param name="d1">The left operand.</param>
      <param name="d2">The right operand.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</summary>
      <param name="d1">The left operand.</param>
      <param name="d2">The right operand.</param>
      <returns>
        <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</summary>
      <param name="value">The delegate to search for in the invocation list.</param>
      <returns>If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>The exception that is thrown when there is an attempt to combine two delegates based on the <see cref="T:System.Delegate" /> type instead of the <see cref="T:System.MulticastDelegate" /> type. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>A parser based on the NetPipe scheme for the "Indigo" system.</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>Create a parser based on the NetPipe scheme for the "Indigo" system.</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>A parser based on the NetTcp scheme for the "Indigo" system.</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>Create a parser based on the NetTcp scheme for the "Indigo" system.</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>A customizable parser based on the news scheme using the Network News Transfer Protocol (NNTP).</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>Create a customizable parser based on the news scheme using the Network News Transfer Protocol (NNTP).</summary>
    </member>
    <member name="T:System.NonSerializedAttribute">
      <summary>Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.NonSerializedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NonSerializedAttribute" /> class.</summary>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>The exception that is thrown when a floating-point value is positive infinity, negative infinity, or Not-a-Number (NaN).</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with the invalid number.</summary>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and the invalid number.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message, the invalid number, and a reference to the inner exception that is root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and a reference to the inner exception that is root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the invalid number and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.NotFiniteNumberException.OffendingNumber">
      <summary>Gets the invalid number that is a positive infinity, a negative infinity, or Not-a-Number (NaN).</summary>
      <returns>The invalid number.</returns>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>The exception that is thrown when a requested method or operation is not implemented.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Nullable">
      <summary>Supports a value type that can be assigned <see langword="null" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Compares the relative values of two <see cref="T:System.Nullable`1" /> objects.</summary>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
      <returns>An integer that indicates the relative values of the <paramref name="n1" /> and <paramref name="n2" /> parameters.  
  Return Value  

  Description  

  Less than zero  

  The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is <see langword="false" />, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is <see langword="true" />.  

 -or-  

 The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is less than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.  

  Zero  

  The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="false" />.  

 -or-  

 The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is equal to the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.  

  Greater than zero  

  The <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is <see langword="true" />, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is <see langword="false" />.  

 -or-  

 The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is greater than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</returns>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Indicates whether two specified <see cref="T:System.Nullable`1" /> objects are equal.</summary>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
      <returns>
        <see langword="true" /> if the <paramref name="n1" /> parameter is equal to the <paramref name="n2" /> parameter; otherwise, <see langword="false" />.  
The return value depends on the <see cref="P:System.Nullable`1.HasValue" /> and <see cref="P:System.Nullable`1.Value" /> properties of the two parameters that are compared.  
 Return Value  

 Description  

<see langword="true" /> The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="false" />.  

-or-  

The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are equal.  

<see langword="false" /> The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" /> for one parameter and <see langword="false" /> for the other parameter.  

-or-  

The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are <see langword="true" />, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are unequal.</returns>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type argument of the specified nullable type.</summary>
      <param name="nullableType">A <see cref="T:System.Type" /> object that describes a closed generic nullable type.</param>
      <returns>The type argument of the <paramref name="nullableType" /> parameter, if the <paramref name="nullableType" /> parameter is a closed generic nullable type; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>Represents a value type that can be assigned <see langword="null" />.</summary>
      <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1" /> generic type.</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Nullable`1" /> structure to the specified value.</summary>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Nullable`1" /> object is equal to a specified object.</summary>
      <param name="other">An object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter is equal to the current <see cref="T:System.Nullable`1" /> object; otherwise, <see langword="false" />.  
This table describes how equality is defined for the compared values:  
 Return Value  

 Description  

<see langword="true" /> The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />, and the <paramref name="other" /> parameter is <see langword="null" />. That is, two null values are equal by definition.  

-or-  

The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is equal to the <paramref name="other" /> parameter.  

<see langword="false" /> The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="true" />, and the <paramref name="other" /> parameter is <see langword="null" />.  

-or-  

The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="false" />, and the <paramref name="other" /> parameter is not <see langword="null" />.  

-or-  

The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is <see langword="true" />, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is not equal to the <paramref name="other" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property.</summary>
      <returns>The hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, or zero if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the default value of the underlying type.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the  <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />; otherwise, the default value of the underlying type.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the specified default value.</summary>
      <param name="defaultValue">A value to return if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</param>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />; otherwise, the <paramref name="defaultValue" /> parameter.</returns>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>Gets a value indicating whether the current <see cref="T:System.Nullable`1" /> object has a valid value of its underlying type.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Nullable`1" /> object has a value; <see langword="false" /> if the current <see cref="T:System.Nullable`1" /> object has no value.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~T">
      <summary>Defines an explicit conversion of a <see cref="T:System.Nullable`1" /> instance to its underlying value.</summary>
      <param name="value">A nullable value.</param>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property for the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(T)~System.Nullable{`0}">
      <summary>Creates a new <see cref="T:System.Nullable`1" /> object initialized to a specified value.</summary>
      <param name="value">A value type.</param>
      <returns>A <see cref="T:System.Nullable`1" /> object whose <see cref="P:System.Nullable`1.Value" /> property is initialized with the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>Returns the text representation of the value of the current <see cref="T:System.Nullable`1" /> object.</summary>
      <returns>The text representation of the value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />, or an empty string ("") if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>Gets the value of the current <see cref="T:System.Nullable`1" /> object if it has been assigned a valid underlying value.</summary>
      <returns>The value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="true" />. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Nullable`1.HasValue" /> property is <see langword="false" />.</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>The exception that is thrown when there is an attempt to dereference a null object reference.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Object">
      <summary>Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy.</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified object instances are considered equal.</summary>
      <param name="objA">The first object to compare.</param>
      <param name="objB">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />. If both <paramref name="objA" /> and <paramref name="objB" /> are null, the method returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>Gets the <see cref="T:System.Type" /> of the current instance.</summary>
      <returns>The exact runtime type of the current instance.</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>Creates a shallow copy of the current <see cref="T:System.Object" />.</summary>
      <returns>A shallow copy of the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</summary>
      <param name="objA">The first object to compare.</param>
      <param name="objB">The second object  to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Object.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>The exception that is thrown when an operation is performed on a disposed object.</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string containing the name of the disposed object.</summary>
      <param name="objectName">A string containing the name of the disposed object.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified object name and message.</summary>
      <param name="objectName">The name of the disposed object.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>Gets the message that describes the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>Gets the name of the disposed object.</summary>
      <returns>A string containing the name of the disposed object.</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>Marks the program elements that are no longer in use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with default properties.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a specified workaround message.</summary>
      <param name="message">The text string that describes alternative workarounds.</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.</summary>
      <param name="message">The text string that describes alternative workarounds.</param>
      <param name="error">
        <see langword="true" /> if the obsolete element usage generates a compiler error; <see langword="false" /> if it generates a compiler warning.</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.</summary>
      <returns>
        <see langword="true" /> if the obsolete element usage is considered an error; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>Gets the workaround message, including a description of the alternative program elements.</summary>
      <returns>The workaround text string.</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>The exception that is thrown when there is not enough memory to continue the execution of a program.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>The exception that is thrown when a feature does not run on a particular platform.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The text message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</summary>
      <param name="obj">The object to compare against the criteria defined within the method represented by this delegate.</param>
      <typeparam name="T">The type of the object to compare.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Range">
      <summary>Represents a range that has start and end indexes.</summary>
    </member>
    <member name="M:System.Range.#ctor(System.Index,System.Index)">
      <summary>Instantiates a new <see cref="T:System.Range" /> instance with the specified starting and ending indexes.</summary>
      <param name="start">The inclusive start index of the range.</param>
      <param name="end">The exclusive end index of the range.</param>
    </member>
    <member name="P:System.Range.All">
      <summary>Gets a <see cref="T:System.Range" /> object that starts from the first element to the end.</summary>
      <returns>A range from the start to the end.</returns>
    </member>
    <member name="P:System.Range.End">
      <summary>Gets an <see cref="T:System.Index" /> that represents the exclusive end index of the range.</summary>
      <returns>The end index of the range.</returns>
    </member>
    <member name="M:System.Range.EndAt(System.Index)">
      <summary>Creates a <see cref="T:System.Range" /> object starting from the first element in the collection to a specified end index.</summary>
      <param name="end">The position of the last element up to which the <see cref="T:System.Range" /> object will be created.</param>
      <returns>A range that starts from the first element to <paramref name="end" />.</returns>
    </member>
    <member name="M:System.Range.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="value">An object to compare with this Range object.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is of type <see cref="T:System.Range" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Range.Equals(System.Range)">
      <summary>Returns a value that indicates whether the current instance is equal to another <see cref="T:System.Range" /> object.</summary>
      <param name="other">A Range object to compare with this Range object.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Range.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
      <summary>Calculates the start offset and length of the range object using a collection length.</summary>
      <param name="length">The length of the collection that the range will be used with. <paramref name="length" /> has to be a positive value.</param>
    </member>
    <member name="P:System.Range.Start">
      <summary>Gets the inclusive start index of the <see cref="T:System.Range" />.</summary>
      <returns>The inclusive start index of the range.</returns>
    </member>
    <member name="M:System.Range.StartAt(System.Index)">
      <summary>Returns a new <see cref="T:System.Range" /> instance starting from a specified start index to the end of the collection.</summary>
      <param name="start">The position of the first element from which the Range will be created.</param>
      <returns>A range from <paramref name="start" /> to the end of the collection.</returns>
    </member>
    <member name="M:System.Range.ToString">
      <summary>Returns the string representation of the current <see cref="T:System.Range" /> object.</summary>
      <returns>The string representation of the range.</returns>
    </member>
    <member name="T:System.RankException">
      <summary>The exception that is thrown when an array with the wrong number of dimensions is passed to a method.</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class.</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ReadOnlyMemory`1">
      <summary>Represents a contiguous region of memory, similar to <see cref="T:System.ReadOnlySpan`1" />. Unlike <see cref="T:System.ReadOnlySpan`1" />, it is not a byref-like type.</summary>
      <typeparam name="T">The object type from which the contiguous region of memory will be read.</typeparam>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[])">
      <summary>Creates a new memory region over the entirety of the target array.</summary>
      <param name="array">The target array.</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> is covariant, and the type of array is not exactly <see langword="T[]" />.</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Creates a new memory region over the portion of the target array beginning at a specified position and including a specified number of elements.</summary>
      <param name="array">The target array.</param>
      <param name="start">The index at which to begin the memory region.</param>
      <param name="length">The number of items in the memory region.</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> is covariant, and the type of array is not exactly <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> identify a position outside the range of the array.</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.CopyTo(System.Memory{`0})">
      <summary>Copies the contents of the read-only memory region into a destination memory region.</summary>
      <param name="destination">The memory region to copy items into.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is smaller than the source memory region.</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Empty">
      <summary>Gets an empty <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns>An empty read-only memory region.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current read-only memory region.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.ReadOnlyMemory{`0})">
      <summary>Determines whether the current instance and a specified <see cref="T:System.ReadOnlyMemory`1" /> objects are equal.</summary>
      <param name="other">The read-only memory to compare.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.IsEmpty">
      <summary>Gets a value that indicates whether this read-only memory region is empty.</summary>
      <returns>
        <see langword="true" /> if the read-only memory region is empty (that is, its <see cref="P:System.ReadOnlyMemory`1.Length" /> is 0); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Length">
      <summary>Gets the number of items in the memory region.</summary>
      <returns>The number of items in the memory region.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlyMemory{`0}">
      <summary>Defines an implicit conversion of a <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="segment">The array segment to convert.</param>
      <returns>A read-only memory representation of the array segment.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(T[])~System.ReadOnlyMemory{`0}">
      <summary>Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="array">An array of type T to convert.</param>
      <returns>The read-only memory representation of the array of type T.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Pin">
      <summary>Creates a handle for the memory.</summary>
      <returns>A handle for the memory.</returns>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned.</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32)">
      <summary>Forms a slice out of the given memory region, beginning at a specified poisition and continuing to its end.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <returns>A read-only memory region representing the desired slice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is less than 0 or greater than <see cref="P:System.ReadOnlyMemory`1.Length" />.</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice out of the given memory region starting at <paramref name="start" /> position for <paramref name="length" /> elements.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="length">The desired length for the slice.</param>
      <returns>A read-only memory region representing the desired slice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" />, or <paramref name="start" /> + <paramref name="length" /> are outside the range of the current instance.</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Span">
      <summary>Gets a span from the memory region.</summary>
      <returns>A memory span.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToArray">
      <summary>Copies the contents from the memory region into a new array.</summary>
      <returns>An array.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToString">
      <summary>Returns the string representation of this read-only memory instance.</summary>
      <returns>For <see cref="T:System.ReadOnlyMemory`1" />, returns a new instance of string that represents the characters pointed to by the memory. Otherwise, returns a <see cref="T:System.String" /> with the name of the type and the number of elements.</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.TryCopyTo(System.Memory{`0})">
      <summary>Tries to copy the contents of the readonly-only memory into the destination and returns a value that indicates whether the copy operation succeeded.</summary>
      <param name="destination">The memory region to copy items into.</param>
      <returns>
        <see langword="true" /> if the copy operation succeeded. <see langword="false" /> if <paramref name="destination" /> is smaller than the current instance, and no data is written to <paramref name="destination" />.</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1">
      <summary>Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</summary>
      <typeparam name="T">The type of items in the <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[])">
      <summary>Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</summary>
      <param name="array">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</summary>
      <param name="array">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</param>
      <param name="start">The index of the first element to include.</param>
      <param name="length">The number of elements to include.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.
-or-
<paramref name="start" /> is outside the bounds of the array.
-or-
<paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)">
      <summary>Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of <typeparamref name="T" /> elements starting at a specified memory address.</summary>
      <param name="pointer">A pointer to the starting address of a specified number of <typeparamref name="T" /> elements in memory.</param>
      <param name="length">The number of <typeparamref name="T" /> elements to be included in the <see cref="T:System.ReadOnlySpan`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is negative.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})">
      <summary>Copies the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a destination <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The span to copy items into.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is shorter than the source <see cref="T:System.ReadOnlySpan`1" />.</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Empty">
      <summary>Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <returns>An empty <see cref="T:System.ReadOnlySpan`1" />.</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1.Enumerator">
      <summary>Provides an enumerator for the elements of a <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.ReadOnlySpan`1.Enumerator.Current">
      <summary>Gets a reference to the item at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.ReadOnlySpan`1" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next item of the <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <returns>
        <see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Equals(System.Object)">
      <summary>Not supported. Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <param name="obj">Not supported.</param>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetEnumerator">
      <summary>Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <returns>An enumerator for this read-only span.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetHashCode">
      <summary>Not supported. Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetPinnableReference" />
    <member name="P:System.ReadOnlySpan`1.IsEmpty">
      <summary>Returns a value that indicates the current read-only span is empty.</summary>
      <returns>
        <see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Item(System.Int32)">
      <summary>Gets an item from the read-only span at the specified zero-based index.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element from the read-only span.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Length">
      <summary>The number of items in the read-only span.</summary>
      <returns>The number of items.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</summary>
      <param name="left">The first span to compare.</param>
      <param name="right">The second span to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}">
      <summary>Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="segment">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</param>
      <returns>A read-only span that corresponds to the array segment.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(T[])~System.ReadOnlySpan{`0}">
      <summary>Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="array">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</param>
      <returns>The read-only span that corresponds to <paramref name="array" />.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</summary>
      <param name="left">The first read-only span to compare.</param>
      <param name="right">The second read-only span to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32)">
      <summary>Forms a slice out of the current read-only span that begins at a specified index.</summary>
      <param name="start">The index at which to begin the slice.</param>
      <returns>A span that consists of all elements of the current span from <paramref name="start" /> to the end of the span.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is greater than the number of items in the read-only span.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice out of the current read-only span starting at a specified index for a specified length.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="length">The desired length for the slice.</param>
      <returns>A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="start" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is less than zero or greater than <see cref="P:System.Span`1.Length" />.</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToArray">
      <summary>Copies the contents of this read-only span into a new array.</summary>
      <returns>An array containing the data in the current span.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToString">
      <summary>Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <returns>The string representation of this instance.</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})">
      <summary>Attempts to copy the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a <see cref="T:System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</summary>
      <param name="destination">The target of the copy operation.</param>
      <returns>
        <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>The exception that is thrown when binding to a member results in more than one member matching the binding criteria. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with an empty message string and the root cause exception set to <see langword="null" />.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with its message string set to the given message and the root cause exception set to <see langword="null" />.</summary>
      <param name="message">A string indicating the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</summary>
    </member>
    <member name="M:System.Reflection.Assembly.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Assembly" /> class.</summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName" /> object.</summary>
      <returns>The location of the assembly as specified originally.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</summary>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate.</param>
      <returns>An instance of the specified type created with the parameterless constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.  
-or-  
The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</summary>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</param>
      <returns>An instance of the specified type created with the parameterless constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.  
-or-  
The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</summary>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="args">An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the parameterless constructor is desired, <paramref name="args" /> must be an empty array or <see langword="null" />.</param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. (This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</param>
      <returns>An instance of the specified type, or <see langword="null" /> if <paramref name="typeName" /> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.  
-or-  
The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found.</exception>
      <exception cref="T:System.NotSupportedException">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="typeName" /> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>Creates the name of a type qualified by the display name of its assembly.</summary>
      <param name="assemblyName">The display name of an assembly.</param>
      <param name="typeName">The full name of a type.</param>
      <returns>The full name of the type qualified by the display name of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.CustomAttributes">
      <summary>Gets a collection that contains this assembly's custom attributes.</summary>
      <returns>A collection that contains this assembly's custom attributes.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.DefinedTypes">
      <summary>Gets a collection of the types defined in this assembly.</summary>
      <returns>A collection of the types defined in this assembly.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>Gets the entry point of this assembly.</summary>
      <returns>An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), <see langword="null" /> is returned.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>Determines whether this assembly and the specified object are equal.</summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>Gets the URI, including escape characters, that represents the codebase.</summary>
      <returns>A URI with escape characters.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ExportedTypes">
      <summary>Gets a collection of the public types defined in this assembly that are visible outside the assembly.</summary>
      <returns>A collection of the public types defined in this assembly that are visible outside the assembly.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>Gets the display name of the assembly.</summary>
      <returns>The display name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>Gets the currently loaded assembly in which the specified type is defined.</summary>
      <param name="type">An object representing a type in the assembly that will be returned.</param>
      <returns>The assembly in which the specified type is defined.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</summary>
      <returns>The <see langword="Assembly" /> object of the method that invoked the currently executing method.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes for this assembly.</summary>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</param>
      <returns>An array that contains the custom attributes for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes for this assembly as specified by type.</summary>
      <param name="attributeType">The type for which the custom attributes are to be returned.</param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</param>
      <returns>An array that contains the custom attributes for this assembly as specified by <paramref name="attributeType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a runtime type.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributesData">
      <summary>Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Assembly" />, expressed as <see cref="T:System.Reflection.CustomAttributeData" /> objects.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</summary>
      <returns>The assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />. Can return <see langword="null" /> when called from unmanaged code.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>Gets the assembly that contains the code that is currently executing.</summary>
      <returns>The assembly that contains the code that is currently executing.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>Gets the public types defined in this assembly that are visible outside the assembly.</summary>
      <returns>An array that represents the types defined in this assembly that are visible outside the assembly.</returns>
      <exception cref="T:System.NotSupportedException">The assembly is a dynamic assembly.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Unable to load a dependent assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <param name="name">The name of the specified file. Do not include the path to the file.</param>
      <returns>A stream that contains the specified file, or <see langword="null" /> if the file is not found.</returns>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>Gets the files in the file table of an assembly manifest.</summary>
      <returns>An array of streams that contain the files.</returns>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found.</exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>An array of streams that contain the files.</returns>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found.</exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetForwardedTypes" />
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>Gets all the loaded modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>Returns information about how the given resource has been persisted.</summary>
      <param name="resourceName">The case-sensitive name of the resource.</param>
      <returns>An object that is populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="resourceName" /> parameter is an empty string ("").</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>Returns the names of all the resources in this assembly.</summary>
      <returns>An array that contains the names of all the resources.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <param name="name">The case-sensitive name of the manifest resource being requested.</param>
      <returns>The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  


            

 A file that was found could not be loaded.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly.</exception>
      <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <param name="type">The type whose namespace is used to scope the manifest resource name.</param>
      <param name="name">The case-sensitive name of the manifest resource being requested.</param>
      <returns>The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly.</exception>
      <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>Gets the specified module in this assembly.</summary>
      <param name="name">The name of the module being requested.</param>
      <returns>The module being requested, or <see langword="null" /> if the module is not found.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>Gets all the modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The module to be loaded does not specify a file name extension.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>Gets all the modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</summary>
      <returns>An object that contains the fully parsed display name for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</summary>
      <param name="copiedName">
        <see langword="true" /> to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; <see langword="false" /> to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location.</param>
      <returns>An object that contains the fully parsed display name for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with all of the data needed to reinstantiate this assembly.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> objects for all the assemblies referenced by this assembly.</summary>
      <returns>An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <param name="culture">The specified culture.</param>
      <returns>The specified satellite assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found.</exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <param name="culture">The specified culture.</param>
      <param name="version">The version of the satellite assembly.</param>
      <returns>The specified satellite assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found.</exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</summary>
      <param name="name">The full name of the type.</param>
      <returns>An object that represents the specified class, or <see langword="null" /> if the class is not found.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  

          
          <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.  
 -or-  
 The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</summary>
      <param name="name">The full name of the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</param>
      <returns>An object that represents the specified class.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.  
-or-  
The length of <paramref name="name" /> exceeds 1024 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</summary>
      <param name="name">The full name of the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</param>
      <returns>An object that represents the specified class.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.  
-or-  
The length of <paramref name="name" /> exceeds 1024 characters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>Gets the types defined in this assembly.</summary>
      <returns>An array that contains all the types that are defined in this assembly.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The assembly contains one or more types that cannot be loaded. The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and <see langword="null" /> for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
      <summary>Gets a value indicating whether the assembly was loaded from the global assembly cache.</summary>
      <returns>
        <see langword="true" /> if the assembly was loaded from the global assembly cache; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.HostContext">
      <summary>Gets the host context with which the assembly was loaded.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the host context with which the assembly was loaded, if any.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</summary>
      <returns>The CLR version folder name. This is not a full path.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsCollectible">
      <summary>Gets a value that indicates whether this assembly is held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.</summary>
      <returns>
        <see langword="true" /> if this assembly is held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether or not a specified attribute has been applied to the assembly.</summary>
      <param name="attributeType">The type of the attribute to be checked for this assembly.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <see langword="true" /> if the attribute has been applied to the assembly; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> uses an invalid type.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</summary>
      <returns>
        <see langword="true" /> if the current assembly was generated dynamically in the current process; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsFullyTrusted">
      <summary>Gets a value that indicates whether the current assembly is loaded with full trust.</summary>
      <returns>
        <see langword="true" /> if the current assembly is loaded with full trust; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.</summary>
      <param name="rawAssembly">A byte array that is a COFF-based image containing an emitted assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.</summary>
      <param name="rawAssembly">A byte array that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">A byte array that contains the raw bytes representing the symbols for the assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <param name="assemblyRef">The object that describes the assembly to be loaded.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  


            

 A file that was found could not be loaded.
-or-
<paramref name="assemblyRef" /> specifies a remote assembly, but the ability to execute code in remote assemblies is disabled. See &lt;loadFromRemoteSources&gt;.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> is not a valid assembly. -or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>Loads an assembly given the long form of its name.</summary>
      <param name="assemblyString">The long form of the assembly name.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is a zero-length string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFile(System.String)">
      <summary>Loads the contents of an assembly file on the specified path.</summary>
      <param name="path">The fully qualified path of the file to load.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> argument is not an absolute path.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.
-or-
The ability to execute code in remote assemblies is disabled. See &lt;loadFromRemoteSources&gt;.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The <paramref name="path" /> parameter is an empty string ("") or does not exist.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="path" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>Loads an assembly given its file name or path.</summary>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.
-or-
The ability to execute code in remote assemblies is disabled. See &lt;loadFromRemoteSources&gt;.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name exceeds the system-defined maximum length.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Loads an assembly given its file name or path, hash value, and hash algorithm.</summary>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <param name="hashValue">The value of the computed hash code.</param>
      <param name="hashAlgorithm">The hash algorithm used for hashing files and for generating the strong name.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.
-or-
The ability to execute code in remote assemblies is disabled. See &lt;loadFromRemoteSources&gt;.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  
-or-  
<paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name exceeds the system-defined maximum length.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
      <summary>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</summary>
      <param name="moduleName">The name of the module. This string must correspond to a file name in this assembly's manifest.</param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource.</param>
      <returns>The loaded module.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> is not a valid module.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.</summary>
      <param name="moduleName">The name of the module. This string must correspond to a file name in this assembly's manifest.</param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource.</param>
      <param name="rawSymbolStore">A byte array containing the raw bytes representing the symbols for the module. Must be <see langword="null" /> if this is a resource file.</param>
      <returns>The loaded module.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> is not a valid module.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
      <summary>Loads an assembly from the application directory or from the global assembly cache using a partial name.</summary>
      <param name="partialName">The display name of the assembly.</param>
      <returns>The loaded assembly. If <paramref name="partialName" /> is not found, this method returns <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="partialName" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>Gets the full path or UNC location of the loaded file that contains the manifest.</summary>
      <returns>The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> method overload, the value returned is an empty string ("").</returns>
      <exception cref="T:System.NotSupportedException">The current assembly is a dynamic assembly, represented by an <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>Gets the module that contains the manifest for the current assembly.</summary>
      <returns>The module that contains the manifest for the assembly.</returns>
    </member>
    <member name="E:System.Reflection.Assembly.ModuleResolve">
      <summary>Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</summary>
    </member>
    <member name="P:System.Reflection.Assembly.Modules">
      <summary>Gets a collection that contains the modules in this assembly.</summary>
      <returns>A collection that contains the modules in this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are equal.</summary>
      <param name="left">The assembly to compare to <paramref name="right" />.</param>
      <param name="right">The assembly to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are not equal.</summary>
      <param name="left">The assembly to compare to <paramref name="right" />.</param>
      <param name="right">The assembly to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ReflectionOnly">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether this assembly was loaded into the reflection-only context.</summary>
      <returns>
        <see langword="true" /> if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])">
      <summary>Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.</summary>
      <param name="rawAssembly">A byte array that is a COFF-based image containing an emitted assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="rawAssembly" /> cannot be loaded.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: This member is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)">
      <summary>Loads an assembly into the reflection-only context, given its display name.</summary>
      <param name="assemblyString">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is an empty string ("").</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyString" /> is found, but cannot be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: This member is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)">
      <summary>Loads an assembly into the reflection-only context, given its path.</summary>
      <param name="assemblyFile">The path of the file that contains the manifest of the assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyFile" /> is found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> is an empty string ("").</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: This member is not supported.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.SecurityRuleSet">
      <summary>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</summary>
      <returns>The security rule set that the CLR enforces for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)">
      <summary>Loads an assembly into the load-from context, bypassing some security checks.</summary>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <returns>The loaded assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.  
-or-  
<paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name exceeds the system-defined maximum length.</exception>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>Specifies an algorithm to hash all files in an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using one of the members of <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> to represent the hash algorithm.</summary>
      <param name="algorithmId">A member of <see langword="AssemblyHashAlgorithm" /> that represents the hash algorithm.</param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using an unsigned integer to represent the hash algorithm.</summary>
      <param name="algorithmId">An unsigned integer representing the hash algorithm.</param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>Gets the hash algorithm of an assembly manifest's contents.</summary>
      <returns>An unsigned integer representing the assembly hash algorithm.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>Defines a company name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> class.</summary>
      <param name="company">The company name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>Gets company name information.</summary>
      <returns>A string containing the company name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>Specifies the build configuration, such as retail or debug, for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> class.</summary>
      <param name="configuration">The assembly configuration.</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>Gets assembly configuration information.</summary>
      <returns>A string containing the assembly configuration information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyContentType">
      <summary>Provides information about the type of code contained in an assembly.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.Default">
      <summary>The assembly contains .NET Framework code.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.WindowsRuntime">
      <summary>The assembly contains Windows Runtime code.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>Defines a copyright custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> class.</summary>
      <param name="copyright">The copyright information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>Gets copyright information.</summary>
      <returns>A string containing the copyright information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>Specifies which culture the assembly supports.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute" /> class with the culture supported by the assembly being attributed.</summary>
      <param name="culture">The culture supported by the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>Gets the supported culture of the attributed assembly.</summary>
      <returns>A string containing the name of the supported culture.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>Defines a friendly default alias for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> class.</summary>
      <param name="defaultAlias">The assembly default alias information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>Gets default alias information.</summary>
      <returns>A string containing the default alias information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>Specifies that the assembly is not fully signed when created.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> class.</summary>
      <param name="delaySign">
        <see langword="true" /> if the feature this attribute represents is activated; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>Gets a value indicating the state of the attribute.</summary>
      <returns>
        <see langword="true" /> if this assembly has been built as delay-signed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>Provides a text description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> class.</summary>
      <param name="description">The assembly description.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>Gets assembly description information.</summary>
      <returns>A string containing the assembly description.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> class, specifying the file version.</summary>
      <param name="version">The file version.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Gets the Win32 file version resource name.</summary>
      <returns>A string containing the file version resource name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Specifies a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value.</summary>
      <param name="flags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>Gets an integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>Gets an unsigned integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An unsigned integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>Defines additional version information for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</summary>
      <param name="informationalVersion">The assembly version information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>Gets version information.</summary>
      <returns>A string containing the version information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>Specifies the name of a file containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AssemblyKeyFileAttribute" /> class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</summary>
      <param name="keyFile">The name of the file containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.</summary>
      <param name="keyName">The name of the container containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the container that has the relevant key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>Defines a key/value metadata pair for the decorated assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> class by using the specified metadata key and value.</summary>
      <param name="key">The metadata key.</param>
      <param name="value">The metadata value.</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>Gets the metadata key.</summary>
      <returns>The metadata key.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns>The metadata value.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>Describes an assembly's unique identity in full.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class with the specified display name.</summary>
      <param name="assemblyName">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> is a zero length string.</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  


            

 The referenced assembly could not be found, or could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>Makes a copy of this <see cref="T:System.Reflection.AssemblyName" /> object.</summary>
      <returns>An object that is a copy of this <see cref="T:System.Reflection.AssemblyName" /> object.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>Gets or sets the location of the assembly as a URL.</summary>
      <returns>A string that is the URL location of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.ContentType">
      <summary>Gets or sets a value that indicates what type of content the assembly contains.</summary>
      <returns>A value that indicates what type of content the assembly contains.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>Gets or sets the culture supported by the assembly.</summary>
      <returns>An object that represents the culture supported by the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureName">
      <summary>Gets or sets the name of the culture associated with the assembly.</summary>
      <returns>The culture name.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.EscapedCodeBase">
      <summary>Gets the URI, including escape characters, that represents the codebase.</summary>
      <returns>A URI with escape characters.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>Gets or sets the attributes of the assembly.</summary>
      <returns>A value that represents the attributes of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>Gets the full name of the assembly, also known as the display name.</summary>
      <returns>A string that is the full name of the assembly, also known as the display name.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> for a given file.</summary>
      <param name="assemblyFile">The path for the assembly whose <see cref="T:System.Reflection.AssemblyName" /> is to be returned.</param>
      <returns>An object that represents the given assembly file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> is invalid, such as an assembly with an invalid culture.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have path discovery permission.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different sets of evidence.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with all the data needed to recreate an instance of this <see langword="AssemblyName" />.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>Gets the public key of the assembly.</summary>
      <returns>A byte array that contains the public key of the assembly.</returns>
      <exception cref="T:System.Security.SecurityException">A public key was provided (for example, by using the <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> method), but no public key token was provided.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <returns>A byte array that contains the public key token.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>Gets or sets the hash algorithm used by the assembly manifest.</summary>
      <returns>The hash algorithm used by the assembly manifest.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.KeyPair">
      <summary>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</summary>
      <returns>The public and private cryptographic key pair to be used to create a strong name for the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</summary>
      <returns>The simple name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="P:System.Reflection.AssemblyName.ProcessorArchitecture">
      <summary>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</summary>
      <returns>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>Returns a value indicating whether two assembly names are the same. The comparison is based on the simple assembly names.</summary>
      <param name="reference">The reference assembly name.</param>
      <param name="definition">The assembly name that is compared to the reference assembly.</param>
      <returns>
        <see langword="true" /> if the simple assembly names are the same; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>Sets the public key identifying the assembly.</summary>
      <param name="publicKey">A byte array containing the public key of the assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <param name="publicKeyToken">A byte array containing the public key token of the assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>The full name of the assembly, or the class name if the full name cannot be determined.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>Gets or sets the major, minor, build, and revision numbers of the assembly.</summary>
      <returns>An object that represents the major, minor, build, and revision numbers of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>Gets or sets the information related to the assembly's compatibility with other assemblies.</summary>
      <returns>A value that represents information about the assembly's compatibility with other assemblies.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>Provides information about an <see cref="T:System.Reflection.Assembly" /> reference.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>Specifies that no flags are in effect.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>Specifies that a public key is formed from the full public key rather than the public key token.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher. This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>Defines a product name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute" /> class.</summary>
      <param name="product">The product name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>Gets product name information.</summary>
      <returns>A string containing the product name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>Provides migration from an older, simpler strong name key to a larger key with a stronger hashing algorithm.</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> class by using the specified public key and countersignature.</summary>
      <param name="publicKey">The public or identity key.</param>
      <param name="countersignature">The countersignature, which is the signature key portion of the strong-name key.</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>Gets the countersignature for the strong name for this assembly.</summary>
      <returns>The countersignature for this signature key.</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>Gets the public key for the strong name used to sign the assembly.</summary>
      <returns>The public key for this assembly.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>Specifies a description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute" /> class.</summary>
      <param name="title">The assembly title.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>Gets assembly title information.</summary>
      <returns>The assembly title.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>Defines a trademark custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> class.</summary>
      <param name="trademark">The trademark information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>Gets trademark information.</summary>
      <returns>A <see langword="String" /> containing trademark information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>Specifies the version of the assembly being attributed.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AssemblyVersionAttribute" /> class with the version number of the assembly being attributed.</summary>
      <param name="version">The version number of the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>Gets the version number of the attributed assembly.</summary>
      <returns>A string containing the assembly version number.</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.</summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Binder" /> class.</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>Selects a field from the given set of fields, based on the specified criteria.</summary>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="match">The set of fields that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="value">The field value used to locate a matching field.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.  
 Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <returns>The matching field.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains multiple fields that are equally good matches for <paramref name="value" />. For example, <paramref name="value" /> contains a <c>MyClass</c> object that implements the <c>IMyClass</c> interface, and <paramref name="match" /> contains a field of type <c>MyClass</c> and a field of type <c>IMyClass</c>.</exception>
      <exception cref="T:System.MissingFieldException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains no fields that can accept <paramref name="value" />.</exception>
      <exception cref="T:System.NullReferenceException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> is <see langword="null" /> or an empty array.  
 -or-  
 <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>Selects a method to invoke from the given set of methods, based on the supplied arguments.</summary>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="args">The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <paramref name="names" /> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.  
 Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <param name="names">The parameter names, if parameter names are to be considered when matching, or <see langword="null" /> if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.</param>
      <param name="state">After the method returns, <paramref name="state" /> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <paramref name="state" /> is not <see langword="null" /> when <see langword="BindToMethod" /> returns, you must pass <paramref name="state" /> to the <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> method if you want to restore <paramref name="args" /> to its original order, for example, so that you can retrieve the values of <see langword="ref" /> parameters (<see langword="ByRef" /> parameters in Visual Basic).</param>
      <returns>The matching method.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for <paramref name="args" />. For example, <paramref name="args" /> contains a <c>MyClass</c> object that implements the <c>IMyClass</c> interface, and <paramref name="match" /> contains a method that takes <c>MyClass</c> and a method that takes <c>IMyClass</c>.</exception>
      <exception cref="T:System.MissingMethodException">For the default binder, <paramref name="match" /> contains no methods that can accept the arguments supplied in <paramref name="args" />.</exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>Changes the type of the given <see langword="Object" /> to the given <see langword="Type" />.</summary>
      <param name="value">The object to change into a new <see langword="Type" />.</param>
      <param name="type">The new <see langword="Type" /> that <paramref name="value" /> will become.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.  
 Note   For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, because 1000 is represented differently by different cultures.</param>
      <returns>An object that contains the given value as the new type.</returns>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, restores the <paramref name="args" /> argument to what it was when it came from <see langword="BindToMethod" />.</summary>
      <param name="args">The actual arguments that are passed in. Both the types and values of the arguments can be changed.</param>
      <param name="state">A binder-provided object that keeps track of argument reordering.</param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a method from the given set of methods, based on the argument type.</summary>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="types">The parameter types used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <returns>The matching method, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for the parameter types described by <paramref name="types" />. For example, the array in <paramref name="types" /> contains a <see cref="T:System.Type" /> object for <c>MyClass</c> and the array in <paramref name="match" /> contains a method that takes a base class of <c>MyClass</c> and a method that takes an interface that <c>MyClass</c> implements.</exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.  
 -or-  
 An element of <paramref name="types" /> derives from <see cref="T:System.Type" />, but is not of type <see langword="RuntimeType" />.</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a property from the given set of properties, based on the specified criteria.</summary>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="match">The set of properties that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="returnType">The return value the matching property must have.</param>
      <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <returns>The matching property.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple properties that are equally good matches for <paramref name="returnType" /> and <paramref name="indexes" />.</exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is <see langword="null" /> or an empty array.</exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.  
 This flag is passed to an <see langword="InvokeMember" /> method to invoke a constructor.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>Specifies that no binding flags are defined.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DoNotWrapExceptions" />
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null <see langword="Binder" /> object, since that implies that the caller is supplying <see langword="BindToXXX" /> implementations that will pick the appropriate method. The default binder ignores this flag, while custom binders can implement the semantics of this flag.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>Specifies that the value of the specified field should be returned.  
 This flag is passed to an <see langword="InvokeMember" /> method to get a field value.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>Specifies that the value of the specified property should be returned.  
 This flag is passed to an <see langword="InvokeMember" /> method to invoke a property getter.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>Specifies that the case of the member name should not be considered when binding.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>Used in COM interop to specify that the return value of the member can be ignored.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>Specifies that instance members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.  
 This flag is passed to an <see langword="InvokeMember" /> method to invoke a method.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>Specifies that non-public members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.Parameters with default values are used only in calls where trailing arguments are omitted. They must be the last arguments.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>Specifies that public members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>Specifies that the <see langword="PROPPUT" /> member on a COM object should be invoked. <see langword="PROPPUT" /> specifies a property-setting function that uses a value. Use <see langword="PutDispProperty" /> if a property has both <see langword="PROPPUT" /> and <see langword="PROPPUTREF" /> and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>Specifies that the <see langword="PROPPUTREF" /> member on a COM object should be invoked. <see langword="PROPPUTREF" /> specifies a property-setting function that uses a reference instead of a value. Use <see langword="PutRefDispProperty" /> if a property has both <see langword="PROPPUT" /> and <see langword="PROPPUTREF" /> and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>Specifies that the value of the specified field should be set.  
 This flag is passed to an <see langword="InvokeMember" /> method to set a field value.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying <see langword="PutDispProperty" /> and <see langword="PutRefDispProperty" />.  
 This flag is passed to an <see langword="InvokeMember" /> method to invoke a property setter.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>Specifies that static members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>Not implemented.</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>Defines the valid calling conventions for a method.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>Specifies that either the <see langword="Standard" /> or the <see langword="VarArgs" /> calling convention may be used.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If <see langword="ExplicitThis" /> is set, <see langword="HasThis" /> must also be set. The first argument passed to the called method is still a <see langword="this" /> pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the <see langword="this" /> pointer is explicitly stored into its metadata signature.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the <see langword="this" /> pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use <see langword="HasThis" />.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>Specifies the calling convention for methods with variable arguments.</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>Discovers the attributes of a class constructor and provides access to constructor metadata.</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ConstructorInfo" /> class.</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>Represents the name of the class constructor method as it is stored in metadata. This name is always ".ctor". This field is read-only.</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.</summary>
      <param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or <see langword="null" />, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null" />. For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</param>
      <returns>An instance of the class associated with the constructor.</returns>
      <exception cref="T:System.MemberAccessException">The class is abstract.  
 -or-  
 The constructor is a class initializer.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permission.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a derived class, invokes the constructor reflected by this <see langword="ConstructorInfo" /> with the specified arguments, under the constraints of the specified <see langword="Binder" />.</summary>
      <param name="invokeAttr">One of the <see langword="BindingFlags" /> values that specifies the type of binding.</param>
      <param name="binder">A <see langword="Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</param>
      <param name="parameters">An array of type <see langword="Object" /> used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null" />. For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <returns>An instance of the class associated with the constructor.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor, under the constraints of the <paramref name="binder" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed.</exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permissions.</exception>
      <exception cref="T:System.MemberAccessException">The class is abstract.  
 -or-  
 The constructor is a class initializer.</exception>
      <exception cref="T:System.MethodAccessException">The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a constructor.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a constructor.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.ConstructorInfo" /> objects are equal.</summary>
      <param name="left">The first <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Inequality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.ConstructorInfo" /> objects are not equal.</summary>
      <param name="left">The first <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>Represents the name of the type constructor method as it is stored in metadata. This name is always ".cctor". This property is read-only.</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeData">
      <summary>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.AttributeType">
      <summary>Gets the type of the attribute.</summary>
      <returns>The type of the attribute.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.Constructor">
      <summary>Gets a <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor that would have initialized the custom attribute.</summary>
      <returns>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.ConstructorArguments">
      <summary>Gets the list of positional arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</summary>
      <returns>A collection of structures that represent the positional arguments specified for the custom attribute instance.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target assembly.</summary>
      <param name="target">The assembly whose custom attribute data is to be retrieved.</param>
      <returns>A list of objects that represent data about the attributes that have been applied to the target assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</summary>
      <param name="target">The member whose attribute data is to be retrieved.</param>
      <returns>A list of objects that represent data about the attributes that have been applied to the target member.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target module.</summary>
      <param name="target">The module whose custom attribute data is to be retrieved.</param>
      <returns>A list of objects that represent data about the attributes that have been applied to the target module.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target parameter.</summary>
      <param name="target">The parameter whose attribute data is to be retrieved.</param>
      <returns>A list of objects that represent data about the attributes that have been applied to the target parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.NamedArguments">
      <summary>Gets the list of named arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</summary>
      <returns>A collection of structures that represent the named arguments specified for the custom attribute instance.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.ToString">
      <summary>Returns a string representation of the custom attribute.</summary>
      <returns>A string value that represents the custom attribute.</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeExtensions">
      <summary>Contains static methods for retrieving custom attributes.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A custom attribute that matches <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A custom attribute that matches <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A custom attribute that matches <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A custom attribute that matches <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A custom attribute that matches <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A custom attribute matching <paramref name="attributeType" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A custom attribute that matches <paramref name="T" />, or <see langword="null" /> if no such attribute is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the ancestors of that member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> that match the specified criteria, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves a collection of custom attributes that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="attributeType" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <returns>A collection of the custom attributes that are applied to <paramref name="element" /> and that match <paramref name="T" />, or an empty collection if no such attributes exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified assembly.</summary>
      <param name="element">The assembly to inspect.</param>
      <param name="attributeType">The type of the attribute to search for.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified member.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally, applied to its ancestors.</summary>
      <param name="element">The member to inspect.</param>
      <param name="attributeType">The type of the attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified module.</summary>
      <param name="element">The module to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified parameter.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Indicates whether custom attributes of a specified type are applied to a specified parameter, and, optionally, applied to its ancestors.</summary>
      <param name="element">The parameter to inspect.</param>
      <param name="attributeType">The type of attribute to search for.</param>
      <param name="inherit">
        <see langword="true" /> to inspect the ancestors of <paramref name="element" />; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if an attribute of the specified type is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>The exception that is thrown when the binary format of a custom attribute is invalid.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the default properties.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the custom attribute.</param>
      <param name="context">The source and destination for the custom attribute.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.CustomAttributeNamedArgument">
      <summary>Represents a named argument of a custom attribute in the reflection-only context.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> class, which represents the specified field or property of the custom attribute, and specifies the value of the field or property.</summary>
      <param name="memberInfo">A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> object represents this member and its value.</param>
      <param name="value">The value of the field or property of the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberInfo" /> is not a field or property of the custom attribute.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> class, which represents the specified field or property of the custom attribute, and specifies a <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> object that describes the type and value of the field or property.</summary>
      <param name="memberInfo">A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> object represents this member and its value.</param>
      <param name="typedArgument">An object that describes the type and value of the field or property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.IsField">
      <summary>Gets a value that indicates whether the named argument is a field.</summary>
      <returns>
        <see langword="true" /> if the named argument is a field; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
      <summary>Gets the attribute member that would be used to set the named argument.</summary>
      <returns>The attribute member that would be used to set the named argument.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
      <summary>Gets the name of the attribute member that would be used to set the named argument.</summary>
      <returns>The name of the attribute member that would be used to set the named argument.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are equivalent.</summary>
      <param name="left">The structure to the left of the equality operator.</param>
      <param name="right">The structure to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are different.</summary>
      <param name="left">The structure to the left of the inequality operator.</param>
      <param name="right">The structure to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are different; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.ToString">
      <summary>Returns a string that consists of the argument name, the equal sign, and a string representation of the argument value.</summary>
      <returns>A string that consists of the argument name, the equal sign, and a string representation of the argument value.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
      <summary>Gets a <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure that can be used to obtain the type and value of the current named argument.</summary>
      <returns>A structure that can be used to obtain the type and value of the current named argument.</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeTypedArgument">
      <summary>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> class with the specified value.</summary>
      <param name="value">The value of the custom attribute argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> class with the specified type and value.</summary>
      <param name="argumentType">The type of the custom attribute argument.</param>
      <param name="value">The value of the custom attribute argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argumentType" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
      <summary>Gets the type of the argument or of the array argument element.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the argument or of the array element.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are equivalent.</summary>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are different.</summary>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are different; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.ToString">
      <summary>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</summary>
      <returns>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.Value">
      <summary>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</summary>
      <returns>An object that represents the value of the argument or element, or a generic <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> objects that represent the values of an array-type argument.</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>Defines the member of a type that is the default member used by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.DefaultMemberAttribute" /> class.</summary>
      <param name="memberName">A <see langword="String" /> containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty <see langword="String" /> as the name of the member.  
 The default member of a type is marked with the <see langword="DefaultMemberAttribute" /> custom attribute or marked in COM in the usual way.</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>Gets the name from the attribute.</summary>
      <returns>A string representing the member name.</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>Specifies the attributes of an event.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>Specifies that the event has no attributes.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>Specifies a reserved flag for common language runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>Specifies that the common language runtime should check name encoding.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>Specifies that the event is special in a way described by the name.</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>Discovers the attributes of an event and provides access to event metadata.</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
      <summary>Initializes a new instance of the <see langword="EventInfo" /> class.</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Adds an event handler to an event source.</summary>
      <param name="target">The event source.</param>
      <param name="handler">Encapsulates a method or methods to be invoked when the event is raised by the target.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public <see langword="add" /> accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.MethodAccessException">In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have access permission to the member.</exception>
      <exception cref="T:System.Reflection.TargetException">In .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.  
 -or-  
 The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.AddMethod">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</summary>
      <returns>A read-only <see langword="Type" /> object representing the delegate event handler.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>Returns the method used to add an event handler delegate to the event source.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</summary>
      <param name="nonPublic">
        <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods">
      <summary>Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</summary>
      <returns>An array representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive. If there are no such public methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
      <summary>Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</summary>
      <param name="nonPublic">
        <see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</param>
      <returns>An array representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive. If there are no methods matching the specification, an empty array is returned.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>Returns the method that is called when the event is raised.</summary>
      <returns>The method that is called when the event is raised.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</summary>
      <param name="nonPublic">
        <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</param>
      <returns>A <see langword="MethodInfo" /> object that was called when the event was raised.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>Returns the method used to remove an event handler delegate from the event source.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</summary>
      <param name="nonPublic">
        <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>Gets a value indicating whether the event is multicast.</summary>
      <returns>
        <see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</summary>
      <returns>
        <see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.RaiseMethod">
      <summary>Gets the method that is called when the event is raised, including non-public methods.</summary>
      <returns>The method that is called when the event is raised.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Removes an event handler from an event source.</summary>
      <param name="target">The event source.</param>
      <param name="handler">The delegate to be disassociated from the events raised by target.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public <see langword="remove" /> accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">In .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.  
 -or-  
 The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</exception>
      <exception cref="T:System.MethodAccessException">In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have access permission to the member.</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.RemoveMethod">
      <summary>Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</summary>
      <returns>The <see langword="MethodInfo" /> object for removing a method of the event.</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClause">
      <summary>Represents a clause in a structured exception-handling block.</summary>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause" /> class.</summary>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.CatchType">
      <summary>Gets the type of exception handled by this clause.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents that type of exception handled by this clause, or <see langword="null" /> if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property is <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> or <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />.</returns>
      <exception cref="T:System.InvalidOperationException">Invalid use of property for the object's current state.</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
      <summary>Gets the offset within the method body, in bytes, of the user-supplied filter code.</summary>
      <returns>The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property has any value other than <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot get the offset because the exception handling clause is not a filter.</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.Flags">
      <summary>Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</summary>
      <returns>An <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> value that indicates what kind of action this clause performs.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
      <summary>Gets the length, in bytes, of the body of this exception-handling clause.</summary>
      <returns>An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
      <summary>Gets the offset within the method body, in bytes, of this exception-handling clause.</summary>
      <returns>An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</returns>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.ToString">
      <summary>A string representation of the exception-handling clause.</summary>
      <returns>A string that lists appropriate property values for the filter clause type.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryLength">
      <summary>The total length, in bytes, of the try block that includes this exception-handling clause.</summary>
      <returns>The total length, in bytes, of the try block that includes this exception-handling clause.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryOffset">
      <summary>The offset within the method, in bytes, of the try block that includes this exception-handling clause.</summary>
      <returns>An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClauseOptions">
      <summary>Identifies kinds of exception-handling clauses.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
      <summary>The clause accepts all exceptions that derive from a specified type.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
      <summary>The clause is executed if an exception occurs, but not on completion of normal control flow.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
      <summary>The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
      <summary>The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>Specifies flags that describe the attributes of a field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>Specifies that the field is accessible throughout the assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>Specifies that the field is accessible only by subtypes in this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>Specifies that the field is accessible only by type and subtypes.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>Specifies the access level of a given field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>Specifies that the field has a default value.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>Specifies that the field has marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>Specifies that the field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>Specifies that the field is initialized only, and can be set only in the body of a constructor.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>Specifies that the field's value is a compile-time (static or early bound) constant. Any attempt to set it throws a <see cref="T:System.FieldAccessException" />.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>Specifies that the field does not have to be serialized when the type is remoted.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>Specifies that the field is accessible only by the parent type.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>Specifies that the field cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>Specifies that the field is accessible by any member for whom this scope is visible.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>Specifies a special method, with the name describing how the method is special.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>Specifies that the field represents the defined type, or else it is per-instance.</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>Discovers the attributes of a field and provides access to field metadata.</summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
      <summary>Initializes a new instance of the <see langword="FieldInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>Gets the attributes associated with this field.</summary>
      <returns>The <see langword="FieldAttributes" /> for this field.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>Gets a <see langword="RuntimeFieldHandle" />, which is a handle to the internal metadata representation of a field.</summary>
      <returns>A handle to the internal metadata representation of a field.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>Gets the type of this field object.</summary>
      <returns>The type of this field object.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</summary>
      <param name="handle">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</summary>
      <param name="handle">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</param>
      <param name="declaringType">A <see cref="T:System.RuntimeTypeHandle" /> structure that contains the handle to the generic type that defines the field.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.  
-or-  
<paramref name="declaringType" /> is not compatible with <paramref name="handle" />. For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
      <summary>Gets an array of types that identify the optional custom modifiers of the field.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the field by a compiler.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current field.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</exception>
      <exception cref="T:System.NotSupportedException">The constant value for the field is not set.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
      <summary>Gets an array of types that identify the required custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>When overridden in a derived class, returns the value of a field supported by a given object.</summary>
      <param name="obj">The object whose field value will be returned.</param>
      <returns>An object containing the value of the field reflected by this instance.</returns>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The field is non-static and <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A field is marked literal, but the field does not have one of the accepted literal types.</exception>
      <exception cref="T:System.FieldAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have permission to access this field.</exception>
      <exception cref="T:System.ArgumentException">The method is neither declared nor inherited by the class of <paramref name="obj" />.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>Returns the value of a field supported by a given object.</summary>
      <param name="obj">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</param>
      <returns>An <see langword="Object" /> containing a field value.</returns>
      <exception cref="T:System.NotSupportedException">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>
        <see langword="true" /> if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</summary>
      <returns>
        <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</summary>
      <returns>
        <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>
        <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>Gets a value indicating whether the field can only be set in the body of the constructor.</summary>
      <returns>
        <see langword="true" /> if the field has the <see langword="InitOnly" /> attribute set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>Gets a value indicating whether the value is written at compile time and cannot be changed.</summary>
      <returns>
        <see langword="true" /> if the field has the <see langword="Literal" /> attribute set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>Gets a value indicating whether this field has the <see langword="NotSerialized" /> attribute.</summary>
      <returns>
        <see langword="true" /> if the field has the <see langword="NotSerialized" /> attribute set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>Gets a value indicating whether the corresponding <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.</summary>
      <returns>
        <see langword="true" /> if the <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>Gets a value indicating whether the field is private.</summary>
      <returns>
        <see langword="true" /> if the field is private; otherwise; <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>Gets a value indicating whether the field is public.</summary>
      <returns>
        <see langword="true" /> if this field is public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</summary>
      <returns>
        <see langword="true" /> if the current field is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</summary>
      <returns>
        <see langword="true" /> if the current field is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current field is transparent at the current trust level.</summary>
      <returns>
        <see langword="true" /> if the field is security-transparent at the current trust level; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>Gets a value indicating whether the corresponding <see langword="SpecialName" /> attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.</summary>
      <returns>
        <see langword="true" /> if the <see langword="SpecialName" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>Gets a value indicating whether the field is static.</summary>
      <returns>
        <see langword="true" /> if this field is static; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <exception cref="T:System.FieldAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have permission to access this field.</exception>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.  
 -or-  
 The <paramref name="value" /> parameter cannot be converted and stored in the field.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the value of the field supported by the given object.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <param name="invokeAttr">A field of <see langword="Binder" /> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance" /> or <see langword="Binder.ExactBinding" />).</param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder" /> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</param>
      <param name="culture">The software preferences of a particular culture.</param>
      <exception cref="T:System.FieldAccessException">The caller does not have permission to access this field.</exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.  
 -or-  
 The <paramref name="value" /> parameter cannot be converted and stored in the field.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</param>
      <param name="value">The value to assign to the field.</param>
      <exception cref="T:System.NotSupportedException">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>Describes the constraints on a generic type parameter of a generic type or method.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>There are no special flags.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a reference type.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />, <see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" />, and <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> and <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />.</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>Provides custom attributes for reflection objects that support them.</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</summary>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined on this member.</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</summary>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this member.</summary>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>
        <see langword="true" /> if the <paramref name="attributeType" /> is defined on this member; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:System.Reflection.ImageFileMachine">
      <summary>Identifies the platform targeted by an executable.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.AMD64">
      <summary>Targets a 64-bit AMD processor.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.ARM">
      <summary>Targets an ARM processor.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.I386">
      <summary>Targets a 32-bit Intel processor.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.IA64">
      <summary>Targets a 64-bit Intel processor.</summary>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>Retrieves the mapping of an interface into the actual methods on a class that implements that interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>Shows the methods that are defined on the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>Shows the type that represents the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>Shows the methods that implement the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>Represents the type that was used to create the interface mapping.</summary>
    </member>
    <member name="T:System.Reflection.IntrospectionExtensions">
      <summary>Contains methods for converting <see cref="T:System.Type" /> objects.</summary>
    </member>
    <member name="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)">
      <summary>Returns the <see cref="T:System.Reflection.TypeInfo" /> representation of the specified type.</summary>
      <param name="type">The type to convert.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="T:System.Reflection.InvalidFilterCriteriaException">
      <summary>The exception that is thrown in <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> when the filter criteria is not valid for the type of filter you are using.</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the default properties.</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the specified serialization and context information.</summary>
      <param name="info">A <see langword="SerializationInfo" /> object that contains the information required to serialize this instance.</param>
      <param name="context">A <see langword="StreamingContext" /> object that contains the source and destination of the serialized stream associated with this instance.</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the given HRESULT and message string.</summary>
      <param name="message">The message text for the exception.</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>Interoperates with the IDispatch interface.</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the <see cref="T:System.Reflection.FieldInfo" /> object that corresponds to the specified field and binding flag.</summary>
      <param name="name">The name of the field to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object containing the field information for the named object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name.</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current class.</summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects containing all the field information for this reflection object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding to all public members or to all members that match a specified name.</summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects matching the <paramref name="name" /> parameter.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond either to all public members or to all members of the current class.</summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects containing all the member information for this reflection object.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object that corresponds to a specified method under specified search constraints.</summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object containing the method information, with the match being based on the method name and search constraints specified in <paramref name="bindingAttr" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name.</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object corresponding to a specified method, using a <see cref="T:System.Type" /> array to choose from among overloaded methods.</summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method.</param>
      <param name="types">An array used to choose among overloaded methods.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>The requested method that matches all the specified parameters.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name.</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MethodInfo" /> objects with all public methods or all methods of the current class.</summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects containing all the methods defined for this reflection object that meet the search constraints specified in <paramref name="bindingAttr" />.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.PropertyInfo" /> objects corresponding to all public properties or to all properties of the current class.</summary>
      <param name="bindingAttr">The binding attribute used to control the search.</param>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects for all the properties defined on the reflection object.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object corresponding to a specified property under specified search constraints.</summary>
      <param name="name">The name of the property to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property that meets the search constraints specified in <paramref name="bindingAttr" />, or <see langword="null" /> if the property was not located.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name.</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object that corresponds to a specified property with specified search constraints.</summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attribute used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method.</param>
      <param name="returnType">The type of the property.</param>
      <param name="types">An array used to choose among overloaded methods with the same name.</param>
      <param name="modifiers">An array used to choose the parameter modifiers.</param>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property, if a property with the specified name was located in this reflection object, or <see langword="null" /> if the property was not located.</returns>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes a specified member.</summary>
      <param name="name">The name of the member to find.</param>
      <param name="invokeAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> invocation attributes. The <paramref name="invokeAttr" /> parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member.</param>
      <param name="binder">One of the <see cref="T:System.Reflection.BindingFlags" /> bit flags. Implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method.</param>
      <param name="target">The object on which to invoke the specified member. This parameter is ignored for static members.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects. This array has the same length as the <paramref name="args" /> parameter, representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: <see langword="pdIn" />, <see langword="pdOut" />, <see langword="pdRetval" />, <see langword="pdOptional" />, and <see langword="pdHasDefault" />. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. For example, <paramref name="culture" /> converts a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures. If this parameter is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <param name="namedParameters">A <see langword="String" /> array of parameters.</param>
      <returns>The specified member.</returns>
      <exception cref="T:System.ArgumentException">More than one argument is specified for a field <see langword="set" />.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found.</exception>
      <exception cref="T:System.Security.SecurityException">A private member is invoked without the necessary <see cref="T:System.Security.Permissions.ReflectionPermission" />.</exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>Gets the underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</summary>
      <returns>The underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</returns>
    </member>
    <member name="T:System.Reflection.IReflectableType">
      <summary>Represents a type that you can reflect over.</summary>
    </member>
    <member name="M:System.Reflection.IReflectableType.GetTypeInfo">
      <summary>Retrieves an object that represents this type.</summary>
      <returns>An object that represents this type.</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>Discovers the attributes of a local variable and provides access to local variable metadata.</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.LocalVariableInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>Gets a <see cref="T:System.Boolean" /> value that indicates whether the object referred to by the local variable is pinned in memory.</summary>
      <returns>
        <see langword="true" /> if the object referred to by the variable is pinned in memory; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>Gets the index of the local variable within the method body.</summary>
      <returns>An integer value that represents the order of declaration of the local variable within the method body.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>Gets the type of the local variable.</summary>
      <returns>The type of the local variable.</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>Returns a user-readable string that describes the local variable.</summary>
      <returns>A string that displays information about the local variable, including the type name, index, and pinned status.</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>Provides access to manifest resources, which are XML files that describe application dependencies.</summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ManifestResourceInfo" /> class for a resource that is contained by the specified assembly and file, and that has the specified location.</summary>
      <param name="containingAssembly">The assembly that contains the manifest resource.</param>
      <param name="containingFileName">The name of the file that contains the manifest resource, if the file is not the same as the manifest file.</param>
      <param name="resourceLocation">A bitwise combination of enumeration values that provides information about the location of the manifest resource.</param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>Gets the name of the file that contains the manifest resource, if it is not the same as the manifest file.</summary>
      <returns>The manifest resource's file name.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>Gets the containing assembly for the manifest resource.</summary>
      <returns>The manifest resource's containing assembly.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>Gets the manifest resource's location.</summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.ResourceLocation" /> flags that indicates the location of the manifest resource.</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>Represents a delegate that is used to filter a list of members represented in an array of <see cref="T:System.Reflection.MemberInfo" /> objects.</summary>
      <param name="m">The <see cref="T:System.Reflection.MemberInfo" /> object to which the filter is applied.</param>
      <param name="filterCriteria">An arbitrary object used to filter the list.</param>
      <returns>
        <see langword="true" /> to include the member in the filtered list; otherwise <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>Obtains information about the attributes of a member and provides access to member metadata.</summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.CustomAttributes">
      <summary>Gets a collection that contains this member's custom attributes.</summary>
      <returns>A collection that contains this member's custom attributes.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see langword="Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, returns an array of all custom attributes applied to this member.</summary>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />. This parameter is ignored for properties and events.</param>
      <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.</summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />. This parameter is ignored for properties and events.</param>
      <returns>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.</returns>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)">
      <param name="other" />
    </member>
    <member name="P:System.Reflection.MemberInfo.IsCollectible">
      <summary>Gets a value that indicates whether this <see cref="T:System.Reflection.MemberInfo" /> object is part of an assembly held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Reflection.MemberInfo" /> is part of an assembly held in a collectible assembly load context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</summary>
      <param name="attributeType">The type of custom attribute to search for. The search includes derived types.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />. This parameter is ignored for properties and events.</param>
      <returns>
        <see langword="true" /> if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member - method, constructor, event, and so on.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>Gets a value that identifies a metadata element.</summary>
      <returns>A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as <see langword="Address" />, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are equal.</summary>
      <param name="left">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are not equal.</summary>
      <param name="left">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance of <see langword="MemberInfo" />.</summary>
      <returns>The <see langword="Type" /> object through which this <see langword="MemberInfo" /> object was obtained.</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>Marks each type of member that is defined as a derived class of <see cref="T:System.Reflection.MemberInfo" />.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>Specifies all member types.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>Specifies that the member is a constructor</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>Specifies that the member is a custom member type.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>Specifies that the member is an event.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>Specifies that the member is a field.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>Specifies that the member is a method.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>Specifies that the member is a nested type.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>Specifies that the member is a property.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>Specifies that the member is a type.</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>Indicates that the class does not provide an implementation of this method.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>Indicates that the method is accessible to any class of this assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>Indicates that the method can only be overridden when it is also accessible.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>Indicates that the method is accessible only to members of this class and its derived classes.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>Indicates that the method cannot be overridden.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>Indicates that the method has security associated with it. Reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>Indicates that the method hides by name and signature; otherwise, by name only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>Retrieves accessibility information.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>Indicates that the method always gets a new slot in the vtable.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>Indicates that the method is accessible only to the current class.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>Indicates that the member cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>Indicates that the method is accessible to any object for which this object is in scope.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>Indicates a reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>Indicates that the common language runtime checks the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>Indicates that the method is special. The name describes how this method is special.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>Indicates that the method is defined on the type; otherwise, it is defined per instance.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>Indicates that the managed method is exported by thunk to unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>Indicates that the method is virtual.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>Retrieves vtable attributes.</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>Provides information about methods and constructors.</summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodBase" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>Gets the attributes associated with this method.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>Gets a value indicating the calling conventions for this method.</summary>
      <returns>The <see cref="T:System.Reflection.CallingConventions" /> for this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>Gets a value indicating whether the generic method contains unassigned generic type parameters.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents a generic method that contains unassigned generic type parameters; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>Returns a <see langword="MethodBase" /> object representing the currently executing method.</summary>
      <returns>
        <see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> is a static method that is called from within an executing method and that returns information about that method.  
A <see langword="MethodBase" /> object representing the currently executing method.</returns>
      <exception cref="T:System.Reflection.TargetException">This member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">The current object is a <see cref="T:System.Reflection.ConstructorInfo" />. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodBody">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</returns>
      <exception cref="T:System.InvalidOperationException">This method is invalid unless overridden in a derived class.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>Gets method information by using the method's internal metadata representation (handle).</summary>
      <param name="handle">The method's handle.</param>
      <returns>A <see langword="MethodBase" /> containing information about the method.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> object for the constructor or method represented by the specified handle, for the specified generic type.</summary>
      <param name="handle">A handle to the internal metadata representation of a constructor or method.</param>
      <param name="declaringType">A handle to the generic type that defines the constructor or method.</param>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</summary>
      <returns>The <see langword="MethodImplAttributes" /> flags.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>When overridden in a derived class, gets the parameters of the specified method or constructor.</summary>
      <returns>An array of type <see langword="ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this <see langword="MethodBase" /> instance.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>Invokes the method or constructor represented by the current instance, using the specified parameters.</summary>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be <see langword="null" />.  
 If the method or constructor represented by this instance takes a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null" />. For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</param>
      <returns>An object containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor.</returns>
      <exception cref="T:System.Reflection.TargetException">In the.NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.  
 -or-  
 The method is not declared or inherited by the class of <paramref name="obj" />.  
 -or-  
 A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The elements of the <paramref name="parameters" /> array do not match the signature of the method or constructor reflected by this instance.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception.  
 -or-  
 The current instance is a <see cref="T:System.Reflection.Emit.DynamicMethod" /> that contains unverifiable code. See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have permission to execute the method or constructor that is represented by the current instance.</exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</exception>
      <exception cref="T:System.NotSupportedException">The current instance is a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, invokes the reflected method or constructor with the given parameters.</summary>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be <see langword="null" /> or an instance of the class that defines the constructor.</param>
      <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. If <paramref name="binder" /> is <see langword="null" />, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be <see langword="null" />.  
 If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <see langword="null" />. For value-type elements, this value is 0, 0.0, or <see langword="false" />, depending on the specific element type.</param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. (This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</param>
      <returns>An <see langword="Object" /> containing the return value of the invoked method, or <see langword="null" /> in the case of a constructor, or <see langword="null" /> if the method's return type is <see langword="void" />. Before calling the method or constructor, <see langword="Invoke" /> checks to see if the user has access permission and verifies that the parameters are valid.</returns>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is <see langword="null" /> and the method is not static.  
 -or-  
 The method is not declared or inherited by the class of <paramref name="obj" />.  
 -or-  
 A static constructor is invoked, and <paramref name="obj" /> is neither <see langword="null" /> nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="parameters" /> parameter does not match the signature of the method or constructor reflected by this instance.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to execute the method or constructor that is represented by the current instance.</exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" /> for the declaring type.</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>Gets a value indicating whether the method is abstract.</summary>
      <returns>
        <see langword="true" /> if the method is abstract; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>
        <see langword="true" /> if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructedGenericMethod" />
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>Gets a value indicating whether the method is a constructor.</summary>
      <returns>
        <see langword="true" /> if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo" /> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> objects); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family" />; that is, the method or constructor is visible only within its class and derived classes.</summary>
      <returns>
        <see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</summary>
      <returns>
        <see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>
        <see langword="true" /> if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>Gets a value indicating whether this method is <see langword="final" />.</summary>
      <returns>
        <see langword="true" /> if this method is <see langword="final" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>Gets a value indicating whether the method is generic.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> represents a generic method; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the method is a generic method definition.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Reflection.MethodBase" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</summary>
      <returns>
        <see langword="true" /> if the member is hidden by signature; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>Gets a value indicating whether this member is private.</summary>
      <returns>
        <see langword="true" /> if access to this method is restricted to other members of the class itself; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>Gets a value indicating whether this is a public method.</summary>
      <returns>
        <see langword="true" /> if this method is public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the current method or constructor is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</summary>
      <returns>
        <see langword="true" /> if the method or constructor is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the method or constructor is security-transparent at the current trust level; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>Gets a value indicating whether this method has a special name.</summary>
      <returns>
        <see langword="true" /> if this method has a special name; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>Gets a value indicating whether the method is <see langword="static" />.</summary>
      <returns>
        <see langword="true" /> if this method is <see langword="static" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>Gets a value indicating whether the method is <see langword="virtual" />.</summary>
      <returns>
        <see langword="true" /> if this method is <see langword="virtual" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of a method.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> object.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodImplementationFlags">
      <summary>Gets the <see cref="T:System.Reflection.MethodImplAttributes" /> flags that specify the attributes of a method implementation.</summary>
      <returns>The method implementation flags.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.MethodBody">
      <summary>Provides access to the metadata and MSIL for the body of a method.</summary>
    </member>
    <member name="M:System.Reflection.MethodBody.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MethodBody.ExceptionHandlingClauses">
      <summary>Gets a list that includes all the exception-handling clauses in the method body.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</returns>
    </member>
    <member name="M:System.Reflection.MethodBody.GetILAsByteArray">
      <summary>Returns the MSIL for the method body, as an array of bytes.</summary>
      <returns>An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.InitLocals">
      <summary>Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</summary>
      <returns>
        <see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalSignatureMetadataToken">
      <summary>Gets a metadata token for the signature that describes the local variables for the method in metadata.</summary>
      <returns>An integer that represents the metadata token.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalVariables">
      <summary>Gets the list of local variables declared in the method body.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.MaxStackSize">
      <summary>Gets the maximum number of items on the operand stack when the method is executing.</summary>
      <returns>The maximum number of items on the operand stack when the method is executing.</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>Specifies flags for the attributes of a method implementation.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
      <summary>Specifies that the method should be inlined wherever possible.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveOptimization">
      <summary>Specifies that the method should be optimized whenever possible.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>Specifies flags about code type.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>Specifies that the method is not defined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>Specifies an internal call.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>Specifies that the method is implemented in managed code.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>Specifies whether the method is implemented in managed or unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>Specifies a range check value.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>Specifies that the method implementation is native.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>Specifies that the method cannot be inlined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>Specifies that the method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>Specifies that the method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>Specifies that the method is single-threaded through the body. Static methods (<see langword="Shared" /> in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic SyncLock statement for this purpose.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>Specifies that the method is implemented in unmanaged code.</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>Discovers the attributes of a method and provides access to method metadata.</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo" /> class.</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
      <summary>Creates a delegate of the specified type from this method.</summary>
      <param name="delegateType">The type of the delegate to create.</param>
      <returns>The delegate for this method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
      <summary>Creates a delegate of the specified type with the specified target from this method.</summary>
      <param name="delegateType">The type of the delegate to create.</param>
      <param name="target">The object targeted by the delegate.</param>
      <returns>The delegate for this method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object for the first implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>Returns a <see cref="T:System.Reflection.MethodInfo" /> object that represents a generic method definition from which the current method can be constructed.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing a generic method definition from which the current method can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current method is not a generic method. That is, <see cref="P:System.Reflection.MethodBase.IsGenericMethod" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo" /> object representing the resulting constructed method.</summary>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic method definition.</param>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the constructed method formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic method definition.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MethodInfo" /> does not represent a generic method definition. That is, <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is <see langword="null" />.  
-or-  
Any element of <paramref name="typeArguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters of the current generic method definition.  
 -or-  
 An element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.</exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>Gets the return type of this method.</summary>
      <returns>The return type of this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the return type.</summary>
      <returns>An <see langword="ICustomAttributeProvider" /> object representing the custom attributes for the return type.</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>Represents a missing <see cref="T:System.Object" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.Missing.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate the sole instance of the <see cref="T:System.Reflection.Missing" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object representing the destination context of the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>Represents the sole instance of the <see cref="T:System.Reflection.Missing" /> class.</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>Performs reflection on a module.</summary>
    </member>
    <member name="M:System.Reflection.Module.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Module" /> class.</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>Gets the appropriate <see cref="T:System.Reflection.Assembly" /> for this instance of <see cref="T:System.Reflection.Module" />.</summary>
      <returns>An <see langword="Assembly" /> object.</returns>
    </member>
    <member name="P:System.Reflection.Module.CustomAttributes">
      <summary>Gets a collection that contains this module's custom attributes.</summary>
      <returns>A collection that contains this module's custom attributes.</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>Determines whether this module and the specified object are equal.</summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeName">
      <summary>A <see langword="TypeFilter" /> object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.</summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeNameIgnoreCase">
      <summary>A <see langword="TypeFilter" /> object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.</summary>
    </member>
    <member name="M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)">
      <summary>Returns an array of classes accepted by the given filter and filter criteria.</summary>
      <param name="filter">The delegate used to filter the classes.</param>
      <param name="filterCriteria">An Object used to filter the classes.</param>
      <returns>An array of type <see langword="Type" /> containing classes that were accepted by the filter.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>Gets a string representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>Returns all custom attributes.</summary>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>An array of type <see langword="Object" /> containing all custom attributes.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets custom attributes of the specified type.</summary>
      <param name="attributeType">The type of attribute to get.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>An array of type <see langword="Object" /> containing all custom attributes of the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current module, which can be used in the reflection-only context.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>Returns a field having the specified name.</summary>
      <param name="name">The field name.</param>
      <returns>A <see langword="FieldInfo" /> object having the specified name, or <see langword="null" /> if the field does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a field having the specified name and binding attributes.</summary>
      <param name="name">The field name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <returns>A <see langword="FieldInfo" /> object having the specified name and binding attributes, or <see langword="null" /> if the field does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>Returns the global fields defined on the module.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the global fields defined on the module that match the specified binding flags.</summary>
      <param name="bindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limit the search.</param>
      <returns>An array of type <see cref="T:System.Reflection.FieldInfo" /> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>Returns a method having the specified name.</summary>
      <param name="name">The method name.</param>
      <returns>A <see langword="MethodInfo" /> object having the specified name, or <see langword="null" /> if the method does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.</summary>
      <param name="name">The method name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <param name="binder">An object that implements <see langword="Binder" />, containing properties related to this method.</param>
      <param name="callConvention">The calling convention for the method.</param>
      <param name="types">The parameter types to search for.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>A <see langword="MethodInfo" /> object in accordance with the specified criteria, or <see langword="null" /> if the method does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />, <paramref name="types" /> is <see langword="null" />, or <paramref name="types" /> (i) is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>Returns a method having the specified name and parameter types.</summary>
      <param name="name">The method name.</param>
      <param name="types">The parameter types to search for.</param>
      <returns>A <see langword="MethodInfo" /> object in accordance with the specified criteria, or <see langword="null" /> if the method does not exist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />, <paramref name="types" /> is <see langword="null" />, or <paramref name="types" /> (i) is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns the method implementation in accordance with the specified criteria.</summary>
      <param name="name">The method name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <param name="binder">An object that implements <see langword="Binder" />, containing properties related to this method.</param>
      <param name="callConvention">The calling convention for the method.</param>
      <param name="types">The parameter types to search for.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>A <see langword="MethodInfo" /> object containing implementation information as specified, or <see langword="null" /> if the method does not exist.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="types" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>Returns the global methods defined on the module.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns the global methods defined on the module that match the specified binding flags.</summary>
      <param name="bindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limit the search.</param>
      <returns>An array of type <see cref="T:System.Reflection.MethodInfo" /> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized objects.</summary>
      <param name="info">The information and data needed to serialize or deserialize an object.</param>
      <param name="context">The context for the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</summary>
      <param name="peKind">When this method returns, a combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values indicating the nature of the code in the module.</param>
      <param name="machine">When this method returns, one of the <see cref="T:System.Reflection.ImageFileMachine" /> values indicating the platform targeted by the module.</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>Returns the specified type, performing a case-sensitive search.</summary>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace.</param>
      <returns>A <see langword="Type" /> object representing the given type, if the type is in this module; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>Returns the specified type, searching the module with the specified case sensitivity.</summary>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace.</param>
      <param name="ignoreCase">
        <see langword="true" /> for case-insensitive search; otherwise, <see langword="false" />.</param>
      <returns>A <see langword="Type" /> object representing the given type, if the type is in this module; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</summary>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</param>
      <param name="ignoreCase">
        <see langword="true" /> for case-insensitive search; otherwise, <see langword="false" />.</param>
      <returns>A <see cref="T:System.Type" /> object representing the specified type, if the type is declared in this module; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.  
-or-  
The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly.  
-or-  
<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>Returns all the types defined within this module.</summary>
      <returns>An array of type <see langword="Type" /> containing types defined within the module that is reflected by this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified attribute type has been applied to this module.</summary>
      <param name="attributeType">The type of custom attribute to test for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <see langword="true" /> if one or more instances of <paramref name="attributeType" /> have been applied to this module; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Module.IsResource">
      <summary>Gets a value indicating whether the object is a resource.</summary>
      <returns>
        <see langword="true" /> if the object is a resource; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Module.MDStreamVersion">
      <summary>Gets the metadata stream version.</summary>
      <returns>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</returns>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>Gets a token that identifies the module in metadata.</summary>
      <returns>An integer token that identifies the current module in metadata.</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleHandle">
      <summary>Gets a handle for the module.</summary>
      <returns>A <see cref="T:System.ModuleHandle" /> structure for the current module.</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleVersionId">
      <summary>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</summary>
      <returns>A <see cref="T:System.Guid" /> that can be used to distinguish between two versions of a module.</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>Gets a <see langword="String" /> representing the name of the module with the path removed.</summary>
      <returns>The module name with no path.</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Module" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Module" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32)">
      <summary>Returns the field identified by the specified metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a field in the module.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a field in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> identifies a field whose parent <see langword="TypeSpec" /> has a signature containing element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <param name="metadataToken">A metadata token that identifies a field in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a field in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> identifies a field whose parent <see langword="TypeSpec" /> has a signature containing element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32)">
      <summary>Returns the type or member identified by the specified metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a type or member in the module.</param>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> object representing the type or member that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type or member in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> or <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method).  
-or-  
<paramref name="metadataToken" /> identifies a property or event.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <param name="metadataToken">A metadata token that identifies a type or member in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> object representing the type or member that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type or member in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> or <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.  
-or-  
<paramref name="metadataToken" /> identifies a property or event.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>Returns the method or constructor identified by the specified metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="MethodSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveSignature(System.Int32)">
      <summary>Returns the signature blob identified by a metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a signature in the module.</param>
      <returns>An array of bytes representing the signature blob.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a valid <see langword="MemberRef" />, <see langword="MethodDef" />, <see langword="TypeSpec" />, signature, or <see langword="FieldDef" /> token in the scope of the current module.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>Returns the string identified by the specified metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a string in the string heap of the module.</param>
      <returns>A <see cref="T:System.String" /> containing a string value from the metadata string heap.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a string in the scope of the current module.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>Returns the type identified by the specified metadata token.</summary>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or <see langword="null" /> if that type is not generic.</param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or <see langword="null" /> if that method is not generic.</param>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.  
-or-  
<paramref name="metadataToken" /> is a <see langword="TypeSpec" /> whose signature contains element type <see langword="var" /> (a type parameter of a generic type) or <see langword="mvar" /> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="P:System.Reflection.Module.ScopeName">
      <summary>Gets a string representing the name of the module.</summary>
      <returns>The module name.</returns>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>Returns the name of the module.</summary>
      <returns>A <see langword="String" /> representing the name of this module.</returns>
    </member>
    <member name="T:System.Reflection.ModuleResolveEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Reflection.Assembly.ModuleResolve" /> event of an <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="sender">The assembly that was the source of the event.</param>
      <param name="e">The arguments supplied by the object describing the event.</param>
      <returns>The module that satisfies the request.</returns>
    </member>
    <member name="T:System.Reflection.ObfuscateAssemblyAttribute">
      <summary>Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.</summary>
    </member>
    <member name="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ObfuscateAssemblyAttribute" /> class, specifying whether the assembly to be obfuscated is public or private.</summary>
      <param name="assemblyIsPrivate">
        <see langword="true" /> if the assembly is used within the scope of one application; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether the assembly was marked private.</summary>
      <returns>
        <see langword="true" /> if the assembly was marked private; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should remove the attribute after processing.</summary>
      <returns>
        <see langword="true" /> if the obfuscation tool should remove the attribute after processing; otherwise, <see langword="false" />. The default value for this property is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Reflection.ObfuscationAttribute">
      <summary>Instructs obfuscation tools to take the specified actions for an assembly, type, or member.</summary>
    </member>
    <member name="M:System.Reflection.ObfuscationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ObfuscationAttribute" /> class.</summary>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.ApplyToMembers">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the attribute of a type is to apply to the members of the type.</summary>
      <returns>
        <see langword="true" /> if the attribute is to apply to the members of the type; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Exclude">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should exclude the type or member from obfuscation.</summary>
      <returns>
        <see langword="true" /> if the type or member to which this attribute is applied should be excluded from obfuscation; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Feature">
      <summary>Gets or sets a string value that is recognized by the obfuscation tool, and which specifies processing options.</summary>
      <returns>A string value that is recognized by the obfuscation tool, and which specifies processing options. The default is "all".</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should remove this attribute after processing.</summary>
      <returns>
        <see langword="true" /> if an obfuscation tool should remove the attribute after processing; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>Defines the attributes that can be associated with a parameter. These are defined in CorHdr.h.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>Specifies that the parameter has a default value.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>Specifies that the parameter has field marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>Specifies that the parameter is an input parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>Specifies that the parameter is a locale identifier (lcid).</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>Specifies that there is no parameter attribute.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>Specifies that the parameter is optional.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>Specifies that the parameter is an output parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>Specifies that the parameter is reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>Specifies that the parameter is a return value.</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>Discovers the attributes of a parameter and provides access to parameter metadata.</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>Initializes a new instance of the <see langword="ParameterInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>Gets the attributes for this parameter.</summary>
      <returns>A <see langword="ParameterAttributes" /> object representing the attributes for this parameter.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.AttrsImpl">
      <summary>The attributes of the parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.ClassImpl">
      <summary>The <see langword="Type" /> of the parameter.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.CustomAttributes">
      <summary>Gets a collection that contains this parameter's custom attributes.</summary>
      <returns>A collection that contains this parameter's custom attributes.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>Gets a value indicating the default value if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.DefaultValueImpl">
      <summary>The default value of the parameter.</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes defined on this parameter.</summary>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>An array that contains all the custom attributes applied to this parameter.</returns>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</summary>
      <param name="attributeType">The custom attributes identified by type.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>An array that contains the custom attributes of the specified type or its derived types.</returns>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current parameter, which can be used in the reflection-only context.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current parameter.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
      <summary>Gets the optional custom modifiers of the parameter.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</summary>
      <param name="context">The serialized stream from which the current object is deserialized.</param>
      <returns>The actual object that is put into the graph.</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The parameter's position in the parameter list of its associated member is not valid for that member's type.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
      <summary>Gets the required custom modifiers of the parameter.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.HasDefaultValue">
      <summary>Gets a value that indicates whether this parameter has a default value.</summary>
      <returns>
        <see langword="true" /> if this parameter has a default value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</summary>
      <param name="attributeType">The <see langword="Type" /> object to search for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <see langword="true" /> if one or more instances of <paramref name="attributeType" /> or its derived types are applied to this parameter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the common language runtime.</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>Gets a value indicating whether this is an input parameter.</summary>
      <returns>
        <see langword="true" /> if the parameter is an input parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>Gets a value indicating whether this parameter is a locale identifier (lcid).</summary>
      <returns>
        <see langword="true" /> if the parameter is a locale identifier; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>Gets a value indicating whether this parameter is optional.</summary>
      <returns>
        <see langword="true" /> if the parameter is optional; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>Gets a value indicating whether this is an output parameter.</summary>
      <returns>
        <see langword="true" /> if the parameter is an output parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>Gets a value indicating whether this is a <see langword="Retval" /> parameter.</summary>
      <returns>
        <see langword="true" /> if the parameter is a <see langword="Retval" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>Gets a value indicating the member in which the parameter is implemented.</summary>
      <returns>The member which implanted the parameter represented by this <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.MemberImpl">
      <summary>The member in which the field is implemented.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>Gets a value that identifies this parameter in metadata.</summary>
      <returns>A value which, in combination with the module, uniquely identifies this parameter in metadata.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>The simple name of this parameter.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.NameImpl">
      <summary>The name of the parameter.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>Gets the <see langword="Type" /> of this parameter.</summary>
      <returns>The <see langword="Type" /> object that represents the <see langword="Type" /> of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>Gets the zero-based position of the parameter in the formal parameter list.</summary>
      <returns>An integer representing the position this parameter occupies in the parameter list.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.PositionImpl">
      <summary>The zero-based position of the parameter in the parameter list.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
      <summary>Gets a value indicating the default value if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>Gets the parameter type and name represented as a string.</summary>
      <returns>A string containing the type and the name of the parameter.</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>Attaches a modifier to parameters so that binding can work with parameter signatures in which the types have been modified.</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ParameterModifier" /> structure representing the specified number of parameters.</summary>
      <param name="parameterCount">The number of parameters.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> is negative.</exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>Gets or sets a value that specifies whether the parameter at the specified index position is to be modified by the current <see cref="T:System.Reflection.ParameterModifier" />.</summary>
      <param name="index">The index position of the parameter whose modification status is being examined or set.</param>
      <returns>
        <see langword="true" /> if the parameter at this index position is to be modified by this <see cref="T:System.Reflection.ParameterModifier" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Pointer">
      <summary>Provides a wrapper class for pointers.</summary>
    </member>
    <member name="M:System.Reflection.Pointer.Box(System.Void*,System.Type)">
      <summary>Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <see cref="T:System.Reflection.Pointer" /> wrapper object. The value and the type are saved so they can be accessed from the native code during an invocation.</summary>
      <param name="ptr">The supplied unmanaged memory pointer.</param>
      <param name="type">The type associated with the <paramref name="ptr" /> parameter.</param>
      <returns>A pointer object.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a pointer.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name, fusion log, and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Reflection.Pointer.Unbox(System.Object)">
      <summary>Returns the stored pointer.</summary>
      <param name="ptr">The stored pointer.</param>
      <returns>This method returns void.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is not a pointer.</exception>
    </member>
    <member name="T:System.Reflection.PortableExecutableKinds">
      <summary>Identifies the nature of the code in an executable file.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.ILOnly">
      <summary>The executable contains only Microsoft intermediate language (MSIL), and is therefore neutral with respect to 32-bit or 64-bit platforms.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.NotAPortableExecutableImage">
      <summary>The file is not in portable executable (PE) file format.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.PE32Plus">
      <summary>The executable requires a 64-bit platform.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Preferred32Bit">
      <summary>The executable is platform-agnostic but should be run on a 32-bit platform whenever possible.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Required32Bit">
      <summary>The executable can be run on a 32-bit platform, or in the 32-bit Windows on Windows (WOW) environment on a 64-bit platform.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Unmanaged32Bit">
      <summary>The executable contains pure unmanaged code.</summary>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>Identifies the processor and bits-per-word of the platform targeted by an executable.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>A 64-bit processor based on the x64 architecture.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>An ARM processor.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>A 64-bit Intel Itanium processor only.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>Neutral with respect to processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>An unknown or unspecified combination of processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>A 32-bit Intel processor, either native or in the Windows on Windows environment on a 64-bit platform (WOW64).</summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>Specifies that the property has a default value.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>Specifies that no attributes are associated with a property.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>Specifies a flag reserved for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>Specifies that the metadata internal APIs check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>Specifies that the property is special, with the name describing how the property is special.</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>Discovers the attributes of a property and provides access to property metadata.</summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>The attributes of this property.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
      <returns>
        <see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>Gets a value indicating whether the property can be written to.</summary>
      <returns>
        <see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</summary>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the returned array. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</param>
      <returns>An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance. If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors. If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>Returns a literal value associated with the property by a compiler.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>Returns the public <see langword="get" /> accessor for this property.</summary>
      <returns>A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</summary>
      <param name="nonPublic">Indicates whether a non-public <see langword="get" /> accessor should be returned. <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</param>
      <returns>A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />. Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</returns>
      <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>When overridden in a derived class, returns an array of all the index parameters for the property.</summary>
      <returns>An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.GetMethod">
      <summary>Gets the <see langword="get" /> accessor for this property.</summary>
      <returns>The <see langword="get" /> accessor for this property.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
      <summary>Returns an array of types representing the optional custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the property by a compiler.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
      <summary>Returns an array of types representing the required custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>Returns the public <see langword="set" /> accessor for this property.</summary>
      <returns>The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</summary>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. <see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</param>
      <returns>This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.  
  Value  

  Condition  

  The <see langword="Set" /> method for this property.  

  The <see langword="set" /> accessor is public.  

 -or-  

 <paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.  

 <see langword="null" /><paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.  

 -or-  

 <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.  

 -or-  

 There is no <see langword="set" /> accessor.</returns>
      <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
      <summary>Returns the property value of a specified object.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <returns>The property value of the specified object.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>Returns the property value of a specified object with optional index values for indexed properties.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="index">Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be <see langword="null" /> for non-indexed properties.</param>
      <returns>The property value of the specified object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.  
 -or-  
 The property's <see langword="get" /> accessor is not found.</exception>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 There was an illegal attempt to access a private or protected method inside a class.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />. You must specify a suitable invocation attribute. For example, to invoke a static member, set the <see langword="Static" /> flag.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name="culture">The culture for which the resource is to be localized. If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match. If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
      <returns>The property value of the specified object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.  
 -or-  
 The property's <see langword="get" /> accessor is not found.</exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>Gets a value indicating whether the property is the special name.</summary>
      <returns>
        <see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>Gets the type of this property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.SetMethod">
      <summary>Gets the <see langword="set" /> accessor for this property.</summary>
      <returns>The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the property value of a specified object.</summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name="value">The new property value.</param>
      <exception cref="T:System.ArgumentException">The property's <see langword="set" /> accessor is not found.  
 -or-  
 <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</exception>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 There was an illegal attempt to access a private or protected method inside a class.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the property value of a specified object with optional index values for index properties.</summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name="value">The new property value.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.  
 -or-  
 The property's <see langword="set" /> accessor is not found.  
 -or-  
 <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</exception>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 There was an illegal attempt to access a private or protected method inside a class.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name="value">The new property value.</param>
      <param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. You must specify a suitable invocation attribute. For example, to invoke a static member, set the <see langword="Static" /> flag.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name="culture">The culture for which the resource is to be localized. If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match. If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.  
 -or-  
 The property's <see langword="set" /> accessor is not found.  
 -or-  
 <paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="T:System.Reflection.ReflectionContext">
      <summary>Represents a context that can provide reflection objects.</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionContext" /> class.</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)">
      <summary>Gets the representation of the type of the specified object in this reflection context.</summary>
      <param name="value">The object to represent.</param>
      <returns>An object that represents the type of the specified object.</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)">
      <summary>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context.</summary>
      <param name="assembly">The external representation of the assembly to represent in this context.</param>
      <returns>The representation of the assembly in this reflection context.</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)">
      <summary>Gets the representation, in this reflection context, of a type represented by an object from another reflection context.</summary>
      <param name="type">The external representation of the type to represent in this context.</param>
      <returns>The representation of the type in this reflection context.</returns>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>The exception that is thrown by the <see cref="M:System.Reflection.Module.GetTypes" /> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" /> class with the given classes and their associated exceptions.</summary>
      <param name="classes">An array of type <see langword="Type" /> containing the classes that were defined in the module and loaded. This array can contain null reference (<see langword="Nothing" /> in Visual Basic) values.</param>
      <param name="exceptions">An array of type <see langword="Exception" /> containing the exceptions that were thrown by the class loader. The null reference (<see langword="Nothing" /> in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array.</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" /> class with the given classes, their associated exceptions, and exception descriptions.</summary>
      <param name="classes">An array of type <see langword="Type" /> containing the classes that were defined in the module and loaded. This array can contain null reference (<see langword="Nothing" /> in Visual Basic) values.</param>
      <param name="exceptions">An array of type <see langword="Exception" /> containing the exceptions that were thrown by the class loader. The null reference (<see langword="Nothing" /> in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array.</param>
      <param name="message">A <see langword="String" /> describing the reason the exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized objects.</summary>
      <param name="info">The information and data needed to serialize or deserialize an object.</param>
      <param name="context">The context for the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <see langword="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>Gets the array of exceptions thrown by the class loader.</summary>
      <returns>An array of type <see langword="Exception" /> containing the exceptions thrown by the class loader. The null values in the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> array of this instance line up with the exceptions in this array.</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Message">
      <summary>Gets the error message for this exception.</summary>
      <returns>A string containing the error message for this exception.</returns>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.ToString">
      <summary>Returns the fully qualified name of this exception and the messages for all the loader exceptions.</summary>
      <returns>A string containing the fully qualified name of this exception and the exception messages for its loader exceptions.</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>Gets the array of classes that were defined in the module and loaded.</summary>
      <returns>An array of type <see langword="Type" /> containing the classes that were defined in the module and loaded. This array can contain some <see langword="null" /> values.</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>Specifies the attributes for a manifest resource.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>A mask used to retrieve private manifest resources.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>A mask used to retrieve public manifest resources.</summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>Specifies the resource location.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>Specifies that the resource is contained in another assembly.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>Specifies that the resource is contained in the manifest file.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>Specifies an embedded (that is, non-linked) resource.</summary>
    </member>
    <member name="T:System.Reflection.RuntimeReflectionExtensions">
      <summary>Provides methods that retrieve information about types at run time.</summary>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)">
      <summary>Gets an object that represents the method represented by the specified delegate.</summary>
      <param name="del">The delegate to examine.</param>
      <returns>An object that represents the method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="del" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)">
      <summary>Retrieves an object that represents the specified method on the direct or indirect base class where the method was first declared.</summary>
      <param name="method">The method to retrieve information about.</param>
      <returns>An object that represents the specified method's initial declaration on a base class.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)">
      <summary>Retrieves an object that represents the specified event.</summary>
      <param name="type">The type that contains the event.</param>
      <param name="name">The name of the event.</param>
      <returns>An object that represents the specified event, or <see langword="null" /> if the event is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
-or-
<paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)">
      <summary>Retrieves a collection that represents all the events defined on a specified type.</summary>
      <param name="type">The type that contains the events.</param>
      <returns>A collection of events for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)">
      <summary>Retrieves an object that represents a specified field.</summary>
      <param name="type">The type that contains the field.</param>
      <param name="name">The name of the field.</param>
      <returns>An object that represents the specified field, or <see langword="null" /> if the field is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
-or-
<paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)">
      <summary>Retrieves a collection that represents all the fields defined on a specified type.</summary>
      <param name="type">The type that contains the fields.</param>
      <returns>A collection of fields for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)">
      <summary>Returns an interface mapping for the specified type and the specified interface.</summary>
      <param name="typeInfo">The type to retrieve a mapping for.</param>
      <param name="interfaceType">The interface to retrieve a mapping for.</param>
      <returns>An object that represents the interface mapping for the specified interface and type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> is <see langword="null" />.
-or-
<paramref name="interfaceType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="interfaceType" /> is not implemented by <paramref name="typeInfo" />.
-or-
<paramref name="interfaceType" /> does not refer to an interface.
-or-
<paramref name="typeInfo" /> or <paramref name="interfaceType" /> is an open generic type.
-or-
<paramref name="interfaceType" /> is a generic interface, and <paramref name="typeInfo" /> is an array type.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeInfo" /> represents a generic type parameter.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="typeInfo" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> instance whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.
-or-
The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])">
      <summary>Retrieves an object that represents a specified method.</summary>
      <param name="type">The type that contains the method.</param>
      <param name="name">The name of the method.</param>
      <param name="parameters">An array that contains the method's parameters.</param>
      <returns>An object that represents the specified method, or <see langword="null" /> if the method is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
-or-
<paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)">
      <summary>Retrieves a collection that represents all methods defined on a specified type.</summary>
      <param name="type">The type that contains the methods.</param>
      <returns>A collection of methods for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)">
      <summary>Retrieves a collection that represents all the properties defined on a specified type.</summary>
      <param name="type">The type that contains the properties.</param>
      <returns>A collection of properties for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)">
      <summary>Retrieves an object that represents a specified property.</summary>
      <param name="type">The type that contains the property.</param>
      <param name="name">The name of the property.</param>
      <returns>An object that represents the specified property, or <see langword="null" /> if the property is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.
-or-
<paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a <see langword="RuntimeType" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property with the requested name was found.</exception>
    </member>
    <member name="T:System.Reflection.StrongNameKeyPair">
      <summary>Encapsulates access to a public or private key pair used to sign strong name assemblies.</summary>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a <see langword="byte" /> array.</summary>
      <param name="keyPairArray">An array of type <see langword="byte" /> containing the key pair.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairArray" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.IO.FileStream)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a <see langword="FileStream" />.</summary>
      <param name="keyPairFile">A <see langword="FileStream" /> containing the key pair.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairFile" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a <see langword="String" />.</summary>
      <param name="keyPairContainer">A string containing the key pair.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairContainer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Reflection.StrongNameKeyPair.PublicKey">
      <summary>Gets the public part of the public key or public key token of the key pair.</summary>
      <returns>An array of type <see langword="byte" /> containing the public key or public key token of the key pair.</returns>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data required to reinstantiate the current <see cref="T:System.Reflection.StrongNameKeyPair" /> object.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>Represents the exception that is thrown when an attempt is made to invoke an invalid target.</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with an empty message and the root cause of the exception.</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source of and destination for the object.</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the given message and the root cause exception.</summary>
      <param name="message">A <see langword="String" /> describing the reason why the exception occurred.</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>The exception that is thrown by methods invoked through reflection. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>The exception that is thrown when the number of parameters for an invocation does not match the number expected. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with an empty message string and the root cause of the exception.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with its message string set to the given message and the root cause exception.</summary>
      <param name="message">A <see langword="String" /> describing the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>Specifies type attributes.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>Specifies that the type is abstract.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR is interpreted as ANSI.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR is interpreted automatically.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>Specifies that class fields are automatically laid out by the common language runtime.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>Specifies that calling static methods of the type does not force the system to initialize the type.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>Specifies that the type is a class.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>Specifies class semantics information; the current class is contextful (else agile).</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR is interpreted by some implementation-specific means, which includes the possibility of throwing a <see cref="T:System.NotSupportedException" />. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>Used to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>Specifies that class fields are laid out at the specified offsets.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>Type has security associate with it.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>Specifies that the class or interface is imported from another module.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>Specifies that the type is an interface.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>Specifies class layout information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>Specifies that the class is nested with assembly visibility, and is thus accessible only by methods within its assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>Specifies that the class is nested with assembly and family visibility, and is thus accessible only by methods lying in the intersection of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>Specifies that the class is nested with family visibility, and is thus accessible only by methods within its own type and any derived types.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>Specifies that the class is nested with family or assembly visibility, and is thus accessible only by methods lying in the union of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>Specifies that the class is nested with private visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>Specifies that the class is nested with public visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>Specifies that the class is not public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>Specifies that the class is public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>Attributes reserved for runtime use.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>Runtime should check name encoding.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>Specifies that the class is concrete and cannot be extended.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>Specifies that class fields are laid out sequentially, in the order that the fields were emitted to the metadata.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>Specifies that the class can be serialized.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>Specifies that the class is special in a way denoted by the name.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>Used to retrieve string information for native interoperability.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR is interpreted as UNICODE.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>Specifies type visibility information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.WindowsRuntime">
      <summary>Specifies a Windows Runtime type.</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>Wraps a <see cref="T:System.Type" /> object and delegates methods to that <see langword="Type" />.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</summary>
      <param name="delegatingType">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>Gets the assembly of the implemented type.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>Gets the assembly's fully qualified name.</summary>
      <returns>A <see langword="String" /> containing the assembly's fully qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>Gets the base type for the current type.</summary>
      <returns>The base type for a type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>Gets the fully qualified name of the implemented type.</summary>
      <returns>A <see langword="String" /> containing the type's fully qualified name.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>Gets the attributes assigned to the <see langword="TypeDelegator" />.</summary>
      <returns>A <see langword="TypeAttributes" /> object representing the implementation attribute flags.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets the constructor that implemented the <see langword="TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="callConvention">The calling conventions.</param>
      <param name="types">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types. Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
      <returns>A <see langword="ConstructorInfo" /> object for the method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of type <see langword="ConstructorInfo" /> containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</summary>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <returns>An array of objects containing all the custom attributes defined for this type.</returns>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by type.</summary>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <returns>An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or <see langword="null" /> if no custom attributes are defined on this type.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or <see langword="ByRef" />, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array, a pointer or a <see langword="ByRef" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified event.</summary>
      <param name="name">The name of the event to get.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. This method returns <see langword="null" /> if no such event is found.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</summary>
      <returns>An array that contains all the events declared or inherited by the current type. If there are no events, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current <see langword="TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of type <see langword="EventInfo" /> containing the events specified in <paramref name="bindingAttr" />. If there are no events, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</summary>
      <param name="name">The name of the field to find.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>A <see langword="FieldInfo" /> object representing the field declared or inherited by this <see langword="TypeDelegator" /> with the specified name. Returns <see langword="null" /> if no such field is found.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of type <see langword="FieldInfo" /> containing the fields declared or inherited by the current <see langword="TypeDelegator" />. An empty array is returned if there are no matched fields.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="name">The fully qualified name of the interface implemented by the current class.</param>
      <param name="ignoreCase">
        <see langword="true" /> if the case is to be ignored; otherwise, <see langword="false" />.</param>
      <returns>A <see langword="Type" /> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of.</param>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>Returns all the interfaces implemented on the current class and its base classes.</summary>
      <returns>An array of type <see langword="Type" /> containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</summary>
      <param name="name">The name of the member to get.</param>
      <param name="type">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="bindingAttr">The type of members to get.</param>
      <returns>An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base class meeting the specified criteria.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns members specified by <paramref name="bindingAttr" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The method name.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name="callConvention">The calling conventions.</param>
      <param name="types">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types. Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
      <returns>A <see langword="MethodInfoInfo" /> object for the implementation method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of <see langword="MethodInfo" /> objects representing the methods defined on this <see langword="TypeDelegator" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="name">The nested type's name.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>A <see langword="Type" /> object representing the nested type.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of type <see langword="Type" /> containing the nested types.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <returns>An array of <see langword="PropertyInfo" /> objects representing properties defined on this <see langword="TypeDelegator" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The property to get.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</param>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>Gets the GUID (globally unique identifier) of the implemented type.</summary>
      <returns>A GUID.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <param name="name">The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string ("") is passed, the default member is invoked.</param>
      <param name="invokeAttr">The invocation attribute. This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array of type <see langword="Object" /> that contains the number, order, and type of the parameters of the member to be invoked. If <paramref name="args" /> contains an uninitialized <see langword="Object" />, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifier" /> that is the same length as <paramref name="args" />, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use <see langword="ParameterModifier.ByRef" />, and for none, use <see langword="ParameterModifier.None" />. The default binder does exact matching on these. Attributes such as <see langword="In" /> and <see langword="InOut" /> are not used in binding, and can be viewed using <see langword="ParameterInfo" />.</param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures. If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread's <see langword="CultureInfo" /> is used.</param>
      <param name="namedParameters">An array of type <see langword="String" /> containing parameter names that match up, starting at element zero, with the <paramref name="args" /> array. There must be no holes in the array. If <paramref name="args" />. <see langword="Length" /> is greater than <paramref name="namedParameters" />. <see langword="Length" />, the remaining parameters are filled in order.</param>
      <returns>An <see langword="Object" /> representing the return value of the invoked member.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>Returns a value that indicates whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>Returns a value that indicates whether the specified type can be assigned to this type.</summary>
      <param name="typeInfo">The type to check.</param>
      <returns>
        <see langword="true" /> if the specified type can be assigned to this type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>Returns a value that indicates whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsByRefLike" />
    <member name="P:System.Reflection.TypeDelegator.IsCollectible">
      <summary>Gets the <see cref="P:System.Reflection.MemberInfo.IsCollectible" /> value for this object's <see cref="F:System.Reflection.TypeDelegator.typeImpl" />, which indicates whether this object, which is a <see cref="T:System.Reflection.MemberInfo" /> implementation, is part of an assembly held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.</summary>
      <returns>
        <see langword="true" /> if this object, which is a <see cref="T:System.Reflection.MemberInfo" /> implementation, is part of an assembly held in a collectible assembly load context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>Returns a value that indicates whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type.</summary>
      <returns>
        <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</summary>
      <param name="attributeType">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <param name="inherit">An array of custom attributes identified by type.</param>
      <returns>
        <see langword="true" /> if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded.</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
    <member name="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>Returns a value that indicates whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>Returns a value that indicates whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsSZArray" />
    <member name="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</summary>
      <returns>
        <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>Gets a value that identifies this entity in metadata.</summary>
      <returns>A value which, in combination with the module, uniquely identifies this entity in metadata.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>Gets the module that contains the implemented type.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>Gets the name of the implemented type, with the path removed.</summary>
      <returns>A <see langword="String" /> containing the type's non-qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>Gets the namespace of the implemented type.</summary>
      <returns>A <see langword="String" /> containing the type's namespace.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>Gets a handle to the internal metadata representation of an implemented type.</summary>
      <returns>A <see langword="RuntimeTypeHandle" /> object.</returns>
    </member>
    <member name="F:System.Reflection.TypeDelegator.typeImpl">
      <summary>A value indicating type information.</summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</summary>
      <returns>The underlying type.</returns>
    </member>
    <member name="T:System.Reflection.TypeFilter">
      <summary>Filters the classes represented in an array of <see cref="T:System.Type" /> objects.</summary>
      <param name="m">The <see langword="Type" /> object to which the filter is applied.</param>
      <param name="filterCriteria">An arbitrary object used to filter the list.</param>
      <returns>
        <see langword="true" /> to include the <see cref="T:System.Type" /> in the filtered list; otherwise <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.TypeInfo">
      <summary>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.#ctor">
      <summary>Initializes a <see cref="T:System.Reflection.TypeInfo" /> instance.</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.AsType">
      <summary>Returns the current type as a <see cref="T:System.Type" /> object.</summary>
      <returns>The current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredConstructors">
      <summary>Gets a collection of the constructors declared by the current type.</summary>
      <returns>A collection of the constructors declared by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredEvents">
      <summary>Gets a collection of the events defined by the current type.</summary>
      <returns>A collection of the events defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredFields">
      <summary>Gets a collection of the fields defined by the current type.</summary>
      <returns>A collection of the fields defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMembers">
      <summary>Gets a collection of the members defined by the current type.</summary>
      <returns>A collection of the members defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMethods">
      <summary>Gets a collection of the methods defined by the current type.</summary>
      <returns>A collection of the methods defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
      <summary>Gets a collection of the nested types defined by the current type.</summary>
      <returns>A collection of nested types defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredProperties">
      <summary>Gets a collection of the properties defined by the current type.</summary>
      <returns>A collection of the properties defined by the current type.</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.GenericTypeParameters">
      <summary>Gets an array of the generic type parameters of the current instance.</summary>
      <returns>An array that contains the current instance's generic type parameters, or an array of <see cref="P:System.Array.Length" /> zero if the current instance has no generic type parameters.</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
      <summary>Returns an object that represents the specified public event declared by the current type.</summary>
      <param name="name">The name of the event.</param>
      <returns>An object that represents the specified event, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
      <summary>Returns an object that represents the specified public field declared by the current type.</summary>
      <param name="name">The name of the field.</param>
      <returns>An object that represents the specified field, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
      <summary>Returns an object that represents the specified public method declared by the current type.</summary>
      <param name="name">The name of the method.</param>
      <returns>An object that represents the specified method, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
      <summary>Returns a collection that contains all public methods declared on the current type that match the specified name.</summary>
      <param name="name">The method name to search for.</param>
      <returns>A collection that contains methods that match <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
      <summary>Returns an object that represents the specified public nested type declared by the current type.</summary>
      <param name="name">The name of the nested type.</param>
      <returns>An object that represents the specified nested type, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
      <summary>Returns an object that represents the specified public property declared by the current type.</summary>
      <param name="name">The name of the property.</param>
      <returns>An object that represents the specified property, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.TypeInfo.ImplementedInterfaces">
      <summary>Gets a collection of the interfaces implemented by the current type.</summary>
      <returns>A collection of the interfaces implemented by the current type.</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>Returns a value that indicates whether the specified type can be assigned to the current type.</summary>
      <param name="typeInfo">The type to check.</param>
      <returns>
        <see langword="true" /> if the specified type can be assigned to this type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
      <summary>Returns a representation of the current type as a <see cref="T:System.Reflection.TypeInfo" /> object.</summary>
      <returns>A reference to the current type.</returns>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>Provides data for loader resolution events, such as the <see cref="E:System.AppDomain.TypeResolve" />, <see cref="E:System.AppDomain.ResourceResolve" />, <see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" />, and <see cref="E:System.AppDomain.AssemblyResolve" /> events.</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class, specifying the name of the item to resolve.</summary>
      <param name="name">The name of an item to resolve.</param>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class, specifying the name of the item to resolve and the assembly whose dependency is being resolved.</summary>
      <param name="name">The name of an item to resolve.</param>
      <param name="requestingAssembly">The assembly whose dependency is being resolved.</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>Gets the name of the item to resolve.</summary>
      <returns>The name of the item to resolve.</returns>
    </member>
    <member name="P:System.ResolveEventArgs.RequestingAssembly">
      <summary>Gets the assembly whose dependency is being resolved.</summary>
      <returns>The assembly that requested the item specified by the <see cref="P:System.ResolveEventArgs.Name" /> property.</returns>
    </member>
    <member name="T:System.Runtime.AmbiguousImplementationException">
      <summary>The exception that is thrown when there are multiple incompatible interface methods overriding another method.</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.AmbiguousImplementationException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.AmbiguousImplementationException" /> class with a specified error message.</summary>
      <param name="message">The localized error message string.</param>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.AmbiguousImplementationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Runtime.AssemblyTargetedPatchBandAttribute">
      <summary>Specifies patch band information for targeted patching of the .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.AssemblyTargetedPatchBandAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.AssemblyTargetedPatchBandAttribute" /> class.</summary>
      <param name="targetedPatchBand">The patch band.</param>
    </member>
    <member name="P:System.Runtime.AssemblyTargetedPatchBandAttribute.TargetedPatchBand">
      <summary>Gets the patch band.</summary>
      <returns>The patch band information.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>Specifies the name of the property that accesses the attributed field.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="AccessedThroughPropertyAttribute" /> class with the name of the property used to access the attributed field.</summary>
      <param name="propertyName">The name of the property used to access the attributed field.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>Gets the name of the property used to access the attributed field.</summary>
      <returns>The name of the property used to access the attributed field.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute">
      <summary>Indicates whether a method is an asynchronous iterator.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
      <summary>Indicates the type of the async method builder that should be used by a language compiler to build the attributed type when used as the return type of an async method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" /> class.</summary>
      <param name="builderType">The type of the associated builder.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
      <summary>Gets the type of the associated builder.</summary>
      <returns>The type of the associated builder.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>Indicates whether a method is marked with either the Async or async modifier.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder">
      <summary>Represents a builder for asynchronous methods that return a <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Create">
      <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder" /> struct.</summary>
      <returns>The initialized instance.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetException(System.Exception)">
      <summary>Marks the task as failed and binds the specified exception to the task.</summary>
      <param name="exception">The exception to bind to the task.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult">
      <summary>Marks the task as successfully completed.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associates the builder with the specified state machine.</summary>
      <param name="stateMachine">The state machine instance to associate with the builder.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Start``1(``0@)">
      <summary>Begins running the builder with the associated state machine.</summary>
      <param name="stateMachine">The state machine instance, passed by reference.</param>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Task">
      <summary>Gets the task for this builder.</summary>
      <returns>The task for this builder.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
      <summary>Represents a builder for asynchronous methods that returns a <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
      <param name="awaiter">The awaiter.</param>
      <param name="stateMachine">The state machine.</param>
      <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
      <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1" /> struct.</summary>
      <returns>The initialized instance.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Marks the task as failed and binds the specified exception to the task.</summary>
      <param name="exception">The exception to bind to the task.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
      <summary>Marks the task as successfully completed.</summary>
      <param name="result">The result to use to complete the task.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associates the builder with the specified state machine.</summary>
      <param name="stateMachine">The state machine instance to associate with the builder.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Begins running the builder with the associated state machine.</summary>
      <param name="stateMachine">The state machine instance, passed by reference.</param>
      <typeparam name="TStateMachine">The type of the state machine.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
      <summary>Gets the task for this builder.</summary>
      <returns>The task for this builder.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
      <summary>Allows capturing of the expressions passed to a method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> class.</summary>
      <param name="parameterName">The name of the targeted parameter.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
      <summary>Gets the target parameter name of the CallerArgumentExpression</summary>
      <returns>The name of the targeted parameter of the CallerArgumentExpression</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>Allows you to obtain the full path of the source file that contains the caller. This is the file path at the time of compile.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>Specifies parameters that control the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>Marks an assembly as not requiring string-literal interning. In an application domain, the common language runtime creates one string object for each unique string literal, rather than making multiple copies. This behavior, called string interning, internally requires building auxiliary tables that consume memory resources.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>Controls the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified compilation relaxations.</summary>
      <param name="relaxations">The compilation relaxations.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> value.</summary>
      <param name="relaxations">One of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>Gets the compilation relaxations specified when the current object was constructed.</summary>
      <returns>The compilation relaxations specified when the current object was constructed.  
 Use the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> enumeration with the <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> property.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>Distinguishes a compiler-generated element from a user-generated element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>Indicates that a class should be treated as if it has global scope.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>Enables compilers to dynamically attach object fields to managed objects.</summary>
      <typeparam name="TKey">The reference type to which the field is attached.</typeparam>
      <typeparam name="TValue">The field's type. This must be a reference type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>Adds a key to the table.</summary>
      <param name="key">The key to add. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="value">The key's property value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)">
      <summary>Adds the key and value if the key doesn't exist, or updates the existing key's value if it does exist.</summary>
      <param name="key">The key to add or update. May not be <see langword="null" />.</param>
      <param name="value">The value to associate with <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear">
      <summary>Clears all the key/value pairs.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>Represents a method that creates a non-default value to add as part of a key/value pair to a <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object.</summary>
      <param name="key">The key that belongs to the value to create.</param>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
      <returns>An instance of a reference type that represents the value to attach to the specified key.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the parameterless constructor of the class that represents the table's value to create a value that is bound to the specified key.</summary>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <returns>The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the parameterless constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.  


            

 The class that represents the table's value does not define a parameterless constructor.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</summary>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="createValueCallback">A delegate to a method that can create a value for the given <paramref name="key" />. It has a single parameter of type <c>TKey</c>, and returns a value of type <c>TValue</c>.</param>
      <returns>The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="createValueCallback" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>Removes a key and its value from the table.</summary>
      <param name="key">The key to remove.</param>
      <returns>
        <see langword="true" /> if the key is found and removed; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>Gets the value of the specified key.</summary>
      <param name="key">The key that represents an object with an attached property.</param>
      <param name="value">When this method returns, contains the attached property value. If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</param>
      <returns>
        <see langword="true" /> if <paramref name="key" /> is found; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>Provides an awaitable object that enables configured awaits on a task.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>Provides an awaiter for an awaitable (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable" />) object.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>Ends the await on the completed task.</summary>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a faulted state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Gets a value that specifies whether the task being awaited is completed.</summary>
      <returns>
        <see langword="true" /> if the task being awaited is completed; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>Returns an awaiter for this awaitable object.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>Provides an awaitable object that enables configured awaits on a task.</summary>
      <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>Provides an awaiter for an awaitable object(<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1" />).</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>Ends the await on the completed task.</summary>
      <returns>The result of the completed task.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a faulted state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Gets a value that specifies whether the task being awaited has been completed.</summary>
      <returns>
        <see langword="true" /> if the task being awaited has been completed; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>Returns an awaiter for this awaitable object.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable">
      <summary>Provides an awaitable type that enables configured awaits on a <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter">
      <summary>Provides an awaiter for a <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult">
      <summary>Gets the result of the ValueTask.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> has completed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> has completed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" />.</summary>
      <param name="continuation">The continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" />.</summary>
      <param name="continuation">The continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.GetAwaiter">
      <summary>Returns an awaiter for this <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> instance.</summary>
      <returns>The awaiter for this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
      <summary>Provides an awaitable type that enables configured awaits on a <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <typeparam name="TResult">The type of the produced result.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
      <summary>Provides an awaiter for a <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />.</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
      <summary>Gets the result of the <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <returns>The result of the <see cref="T:System.Threading.Tasks.ValueTask`1" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> has completed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> has completed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />.</summary>
      <param name="continuation">The continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />.</summary>
      <param name="continuation">The continuation action for the <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
      <summary>Returns an awaiter for this <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> instance.</summary>
      <returns>The awaiter for this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>Defines a constant value that a compiler can persist for a field or method parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>Gets the constant value stored by this attribute.</summary>
      <returns>The constant value stored by this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>Persists an 8-byte <see cref="T:System.DateTime" /> constant for a field or parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see langword="DateTimeConstantAttribute" /> class with the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <param name="ticks">The number of 100-nanosecond ticks that represent the date and time of this instance.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>Gets the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <returns>The number of 100-nanosecond ticks that represent the date and time of this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>Stores the value of a <see cref="T:System.Decimal" /> constant in metadata. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified signed integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified unsigned integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>Gets the decimal constant stored in this attribute.</summary>
      <returns>The decimal constant stored in this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DefaultDependencyAttribute">
      <summary>Provides a hint to the common language runtime (CLR) indicating how likely a dependency is to be loaded. This class is used in a dependent assembly to indicate what hint should be used when the parent does not specify the <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> attribute.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DefaultDependencyAttribute.#ctor(System.Runtime.CompilerServices.LoadHint)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DefaultDependencyAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.LoadHint" /> binding.</summary>
      <param name="loadHintArgument">One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values that indicates the default binding preference.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DefaultDependencyAttribute.LoadHint">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value that indicates when an assembly loads a dependency.</summary>
      <returns>One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DependencyAttribute">
      <summary>Indicates when a dependency is to be loaded by the referring assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DependencyAttribute.#ctor(System.String,System.Runtime.CompilerServices.LoadHint)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value.</summary>
      <param name="dependentAssemblyArgument">The dependent assembly to bind to.</param>
      <param name="loadHintArgument">One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.DependentAssembly">
      <summary>Gets the value of the dependent assembly.</summary>
      <returns>The name of the dependent assembly.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.LoadHint">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value that indicates when an assembly is to load a dependency.</summary>
      <returns>One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>Indicates that any private members contained in an assembly's types are not available to reflection.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>Initializes a new instances of the <see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>Marks a type definition as discardable.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> class with default values.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute">
      <summary>Allows users of async-enumerable methods to mark the parameter that should receive the cancellation token value from <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.EnumeratorCancellationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>Indicates that a field should be treated as containing a fixed number of elements of the specified primitive type. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> class.</summary>
      <param name="elementType">The type of the elements contained in the buffer.</param>
      <param name="length">The number of elements in the buffer.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>Gets the type of the elements contained in the fixed buffer.</summary>
      <returns>The type of the elements.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>Gets the number of elements in the fixed buffer.</summary>
      <returns>The number of elements in the fixed buffer.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>Provides a static method to create a <see cref="T:System.FormattableString" /> object from a composite format string and its arguments.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>Creates a <see cref="T:System.FormattableString" /> instance from a composite format string and its arguments.</summary>
      <param name="format">A composite format string.</param>
      <param name="arguments">The arguments whose string representations are to be inserted in the result string.</param>
      <returns>The object that represents the composite format string and its arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.  
-or-  
<paramref name="arguments" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>Represents state machines that are generated for asynchronous methods. This type is intended for compiler use only.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>Moves the state machine to its next state.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Configures the state machine with a heap-allocated replica.</summary>
      <param name="stateMachine">The heap-allocated replica.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>Represents an awaiter that schedules continuations when an await operation completes.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>Indicates the name by which an indexer is known in programming languages that do not support indexers directly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> class.</summary>
      <param name="indexerName">The name of the indexer, as shown to other languages.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>Represents an operation that schedules continuations when it completes.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>Schedules the continuation action that's invoked when the instance completes.</summary>
      <param name="continuation">The action to invoke when the operation completes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly.</summary>
      <param name="assemblyName">The name of a friend assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>This property is not implemented.</summary>
      <returns>This property does not return a value.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>Gets the name of the friend assembly to which all types and type members that are marked with the <see langword="internal" /> keyword are to be made visible.</summary>
      <returns>A string that represents the name of the friend assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByRefLikeAttribute">
      <summary>Indicates that a structure is byref-like.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsByRefLikeAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.IsByRefLikeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>Indicates that the modified type has a <see langword="const" /> modifier. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsReadOnlyAttribute">
      <summary>Marks a program element as read-only.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsReadOnlyAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.IsReadOnlyAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Defines a property for accessing the value that an object references.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Gets or sets the value that an object references.</summary>
      <returns>The value that the object references.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>Marks a field as volatile. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>Indicates whether a method in Visual Basic is marked with the <see langword="Iterator" /> modifier.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ITuple">
      <summary>Defines a general-purpose Tuple implementation that allows access to Tuple instance members without knowing the underlying Tuple type.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)">
      <summary>Returns the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 for <see langword="Item1" /> of the <see langword="Tuple" /> to one less than the number of elements in the <see langword="Tuple" />.</param>
      <returns>The value of the specified <see langword="Tuple" /> element.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Length">
      <summary>Gets the number of elements in this <see langword="Tuple" /> instance.</summary>
      <returns>The number of elements in this <see langword="Tuple" /> instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.LoadHint">
      <summary>Specifies the preferred default binding for a dependent assembly.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Always">
      <summary>The dependency is always loaded.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Default">
      <summary>No preference specified.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Sometimes">
      <summary>The dependency is sometimes loaded.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>Defines how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>Specifies that the method is implemented in native code.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>Specifies that the method implementation is in optimized intermediate language (OPTIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>Specifies the details of how a method is implemented. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="value">A bitmask representing the desired <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value which specifies properties of the attributed method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="methodImplOptions">A <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value specifying properties of the attributed method.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>A <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> value indicating what kind of implementation is provided for this method.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>Defines the details of how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>The method should be inlined if possible.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization">
      <summary>The method contains a hot path and should be optimized.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>The method is declared, but its implementation is provided elsewhere.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>The call is internal, that is, it calls a method that is implemented within the common language runtime.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>The method cannot be inlined. Inlining is an optimization by which a method call is replaced with the method body.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>The method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>The method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>The method can be executed by only one thread at a time. Static methods lock on the type, whereas instance methods lock on the instance. Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>The method is implemented in unmanaged code.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>Identifies an assembly as a reference assembly, which contains metadata but no executable code.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class by using the specified description.</summary>
      <param name="description">The description of the reference assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>Gets the description of the reference assembly.</summary>
      <returns>The description of the reference assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>Specifies whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</summary>
      <returns>
        <see langword="true" /> if exceptions that do not derive from the <see cref="T:System.Exception" /> class should appear wrapped with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeFeature">
      <summary>A class whose static <see cref="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)" /> method checks whether a specified feature is supported by the common language runtime.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.DefaultImplementationsOfInterfaces">
      <summary>Indicates that this version of the runtime supports default interface method implementations.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeCompiled">
      <summary>Gets a value that indicates whether the runtime compiles dynamic code.</summary>
      <returns>
        <see langword="true" /> if the runtime compiles dynamic code; <see langword="false" /> if it doesn't compile dynamic code or doesn't know about this property.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeSupported">
      <summary>Gets a value that determines whether the runtime supports dynamic code.</summary>
      <returns>
        <see langword="true" /> if the runtime supports dynamic code; <see langword="false" /> if it either doesn't support dynamic code or doesn't know about this property.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)">
      <summary>Determines whether a specified feature is supported by the common language runtime.</summary>
      <param name="feature">The name of the feature.</param>
      <returns>
        <see langword="true" /> if <paramref name="feature" /> is supported; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.PortablePdb">
      <summary>Gets the name of the portable PDB feature.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode">
      <summary>Represents a method to run when an exception occurs.</summary>
      <param name="userData">Data to pass to the delegate.</param>
      <param name="exceptionThrown">
        <see langword="true" /> to express that an exception was thrown; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>Ensures that the remaining stack space is large enough to execute the average .NET Framework function.</summary>
      <exception cref="T:System.InsufficientExecutionStackException">The available stack space is insufficient to execute the average .NET Framework function.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</summary>
      <param name="o1">The first object to compare.</param>
      <param name="o2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="o1" /> parameter is the same instance as the <paramref name="o2" /> parameter, or if both are <see langword="null" />, or if <c>o1.Equals(o2)</c> returns <see langword="true" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>Executes code using a <see cref="T:System.Delegate" /> while using another <see cref="T:System.Delegate" /> to execute additional code in case of an exception.</summary>
      <param name="code">A delegate to the code to try.</param>
      <param name="backoutCode">A delegate to the code to run if an exception occurs.</param>
      <param name="userData">The data to pass to <paramref name="code" /> and <paramref name="backoutCode" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>Serves as a hash function for a particular object, and is suitable for use in algorithms and data structures that use hash codes, such as a hash table.</summary>
      <param name="o">An object to retrieve the hash code for.</param>
      <returns>A hash code for the object identified by the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>Boxes a value type.</summary>
      <param name="obj">The value type to be boxed.</param>
      <returns>A boxed copy of <paramref name="obj" /> if it is a value class; otherwise, <paramref name="obj" /> itself.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
      <summary>Slices the specified array using the specified range.</summary>
      <param name="array">The array to slice.</param>
      <param name="range">An object that determines the portion of <paramref name="array" /> to include in the slice.</param>
      <typeparam name="T">The type of the elements in the array.</typeparam>
      <returns>The subarray defined by <paramref name="range" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetUninitializedObject(System.Type)">
      <param name="type" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>Provides a fast way to initialize an array from data that is stored in a module.</summary>
      <param name="array">The array to be initialized.</param>
      <param name="fldHandle">A field handle that specifies the location of the data used to initialize the array.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences``1">
      <summary>Returns a value that indicates whether the specified type is a reference type or a value type that contains references.</summary>
      <typeparam name="T">The type.</typeparam>
      <returns>
        <see langword="true" /> if the given type is reference type or value type that contains references; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>Gets the offset, in bytes, to the data in the given string.</summary>
      <returns>The byte offset, from the start of the <see cref="T:System.String" /> object to the first character in the string.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>Designates a body of code as a constrained execution region (CER).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>Designates a body of code as a constrained execution region (CER) without performing any probing.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareContractedDelegate(System.Delegate)">
      <summary>Provides a way for applications to dynamically prepare <see cref="T:System.AppDomain" /> event delegates.</summary>
      <param name="d">The event delegate to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>Indicates that the specified delegate should be prepared for inclusion in a constrained execution region (CER).</summary>
      <param name="d">The delegate type to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>Prepares a method for inclusion in a constrained execution region (CER).</summary>
      <param name="method">A handle to the method to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>Prepares a method for inclusion in a constrained execution region (CER) with the specified instantiation.</summary>
      <param name="method">A handle to the method to prepare.</param>
      <param name="instantiation">The instantiation to pass to the method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>Probes for a certain amount of stack space to ensure that a stack overflow cannot happen within a subsequent block of code (assuming that your code uses only a finite and moderate amount of stack space). We recommend that you use a constrained execution region (CER) instead of this method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>Ensures that the type initializer (also known as a static constructor) for the specified type has been run.</summary>
      <param name="type">A type handle that specifies the type for which a type initializer should be run.</param>
      <exception cref="T:System.TypeInitializationException">The type initializer throws an exception.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>Runs a specified module constructor method.</summary>
      <param name="module">A handle that specifies the module constructor method to run.</param>
      <exception cref="T:System.TypeInitializationException">The module constructor throws an exception.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.TryCode">
      <summary>Represents a delegate to code that should be run in a try block.</summary>
      <param name="userData">Data to pass to the delegate.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.TryEnsureSufficientExecutionStack" />
    <member name="T:System.Runtime.CompilerServices.RuntimeWrappedException">
      <summary>Wraps an exception that does not derive from the <see cref="T:System.Exception" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.#ctor(System.Object)">
      <param name="thrownObject" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException">
      <summary>Gets the object that was wrapped by the <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</summary>
      <returns>The object that was wrapped by the <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>Indicates that a type or member is treated in a special way by the runtime or tools.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>Allows you to determine whether a method is a state machine method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> class.</summary>
      <param name="stateMachineType">The type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>Returns the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</summary>
      <returns>Gets the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StringFreezingAttribute">
      <summary>Deprecated. Freezes a string literal when creating native images using the Ngen.exe (Native Image Generator). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StringFreezingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StringFreezingAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Holds a reference to a value.</summary>
      <typeparam name="T">The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Initializes a new StrongBox which can receive a value when used in a reference call.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value.</summary>
      <param name="value">A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
      <returns>The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SuppressIldasmAttribute">
      <summary>Prevents the Ildasm.exe (IL Disassembler) from disassembling an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SuppressIldasmAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.SuppressIldasmAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>Provides an object that waits for the completion of an asynchronous task.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>Ends the wait for the completion of the asynchronous task.</summary>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> object was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
      <returns>
        <see langword="true" /> if the task has completed; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>Sets the action to perform when the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> object stops waiting for the asynchronous task to complete.</summary>
      <param name="continuation">The action to perform when the wait operation completes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> object was not properly initialized.</exception>
      <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the asynchronous task that is associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>Represents an object that waits for the completion of an asynchronous task and provides a parameter for the result.</summary>
      <typeparam name="TResult">The result for the task.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>Ends the wait for the completion of the asynchronous task.</summary>
      <returns>The result of the completed task.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> object was not properly initialized.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
      <exception cref="T:System.Exception">The task completed in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
      <returns>
        <see langword="true" /> if the task has completed; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>Sets the action to perform when the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> object stops waiting for the asynchronous task to complete.</summary>
      <param name="continuation">The action to perform when the wait operation completes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> object was not properly initialized.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for the asynchronous task associated with this awaiter.</summary>
      <param name="continuation">The action to invoke when the await operation completes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
      <summary>Indicates that the use of a value tuple on a member is meant to be treated as a tuple with element names.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TupleElementNamesAttribute" /> class.</summary>
      <param name="transformNames">A string array that specifies, in a pre-order depth-first traversal of a type's construction, which value tuple occurrences are meant to carry element names.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
      <summary>Specifies, in a pre-order depth-first traversal of a type's construction, which value tuple elements are meant to carry element names.</summary>
      <returns>An array that indicates which value tuple elements are meant to carry element names.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>Specifies a source <see cref="T:System.Type" /> in another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> class.</summary>
      <param name="assemblyFullName">The source <see cref="T:System.Type" /> in another assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> is <see langword="null" /> or empty.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>Gets the assembly-qualified name of the source type.</summary>
      <returns>The assembly-qualified name of the source type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>Specifies a destination <see cref="T:System.Type" /> in another assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> class specifying a destination <see cref="T:System.Type" />.</summary>
      <param name="destination">The destination <see cref="T:System.Type" /> in another assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>Gets the destination <see cref="T:System.Type" /> in another assembly.</summary>
      <returns>The destination <see cref="T:System.Type" /> in another assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>Specifies that a type contains an unmanaged array that might potentially overflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter">
      <summary>Provides an awaiter for a <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.GetResult">
      <summary>Gets the result of the ValueTask.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether the <see cref="T:System.Threading.Tasks.ValueTask" /> has completed.</summary>
      <returns>
        <see langword="true" /> if the ValueTask has completed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for this <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
      <param name="continuation">The continuation action for this <see cref="T:System.Threading.Tasks.ValueTask" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for this ValueTask.</summary>
      <param name="continuation" />
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter`1">
      <summary>Provides an awaiter for a <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
      <summary>Gets the result of the ValueTask.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
      <summary>Gets a value that indicates whether the <see cref="T:System.Threading.Tasks.ValueTask`1" /> has completed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.Tasks.ValueTask`1" /> has completed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
      <summary>Schedules the continuation action for this <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <param name="continuation" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Schedules the continuation action for this ValueTask.</summary>
      <param name="continuation">The continuation action for this <see cref="T:System.Threading.Tasks.ValueTask`1" />.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>Provides the context for waiting when asynchronously switching into a target environment.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>Retrieves a <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> object  for this instance of the class.</summary>
      <returns>The object that is used to monitor the completion of an asynchronous operation.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>Provides an awaiter for switching into a target environment.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>Ends the await operation.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>Gets a value that indicates whether a yield is not required.</summary>
      <returns>Always <see langword="false" />, which indicates that a yield is always required for <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>Sets the continuation to invoke.</summary>
      <param name="continuation">The action to invoke asynchronously.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Posts the <paramref name="continuation" /> back to the current context.</summary>
      <param name="continuation">The action to invoke asynchronously.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuation" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Cer">
      <summary>Specifies a method's behavior when called within a constrained execution region.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
      <summary>In the face of exceptional conditions, the method might fail. In this case, the method will report back to the calling method whether it succeeded or failed. The method must have a CER around the method body to ensure that it can report the return value.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.None">
      <summary>The method, type, or assembly has no concept of a CER. It does not take advantage of CER guarantees.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.Success">
      <summary>In the face of exceptional conditions, the method is guaranteed to succeed. You should always construct a CER around the method that is called, even when it is called from within a non-CER region. A method is successful if it accomplishes what is intended. For example, marking <see cref="P:System.Collections.ArrayList.Count" /> with <c>ReliabilityContractAttribute(Cer.Success)</c> implies that when it is run under a CER, it always returns a count of the number of elements in the <see cref="T:System.Collections.ArrayList" /> and it can never leave the internal fields in an undetermined state.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Consistency">
      <summary>Specifies a reliability contract.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain">
      <summary>In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance">
      <summary>In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess">
      <summary>In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState">
      <summary>In the face of exceptional conditions, the method is guaranteed not to corrupt state. (This does not guarantee that the method will never fail; however, it does guarantee that such a failure will never corrupt state.)</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>Ensures that all finalization code in derived classes is marked as critical.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>Releases all the resources used by the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
      <summary>Instructs the native image generation service to prepare a method for inclusion in a constrained execution region (CER).</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
      <summary>Defines a contract for reliability between the author of some code, and the developers who have a dependency on that code.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" /> class with the specified <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> guarantee and <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> value.</summary>
      <param name="consistencyGuarantee">One of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> values.</param>
      <param name="cer">One of the <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> values.</param>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.Cer">
      <summary>Gets the value that determines the behavior of a method, type, or assembly when called under a Constrained Execution Region (CER).</summary>
      <returns>One of the <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> values.</returns>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.ConsistencyGuarantee">
      <summary>Gets the value of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> reliability contract.</summary>
      <returns>One of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> values.</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>Represents an exception whose state is captured at a certain point in code.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>Creates an <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object that represents the specified exception at the current point in code.</summary>
      <param name="source">The exception whose state is captured, and which is represented by the returned object.</param>
      <returns>An object that represents the specified exception at the current point in code.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>Gets the exception that is represented by the current instance.</summary>
      <returns>The exception that is represented by the current instance.</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>Throws the exception that is represented by the current <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object, after restoring the state that was saved when the exception was captured.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(System.Exception)">
      <param name="source" />
    </member>
    <member name="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
      <summary>Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> class with a specified exception.</summary>
      <param name="exception">The exception that was just thrown by managed code, and that will be examined by the <see cref="E:System.AppDomain.UnhandledException" /> event.</param>
    </member>
    <member name="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception">
      <summary>The managed exception object that corresponds to the exception thrown in managed code.</summary>
      <returns>The newly thrown exception.</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
      <summary>Enables managed code to handle exceptions that indicate a corrupted process state.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>Indicates whether the next blocking garbage collection compacts the large object heap (LOH).</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>The large object heap (LOH) will be compacted during the next blocking generation 2 garbage collection.</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>The large object heap (LOH) is not compacted.</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>Adjusts the time that the garbage collector intrudes in your application.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>Disables garbage collection concurrency and reclaims objects in a batch call. This is the most intrusive mode. This mode is designed for maximum throughput at the expense of responsiveness.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>Enables garbage collection concurrency and reclaims objects while the application is running. This is the default mode for garbage collection on a workstation and is less intrusive than <see cref="F:System.Runtime.GCLatencyMode.Batch" />. It balances responsiveness with throughput. This mode is equivalent to garbage collection on a workstation that is concurrent.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>Enables garbage collection that is more conservative in reclaiming objects. Full collections occur only if the system is under memory pressure, whereas generation 0 and generation 1 collections might occur more frequently. This mode is not available for the server garbage collector.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.NoGCRegion">
      <summary>Indicates that garbage collection is suspended while the app is executing a critical path.  
 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> is a read-only value; that is, you cannot assign the <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> value to the <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property. You specify the no GC region latency mode by calling the <see cref="Overload:System.GC.TryStartNoGCRegion" /> method and terminate it by calling the <see cref="M:System.GC.EndNoGCRegion" /> method.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>Enables garbage collection that tries to minimize latency over an extended period. The collector tries to perform only generation 0, generation 1, and concurrent generation 2 collections. Full blocking collections may still occur if the system is under memory pressure.</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>Specifies the garbage collection settings for the current process.</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>Gets a value that indicates whether server garbage collection is enabled.</summary>
      <returns>
        <see langword="true" /> if server garbage collection is enabled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).</summary>
      <returns>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>Gets or sets the current latency mode for garbage collection.</summary>
      <returns>One of the enumeration values that specifies the latency mode.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property is being set to an invalid value.  
 -or-  
 The <see cref="P:System.Runtime.GCSettings.LatencyMode" /> property cannot be set to <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>Dictates which character set marshaled strings should use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>Marshal strings as multiple-byte character strings: the system default Windows (ANSI) code page on Windows, and UTF-8 on Unix.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>Automatically marshal strings appropriately for the target operating system. See Charsets and marshaling for details. Although the common language runtime default is <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />, languages may override this default. For example, by default C# and Visual Basic mark all methods and types as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>This value is obsolete and has the same behavior as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Marshal strings as Unicode 2-byte character strings.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see langword="ComVisibleAttribute" /> class.</summary>
      <param name="visibility">
        <see langword="true" /> to indicate that the type is visible to COM; otherwise, <see langword="false" />. The default is <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>Gets a value that indicates whether the COM type is visible.</summary>
      <returns>
        <see langword="true" /> if the type is visible; otherwise, <see langword="false" />. The default value is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>Represents a wrapper class for handle resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>Marks the handle for releasing and freeing resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">
        <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>
        <see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle is valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>
        <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />. In this case, it generates a releaseHandleFailed Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>Marks a handle as invalid.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>The base exception type for all COM interop exceptions and structured exception handling (SEH) exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>Initializes a new instance of the <see langword="ExternalException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="ExternalException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="ExternalException" /> class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ExternalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see langword="ExternalException" /> class with a specified error message and the HRESULT of the error.</summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>Gets the <see langword="HRESULT" /> of the error.</summary>
      <returns>The <see langword="HRESULT" /> of the error.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.ToString">
      <summary>Returns a string that contains the HRESULT of the error.</summary>
      <returns>A string that represents the HRESULT.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>Indicates the physical position of fields within the unmanaged representation of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> class with the offset in the structure to the beginning of the field.</summary>
      <param name="offset">The offset in bytes from the beginning of the structure to the beginning of the field.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>Gets the offset from the beginning of the structure to the beginning of the field.</summary>
      <returns>The offset from the beginning of the structure to the beginning of the field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>Provides a way to access a managed object from unmanaged memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>Retrieves the address of an object in a <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> handle.</summary>
      <returns>The address of the pinned object as an <see cref="T:System.IntPtr" />.</returns>
      <exception cref="T:System.InvalidOperationException">The handle is any type other than <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>Allocates a <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> handle for the specified object.</summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> that protects the object from garbage collection. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>Allocates a handle of the specified type for the specified object.</summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />.</param>
      <param name="type">One of the <see cref="T:System.Runtime.InteropServices.GCHandleType" /> values, indicating the type of <see cref="T:System.Runtime.InteropServices.GCHandle" /> to create.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> of the specified type. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <param name="o">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.GCHandle" />.</summary>
      <exception cref="T:System.InvalidOperationException">The handle was freed or never initialized.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>Returns a new <see cref="T:System.Runtime.InteropServices.GCHandle" /> object created from a handle to a managed object.</summary>
      <param name="value">An <see cref="T:System.IntPtr" /> handle to a managed object to create a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object from.</param>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> object that corresponds to the value parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The value of the <paramref name="value" /> parameter is <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>Returns an identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>An identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>Gets a value indicating whether the handle is allocated.</summary>
      <returns>
        <see langword="true" /> if the handle is allocated; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle" /> objects are equal.</summary>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the <paramref name="a" /> and <paramref name="b" /> parameters are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <param name="value">An <see cref="T:System.IntPtr" /> that indicates the handle for which the conversion is required.</param>
      <returns>The stored <see cref="T:System.Runtime.InteropServices.GCHandle" /> object using an internal integer representation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <param name="value">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> for which the integer is required.</param>
      <returns>The integer value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle" /> objects are not equal.</summary>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the <paramref name="a" /> and <paramref name="b" /> parameters are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>Gets or sets the object this handle represents.</summary>
      <returns>The object this handle represents.</returns>
      <exception cref="T:System.InvalidOperationException">The handle was freed, or never initialized.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to retrieve an internal integer representation from.</param>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>Represents the types of handles the <see cref="T:System.Runtime.InteropServices.GCHandle" /> class can allocate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>This handle type represents an opaque handle, meaning you cannot resolve the address of the pinned object through the handle. You can use this type to track an object and prevent its collection by the garbage collector. This enumeration member is useful when an unmanaged client holds the only reference, which is undetectable from the garbage collector, to a managed object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />, but allows the address of the pinned object to be taken. This prevents the garbage collector from moving the object and hence undermines the efficiency of the garbage collector. Use the <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> method to free the allocated handle as soon as possible.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>This handle type is used to track an object, but allow it to be collected. When an object is collected, the contents of the <see cref="T:System.Runtime.InteropServices.GCHandle" /> are zeroed. <see langword="Weak" /> references are zeroed before the finalizer runs, so even if the finalizer resurrects the object, the <see langword="Weak" /> reference is still zeroed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />, but the handle is not zeroed if the object is resurrected during finalization.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>Controls the layout of an object when exported to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>The precise position of each member of an object in unmanaged memory is explicitly controlled, subject to the setting of the <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> field. Each member must use the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> to indicate the position of that field within the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />, and can be noncontiguous.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>Indicates that data should be marshaled from callee back to caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>Represents a wrapper class for operating system handles. This class must be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).  Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</param>
      <param name="ownsHandle">
        <see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>Marks the handle for releasing and freeing resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</summary>
      <param name="success">
        <see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</summary>
      <returns>An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field. If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">
        <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>
        <see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>
        <see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>
        <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />. In this case, it generates a releaseHandleFailed Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>Marks a handle as no longer used.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>Lets you control the physical layout of the data fields of a class or structure in memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifies how the class or structure should be arranged.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">One of the enumeration values that specifies how the class or structure should be arranged.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>Indicates whether string data fields within the class should be marshaled as <see langword="LPWSTR" /> or <see langword="LPSTR" /> by default.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>Controls the alignment of data fields of a class or structure in memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>Indicates the absolute size of the class or structure.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</summary>
      <returns>One of the enumeration values that specifies how the class or structure is arranged.</returns>
    </member>
    <member name="T:System.Runtime.MemoryFailPoint">
      <summary>Checks for sufficient memory resources before executing an operation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</summary>
      <param name="sizeInMegabytes">The required memory size, in megabytes. This must be a positive value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified memory size is negative.</exception>
      <exception cref="T:System.InsufficientMemoryException">There is insufficient memory to begin execution of the code protected by the gate.</exception>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Finalize">
      <summary>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.ObjectHandle">
      <summary>Wraps marshal-by-value object references, allowing them to be returned through an indirection.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object <paramref name="o" />.</summary>
      <param name="o">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" />.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
      <summary>Returns the wrapped object.</summary>
      <returns>The wrapped object.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IDeserializationCallback">
      <summary>Indicates that a class is to be notified when deserialization of the entire object graph has been completed. Note that this interface is not called when deserializing with the XmlSerializer (System.Xml.Serialization.XmlSerializer).</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatterConverter">
      <summary>Provides the connection between an instance of <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and the formatter-provided class best suited to parse the data inside the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)">
      <summary>Converts a value to the given <see cref="T:System.Type" />.</summary>
      <param name="value">The object to be converted.</param>
      <param name="type">The <see cref="T:System.Type" /> into which <paramref name="value" /> is to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>Converts a value to the given <see cref="T:System.TypeCode" />.</summary>
      <param name="value">The object to be converted.</param>
      <param name="typeCode">The <see cref="T:System.TypeCode" /> into which <paramref name="value" /> is to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToBoolean(System.Object)">
      <summary>Converts a value to a <see cref="T:System.Boolean" />.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToByte(System.Object)">
      <summary>Converts a value to an 8-bit unsigned integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToChar(System.Object)">
      <summary>Converts a value to a Unicode character.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDateTime(System.Object)">
      <summary>Converts a value to a <see cref="T:System.DateTime" />.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDecimal(System.Object)">
      <summary>Converts a value to a <see cref="T:System.Decimal" />.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDouble(System.Object)">
      <summary>Converts a value to a double-precision floating-point number.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt16(System.Object)">
      <summary>Converts a value to a 16-bit signed integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt32(System.Object)">
      <summary>Converts a value to a 32-bit signed integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt64(System.Object)">
      <summary>Converts a value to a 64-bit signed integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSByte(System.Object)">
      <summary>Converts a value to a <see cref="T:System.SByte" />.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSingle(System.Object)">
      <summary>Converts a value to a single-precision floating-point number.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToString(System.Object)">
      <summary>Converts a value to a <see cref="T:System.String" />.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt16(System.Object)">
      <summary>Converts a value to a 16-bit unsigned integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt32(System.Object)">
      <summary>Converts a value to a 32-bit unsigned integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt64(System.Object)">
      <summary>Converts a value to a 64-bit unsigned integer.</summary>
      <param name="value">The object to be converted.</param>
      <returns>The converted <paramref name="value" />.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IObjectReference">
      <summary>Indicates that the current interface implementer is a reference to another object.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.</summary>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> from which the current object is deserialized.</param>
      <returns>The actual object that is put into the graph.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. The call will not work on a medium trusted server.</exception>
    </member>
    <member name="T:System.Runtime.Serialization.ISafeSerializationData">
      <summary>Enables serialization of custom exception data in security-transparent code.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization(System.Object)">
      <summary>This method is called when the instance is deserialized.</summary>
      <param name="deserialized">An object that contains the state of the instance.</param>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializable">
      <summary>Allows an object to control its own serialization and deserialization.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>When applied to a method, specifies that the method is called immediately after deserialization of an object in an object graph. The order of deserialization relative to other objects in the graph is non-deterministic.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>When applied to a method, specifies that the method is called during deserialization of an object in an object graph. The order of deserialization relative to other objects in the graph is non-deterministic.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>When applied to a method, specifies that the method is called after serialization of an object in an object graph. The order of serialization relative to other objects in the graph is non-deterministic.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>When applied to a method, specifies that the method is during serialization of an object in an object graph. The order of serialization relative to other objects in the graph is non-deterministic.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OptionalFieldAttribute">
      <summary>Specifies that a field can be missing from a serialization stream so that the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> does not throw an exception.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OptionalFieldAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded">
      <summary>Gets or sets a version number to indicate when the optional field was added.</summary>
      <returns>The version of the <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SafeSerializationEventArgs">
      <summary>Provides data for the <see cref="E:System.Exception.SerializeObjectState" /> event.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SafeSerializationEventArgs.AddSerializedState(System.Runtime.Serialization.ISafeSerializationData)">
      <summary>Stores the state of the exception.</summary>
      <param name="serializedState">A state object that is serialized with the instance.</param>
    </member>
    <member name="P:System.Runtime.Serialization.SafeSerializationEventArgs.StreamingContext">
      <summary>Gets or sets an object that describes the source and destination of a serialized stream.</summary>
      <returns>An object that describes the source and destination of a serialized stream.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationEntry">
      <summary>Holds the value, <see cref="T:System.Type" />, and name of a serialized object.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Name">
      <summary>Gets the name of the object.</summary>
      <returns>The name of the object.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.ObjectType">
      <summary>Gets the <see cref="T:System.Type" /> of the object.</summary>
      <returns>The <see cref="T:System.Type" /> of the object.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Value">
      <summary>Gets the value contained in the object.</summary>
      <returns>The value contained in the object.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>The exception thrown when an error occurs during serialization or deserialization.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class from serialized data.</summary>
      <param name="info">The serialization information object holding the serialized object data in the name-value form.</param>
      <param name="context">The contextual information about the source or destination of the exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with a specified message.</summary>
      <param name="message">Indicates the reason why the exception occurred.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfo">
      <summary>Stores all the data needed to serialize or deserialize an object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
      <param name="converter">The <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> used during deserialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="converter" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
      <param name="converter">The <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> used during deserialization.</param>
      <param name="requireSameTokenInPartialTrust">Indicates whether the object requires same token in partial trust.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)">
      <summary>Adds a Boolean value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Boolean value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)">
      <summary>Adds an 8-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The byte value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)">
      <summary>Adds a Unicode character value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The character value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)">
      <summary>Adds a <see cref="T:System.DateTime" /> value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see cref="T:System.DateTime" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)">
      <summary>Adds a decimal value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The decimal value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">If The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">If a value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)">
      <summary>Adds a double-precision floating-point value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The double value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)">
      <summary>Adds a 16-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="Int16" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)">
      <summary>Adds a 32-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="Int32" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)">
      <summary>Adds a 64-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Int64 value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)">
      <summary>Adds the specified object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store, where it is associated with a specified name.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)">
      <summary>Adds a value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store, where <paramref name="value" /> is associated with <paramref name="name" /> and is serialized as being of <see cref="T:System.Type" /><paramref name="type" />.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
      <param name="type">The <see cref="T:System.Type" /> to associate with the current object. This parameter must always be the type of the object itself or of one of its base classes.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="name" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)">
      <summary>Adds an 8-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="Sbyte" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)">
      <summary>Adds a single-precision floating-point value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The single value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)">
      <summary>Adds a 16-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="UInt16" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)">
      <summary>Adds a 32-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="UInt32" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)">
      <summary>Adds a 64-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see langword="UInt64" /> value to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with <paramref name="name" />.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.AssemblyName">
      <summary>Gets or sets the assembly name of the type to serialize during serialization only.</summary>
      <returns>The full name of the assembly of the type to serialize.</returns>
      <exception cref="T:System.ArgumentNullException">The value the property is set to is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
      <summary>Gets or sets the full name of the <see cref="T:System.Type" /> to serialize.</summary>
      <returns>The full name of the type to serialize.</returns>
      <exception cref="T:System.ArgumentNullException">The value this property is set to is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)">
      <summary>Retrieves a Boolean value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The Boolean value associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a Boolean value.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)">
      <summary>Retrieves an 8-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 8-bit unsigned integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to an 8-bit unsigned integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)">
      <summary>Retrieves a Unicode character value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The Unicode character associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a Unicode character.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)">
      <summary>Retrieves a <see cref="T:System.DateTime" /> value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The <see cref="T:System.DateTime" /> value associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)">
      <summary>Retrieves a decimal value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>A decimal value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a decimal.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)">
      <summary>Retrieves a double-precision floating-point value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The double-precision floating-point value associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a double-precision floating-point value.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
      <summary>Returns a <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> used to iterate through the name-value pairs in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> for parsing the name-value pairs contained in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)">
      <summary>Retrieves a 16-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 16-bit signed integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 16-bit signed integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)">
      <summary>Retrieves a 32-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>The 32-bit signed integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)">
      <summary>Retrieves a 64-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 64-bit signed integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)">
      <summary>Retrieves an 8-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 8-bit signed integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to an 8-bit signed integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)">
      <summary>Retrieves a single-precision floating-point value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>The single-precision floating-point value associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a single-precision floating-point value.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)">
      <summary>Retrieves a <see cref="T:System.String" /> value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The <see cref="T:System.String" /> associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a <see cref="T:System.String" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)">
      <summary>Retrieves a 16-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 16-bit unsigned integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 16-bit unsigned integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)">
      <summary>Retrieves a 32-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 32-bit unsigned integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 32-bit unsigned integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)">
      <summary>Retrieves a 64-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <returns>The 64-bit unsigned integer associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to a 64-bit unsigned integer.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)">
      <summary>Retrieves a value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <param name="name">The name associated with the value to retrieve.</param>
      <param name="type">The <see cref="T:System.Type" /> of the value to retrieve. If the stored value cannot be converted to this type, the system will throw a <see cref="T:System.InvalidCastException" />.</param>
      <returns>The object of the specified <see cref="T:System.Type" /> associated with <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value associated with <paramref name="name" /> cannot be converted to <paramref name="type" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An element with the specified name is not found in the current instance.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsAssemblyNameSetExplicit">
      <summary>Gets whether the assembly name has been explicitly set.</summary>
      <returns>
        <see langword="true" /> if the assembly name has been explicitly set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsFullTypeNameSetExplicit">
      <summary>Gets whether the full type name has been explicitly set.</summary>
      <returns>
        <see langword="true" /> if the full type name has been explicitly set; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.MemberCount">
      <summary>Gets the number of members that have been added to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> store.</summary>
      <returns>The number of members that have been added to the current <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.ObjectType">
      <summary>Returns the type of the object to be serialized.</summary>
      <returns>The type of the object being serialized.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)">
      <summary>Sets the <see cref="T:System.Type" /> of the object to serialize.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfoEnumerator">
      <summary>Provides a formatter-friendly mechanism for parsing the data in <see cref="T:System.Runtime.Serialization.SerializationInfo" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Current">
      <summary>Gets the item currently being examined.</summary>
      <returns>The item currently being examined.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.MoveNext">
      <summary>Updates the enumerator to the next item.</summary>
      <returns>
        <see langword="true" /> if a new element is found; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Name">
      <summary>Gets the name for the item currently being examined.</summary>
      <returns>The item name.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.ObjectType">
      <summary>Gets the type of the item currently being examined.</summary>
      <returns>The type of the item currently being examined.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.Reset">
      <summary>Resets the enumerator to the first item.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current item in the collection.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.SerializationEntry" /> that contains the current serialization data.</returns>
      <exception cref="T:System.InvalidOperationException">The enumeration has not started or has already ended.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Value">
      <summary>Gets the value of the item currently being examined.</summary>
      <returns>The value of the item currently being examined.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator has not started enumerating items or has reached the end of the enumeration.</exception>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with a given context state.</summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specify the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class with a given context state, and some additional information.</summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specify the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
      <param name="additional">Any additional information to be associated with the <see cref="T:System.Runtime.Serialization.StreamingContext" />. This information is available to any object that implements <see cref="T:System.Runtime.Serialization.ISerializable" /> or any serialization surrogate. Most users do not need to set this parameter.</param>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
      <summary>Gets context specified as part of the additional context.</summary>
      <returns>The context specified as part of the additional context.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances contain the same values.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the specified object is an instance of <see cref="T:System.Runtime.Serialization.StreamingContext" /> and equals the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>Returns a hash code of this object.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> value that contains the source or destination of the serialization for this <see cref="T:System.Runtime.Serialization.StreamingContext" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
      <summary>Gets the source or destination of the transmitted data.</summary>
      <returns>During serialization, the destination of the transmitted data. During deserialization, the source of the data.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
      <summary>Defines a set of flags that specifies the source or destination context for the stream during serialization.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
      <summary>Specifies that the serialized data can be transmitted to or received from any of the other contexts.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
      <summary>Specifies that the object graph is being cloned. Users can assume that the cloned graph will continue to exist within the same process and be safe to access handles or other references to unmanaged resources.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
      <summary>Specifies that the source or destination context is a different AppDomain. (For a description of AppDomains, see Application Domains).</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
      <summary>Specifies that the source or destination context is a different computer.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
      <summary>Specifies that the source or destination context is a different process on the same computer.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
      <summary>Specifies that the source or destination context is a file. Users can assume that files will last longer than the process that created them and not serialize objects in such a way that deserialization will require accessing any data from the current process.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
      <summary>Specifies that the serialization context is unknown.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
      <summary>Specifies that the source or destination context is a persisted store, which could include databases, files, or other backing stores. Users can assume that persisted data will last longer than the process that created the data and not serialize objects so that deserialization will require accessing any data from the current process.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
      <summary>Specifies that the data is remoted to a context in an unknown location. Users cannot make any assumptions whether this is on the same computer.</summary>
    </member>
    <member name="T:System.Runtime.TargetedPatchingOptOutAttribute">
      <summary>Indicates that the .NET Framework class library method to which this attribute is applied is unlikely to be affected by servicing releases, and therefore is eligible to be inlined across Native Image Generator (NGen) images.</summary>
    </member>
    <member name="M:System.Runtime.TargetedPatchingOptOutAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> class.</summary>
      <param name="reason">The reason why the method to which the <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> attribute is applied is considered to be eligible for inlining across Native Image Generator (NGen) images.</param>
    </member>
    <member name="P:System.Runtime.TargetedPatchingOptOutAttribute.Reason">
      <summary>Gets the reason why the method to which this attribute is applied is considered to be eligible for inlining across Native Image Generator (NGen) images.</summary>
      <returns>The reason why the method is considered to be eligible for inlining across NGen images.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>Identifies the version of the .NET Framework that a particular assembly was compiled against.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> class by specifying the .NET Framework version against which an assembly was built.</summary>
      <param name="frameworkName">The version of the .NET Framework against which the assembly was built.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>Gets the display name of the .NET Framework version against which an assembly was built.</summary>
      <returns>The display name of the .NET Framework version.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>Gets the name of the .NET Framework version against which a particular assembly was compiled.</summary>
      <returns>The name of the .NET Framework version with which the assembly was compiled.</returns>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>References a variable-length argument list.</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>Represents a field using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>Indicates whether the current instance is equal to the specified object.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeFieldHandle" /> and equal to the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.RuntimeFieldHandle" />.</summary>
      <param name="handle">The <see cref="T:System.RuntimeFieldHandle" /> to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="handle" /> is equal to the value of the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by the current instance.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with serialization information.</param>
      <param name="context">(Reserved) The place to store and retrieve serialized data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="P:System.RuntimeFieldHandle.Value" /> property of the current instance is not a valid handle.</exception>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indicates whether two <see cref="T:System.RuntimeFieldHandle" /> structures are equal.</summary>
      <param name="left">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indicates whether two <see cref="T:System.RuntimeFieldHandle" /> structures are not equal.</summary>
      <param name="left">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.RuntimeFieldHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>Gets a handle to the field represented by the current instance.</summary>
      <returns>An <see cref="T:System.IntPtr" /> that contains the handle to the field represented by the current instance.</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>Indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">A <see cref="T:System.Object" /> to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeMethodHandle" /> and equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>Indicates whether this instance is equal to a specified <see cref="T:System.RuntimeMethodHandle" />.</summary>
      <param name="handle">A <see cref="T:System.RuntimeMethodHandle" /> to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="handle" /> is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>Obtains a pointer to the method represented by this instance.</summary>
      <returns>A pointer to the method represented by this instance.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary permission to perform this operation.</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by this instance.</summary>
      <param name="info">The object to populate with serialization information.</param>
      <param name="context">(Reserved) The place to store and retrieve serialized data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeMethodHandle.Value" /> is invalid.</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are equal.</summary>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="left" /> is equal to the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are not equal.</summary>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="left" /> is unequal to the value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>Gets the value of this instance.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> that is the internal metadata representation of a method.</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>Represents a type using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <param name="obj">An object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>Indicates whether the specified <see cref="T:System.RuntimeTypeHandle" /> structure is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> structure to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="handle" /> is equal to the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetModuleHandle">
      <summary>Gets a handle to the module that contains the type represented by the current instance.</summary>
      <returns>A <see cref="T:System.ModuleHandle" /> structure representing a handle to the module that contains the type represented by the current instance.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the type represented by the current instance.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">(Reserved) The location where serialized data will be stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeTypeHandle.Value" /> is invalid.</exception>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indicates whether an object and a <see cref="T:System.RuntimeTypeHandle" /> structure are equal.</summary>
      <param name="left">An object to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is equal to an object.</summary>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is equal to <paramref name="left" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indicates whether an object and a <see cref="T:System.RuntimeTypeHandle" /> structure are not equal.</summary>
      <param name="left">An object to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is not equal to an object.</summary>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is not equal to <paramref name="left" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>Gets a handle to the type represented by this instance.</summary>
      <returns>A handle to the type represented by this instance.</returns>
    </member>
    <member name="T:System.SByte">
      <summary>Represents an 8-bit signed integer.</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="obj">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="obj" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="obj" />.  

  Zero  

  This instance is equal to <paramref name="obj" />.  

  Greater than zero  

  This instance is greater than <paramref name="obj" />.  

 -or-  

 <paramref name="obj" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not an <see cref="T:System.SByte" />.</exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
      <param name="value">An 8-bit signed integer to compare.</param>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.</summary>
      <param name="obj">An <see cref="T:System.SByte" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.SByte" />.</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="M:System.SByte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <returns>An 8-bit signed integer that is equivalent to the number contained in the <paramref name="s" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
      <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the thread current culture is used.</param>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>None. This conversion is not supported.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is unused.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.</param>
      <param name="provider">A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to an object of type <paramref name="type" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.SByte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> class.</summary>
    </member>
    <member name="P:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel">
      <summary>Gets or sets the default partial trust visibility for code that is marked with the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) attribute.</summary>
      <returns>One of the enumeration values. The default is <see cref="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>The exception that is thrown when an error occurs during a cryptographic operation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with the specified <see langword="HRESULT" /> error code.</summary>
      <param name="hr">The <see langword="HRESULT" /> error code.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with a specified error message in the specified format.</summary>
      <param name="format">The format used to output the error message.</param>
      <param name="insert">The error message that explains the reason for the exception.</param>
    </member>
    <member name="T:System.Security.PartialTrustVisibilityLevel">
      <summary>Specifies the default partial-trust visibility for code that is marked with the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) attribute.</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault">
      <summary>The assembly has been audited for partial trust, but it is not visible to partial-trust code in all hosts. To make the assembly visible to partial-trust code, add it to the <see cref="P:System.AppDomainSetup.PartialTrustVisibleAssemblies" /> property.</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts">
      <summary>The assembly can always be called by partial-trust code.</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>Specifies that code or an assembly performs security-critical operations.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityCriticalAttribute" /> class.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor(System.Security.SecurityCriticalScope)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityCriticalAttribute" /> class with the specified scope.</summary>
      <param name="scope">One of the enumeration values that specifies the scope of the attribute.</param>
    </member>
    <member name="P:System.Security.SecurityCriticalAttribute.Scope">
      <summary>Gets the scope for the attribute.</summary>
      <returns>One of the enumeration values that specifies the scope of the attribute. The default is <see cref="F:System.Security.SecurityCriticalScope.Explicit" />, which indicates that the attribute applies only to the immediate target.</returns>
    </member>
    <member name="T:System.Security.SecurityCriticalScope">
      <summary>Specifies the scope of a <see cref="T:System.Security.SecurityCriticalAttribute" />.</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Everything">
      <summary>The attribute applies to all code that follows it.</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Explicit">
      <summary>The attribute applies only to the immediate target.</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>The exception that is thrown when a security error is detected.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message and the permission type that caused the exception to be thrown.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="type">The type of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message, the permission type that caused the exception to be thrown, and the permission state.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="type">The type of the permission that caused the exception to be thrown.</param>
      <param name="state">The state of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="P:System.Security.SecurityException.Demanded">
      <summary>Gets or sets the demanded security permission, permission set, or permission set collection that failed.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.DenySetInstance">
      <summary>Gets or sets the denied security permission, permission set, or permission set collection that caused a demand to fail.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.FailedAssemblyInfo">
      <summary>Gets or sets information about the failed assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> that identifies the failed assembly.</returns>
    </member>
    <member name="M:System.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Security.SecurityException" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.SecurityException.GrantedSet">
      <summary>Gets or sets the granted permission set of the assembly that caused the <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>The XML representation of the granted set of the assembly.</returns>
    </member>
    <member name="P:System.Security.SecurityException.Method">
      <summary>Gets or sets the information about the method associated with the exception.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object describing the method.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionState">
      <summary>Gets or sets the state of the permission that threw the exception.</summary>
      <returns>The state of the permission at the time the exception was thrown.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionType">
      <summary>Gets or sets the type of the permission that failed.</summary>
      <returns>The type of the permission that failed.</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermitOnlySetInstance">
      <summary>Gets or sets the permission, permission set, or permission set collection that is part of the permit-only stack frame that caused a security check to fail.</summary>
      <returns>A permission, permission set, or permission set collection object.</returns>
    </member>
    <member name="P:System.Security.SecurityException.RefusedSet">
      <summary>Gets or sets the refused permission set of the assembly that caused the <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>The XML representation of the refused permission set of the assembly.</returns>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>Returns a representation of the current <see cref="T:System.Security.SecurityException" />.</summary>
      <returns>A string representation of the current <see cref="T:System.Security.SecurityException" />.</returns>
    </member>
    <member name="P:System.Security.SecurityException.Url">
      <summary>Gets or sets the URL of the assembly that caused the exception.</summary>
      <returns>A URL that identifies the location of the assembly.</returns>
    </member>
    <member name="T:System.Security.SecurityRulesAttribute">
      <summary>Indicates the set of security rules the common language runtime should enforce for an assembly.</summary>
    </member>
    <member name="M:System.Security.SecurityRulesAttribute.#ctor(System.Security.SecurityRuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityRulesAttribute" /> class using the specified rule set value.</summary>
      <param name="ruleSet">One of the enumeration values that specifies the transparency rules set.</param>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.RuleSet">
      <summary>Gets the rule set to be applied.</summary>
      <returns>One of the enumeration values that specifies the transparency rules to be applied.</returns>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.SkipVerificationInFullTrust">
      <summary>Determines whether fully trusted transparent code should skip Microsoft intermediate language (MSIL) verification.</summary>
      <returns>
        <see langword="true" /> if MSIL verification should be skipped; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.SecurityRuleSet">
      <summary>Identifies the set of security rules the common language runtime should enforce for an assembly.</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level1">
      <summary>Indicates that the runtime will enforce level 1 (.NET Framework version 2.0) transparency rules.</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level2">
      <summary>Indicates that the runtime will enforce level 2 transparency rules.</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.None">
      <summary>Unsupported. Using this value results in a <see cref="T:System.IO.FileLoadException" /> being thrown.</summary>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>Identifies types or members as security-critical and safely accessible by transparent code.</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>Specifies that an assembly cannot cause an elevation of privilege.</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityTransparentAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.SecurityTreatAsSafeAttribute">
      <summary>Identifies which of the nonpublic <see cref="T:System.Security.SecurityCriticalAttribute" /> members are accessible by transparent code within the assembly.</summary>
    </member>
    <member name="M:System.Security.SecurityTreatAsSafeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecurityTreatAsSafeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.SuppressUnmanagedCodeSecurityAttribute">
      <summary>Allows managed code to call into unmanaged code without a stack walk. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>Marks modules containing unverifiable code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.UnverifiableCodeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>The exception that is thrown when the security policy requires code to be type safe and the verification process is unable to verify that the code is type safe.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with an explanatory message.</summary>
      <param name="message">A message indicating the reason the exception occurred.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.SerializableAttribute">
      <summary>Indicates that a class can be serialized. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.SerializableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.SerializableAttribute" /> class.</summary>
    </member>
    <member name="T:System.Single">
      <summary>Represents a single-precision floating-point number.</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

 -or-  

 This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.  

  Zero  

  This instance is equal to <paramref name="value" />.  

 -or-  

 This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</summary>
      <param name="value">A single-precision floating-point number to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

 -or-  

 This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.  

  Zero  

  This instance is equal to <paramref name="value" />.  

 -or-  

 Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</returns>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Single" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Single" />.</returns>
    </member>
    <member name="M:System.Single.IsFinite(System.Single)">
      <summary>Determines whether the specified value is finite (zero, subnormal or normal).</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if the specified value is finite (zero, subnormal or normal); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN" />).</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNegative(System.Single)">
      <summary>Determines whether the specified value is negative.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if negative, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsNormal(System.Single)">
      <summary>Determines whether the specified value is normal.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> is normal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.IsSubnormal(System.Single)">
      <summary>Determines whether the specified value is subnormal.</summary>
      <param name="f">A single-precision floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="f" /> is subnormal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>Represents not a number (<see langword="NaN" />). This field is constant.</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than or equal to another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than or equal to another specified <see cref="T:System.Single" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</summary>
      <param name="s">A string that contains a number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.Single" /> value.</param>
      <param name="provider">An object that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="result">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Span`1">
      <summary>Provides a type- and memory-safe representation of a contiguous region of arbitrary memory.</summary>
      <typeparam name="T">The type of items in the <see cref="T:System.Span`1" />.</typeparam>
    </member>
    <member name="M:System.Span`1.#ctor(`0[])">
      <summary>Creates a new <see cref="T:System.Span`1" /> object over the entirety of a specified array.</summary>
      <param name="array">The array from which to create the <see cref="T:System.Span`1" /> object.</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Span`1" /> object that includes a specified number of elements of an array starting at a specified index.</summary>
      <param name="array">The source array.</param>
      <param name="start">The index of the first element to include in the new <see cref="T:System.Span`1" />.</param>
      <param name="length">The number of elements to include in the new <see cref="T:System.Span`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.
-or-
<paramref name="start" /> is outside the bounds of the array.
-or-
<paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Span`1.#ctor(System.Void*,System.Int32)">
      <summary>Creates a new <see cref="T:System.Span`1" /> object  from a specified number of <typeparamref name="T" /> elements starting at a specified memory address.</summary>
      <param name="pointer">A pointer to the starting address of a specified number of <typeparamref name="T" /> elements in memory.</param>
      <param name="length">The number of <typeparamref name="T" /> elements to be included in the <see cref="T:System.Span`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> is a reference type or contains pointers and therefore cannot be stored in unmanaged memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is negative.</exception>
    </member>
    <member name="M:System.Span`1.Clear">
      <summary>Clears the contents of this <see cref="T:System.Span`1" /> object.</summary>
    </member>
    <member name="M:System.Span`1.CopyTo(System.Span{`0})">
      <summary>Copies the contents of this <see cref="T:System.Span`1" /> into a destination <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The destination <see cref="T:System.Span`1" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is shorter than the source <see cref="T:System.Span`1" />.</exception>
    </member>
    <member name="P:System.Span`1.Empty">
      <summary>Returns an empty <see cref="T:System.Span`1" /> object.</summary>
      <returns>An empty <see cref="T:System.Span`1" /> object.</returns>
    </member>
    <member name="T:System.Span`1.Enumerator">
      <summary>Provides an enumerator for the elements of a <see cref="T:System.Span`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Span`1.Enumerator.Current">
      <summary>Gets a reference to the item at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Span`1" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Span`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next item of the <see cref="T:System.Span`1" />.</summary>
      <returns>
        <see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</returns>
    </member>
    <member name="M:System.Span`1.Equals(System.Object)">
      <summary>Calls to this method are not supported.</summary>
      <param name="obj">Not supported.</param>
      <returns>Calls to this method are not supported.</returns>
      <exception cref="T:System.NotSupportedException">Calls to this method are not supported.</exception>
    </member>
    <member name="M:System.Span`1.Fill(`0)">
      <summary>Fills the elements of this span with a specified value.</summary>
      <param name="value">The value to assign to each element of the span.</param>
    </member>
    <member name="M:System.Span`1.GetEnumerator">
      <summary>Returns an enumerator for this <see cref="T:System.Span`1" />.</summary>
      <returns>An enumerator for this span.</returns>
    </member>
    <member name="M:System.Span`1.GetHashCode">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Calls to this method always throw a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Calls to this method are not supported.</exception>
    </member>
    <member name="M:System.Span`1.GetPinnableReference">
      <summary>Returns a reference to the element of the <see cref="T:System.Span`1" /> at index zero.</summary>
      <returns>A reference to the element of the <see cref="T:System.Span`1" /> at index zero, or <see langword="null" /> if <see cref="P:System.Span`1.IsEmpty" /> is  <see langword="true" />.</returns>
    </member>
    <member name="P:System.Span`1.IsEmpty">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Span`1" /> is empty.</summary>
      <returns>
        <see langword="true" /> if the current span is empty; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Span`1.Item(System.Int32)">
      <summary>Gets the element at the specified zero-based index.</summary>
      <param name="index">The zero-based index of the element.</param>
      <returns>The element at the specified index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than or equal to <see cref="P:System.Span`1.Length" />.</exception>
    </member>
    <member name="P:System.Span`1.Length">
      <summary>Returns the length of the current span.</summary>
      <returns>The length of the current span.</returns>
    </member>
    <member name="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})">
      <summary>Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are equal.</summary>
      <param name="left">The first span to compare.</param>
      <param name="right">The second span to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}">
      <summary>Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.Span`1" />.</summary>
      <param name="segment">The array segment to be converted to a <see cref="T:System.Span`1" />.</param>
      <returns>A span that corresponds to the array segment.</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}">
      <summary>Defines an implicit conversion of a <see cref="T:System.Span`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="span">The object to convert to a <see cref="T:System.ReadOnlySpan`1" />.</param>
      <returns>A read-only span that corresponds to the current instance.</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(T[])~System.Span{`0}">
      <summary>Defines an implicit conversion of an array to a <see cref="T:System.Span`1" />.</summary>
      <param name="array">The array to convert to a <see cref="T:System.Span`1" />.</param>
      <returns>The span that corresponds to <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})">
      <summary>Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are not equal.</summary>
      <param name="left">The first span to compare.</param>
      <param name="right">The second span to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32)">
      <summary>Forms a slice out of the current span that begins at a specified index.</summary>
      <param name="start">The index at which to begin the slice.</param>
      <returns>A span that consists of all elements of the current span from <paramref name="start" /> to the end of the span.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> is less than zero or greater than <see cref="P:System.Span`1.Length" />.</exception>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32,System.Int32)">
      <summary>Forms a slice out of the current span starting at a specified index for a specified length.</summary>
      <param name="start">The index at which to begin this slice.</param>
      <param name="length">The desired length for the slice.</param>
      <returns>A span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="start" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> or <paramref name="start" /> + <paramref name="length" /> is less than zero or greater than <see cref="P:System.Span`1.Length" />.</exception>
    </member>
    <member name="M:System.Span`1.ToArray">
      <summary>Copies the contents of this span into a new array.</summary>
      <returns>An array containing the data in the current span.</returns>
    </member>
    <member name="M:System.Span`1.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Span`1" /> object.</summary>
      <returns>The string representation of this <see cref="T:System.Span`1" /> object.</returns>
    </member>
    <member name="M:System.Span`1.TryCopyTo(System.Span{`0})">
      <summary>Attempts to copy the current <see cref="T:System.Span`1" /> to a destination <see cref="T:System.Span`1" /> and returns a value that indicates whether the copy operation succeeded.</summary>
      <param name="destination">The target of the copy operation.</param>
      <returns>
        <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The requested operation caused a stack overflow." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is single-threaded apartment (STA).</summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.String">
      <summary>Represents text as a sequence of UTF-16 code units.</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</summary>
      <param name="value">A pointer to a null-terminated array of Unicode characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">A pointer to an array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</summary>
      <param name="c">A Unicode character.</param>
      <param name="count">The number of times <paramref name="c" /> occurs.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</summary>
      <param name="value">An array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">An array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.  
-or-  
The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</exception>
    </member>
    <member name="M:System.String.#ctor(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</summary>
      <param name="value">A pointer to a null-terminated array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" /> specifies an invalid address.</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</summary>
      <param name="value">A pointer to an array of 8-bit signed integers. The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.  
-or-  
The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.  
-or-  
The length of the new string to initialize is too large to allocate.</exception>
      <exception cref="T:System.ArgumentException">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.  
 -or-  
 A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <param name="enc">An object that specifies how the array referenced by <paramref name="value" /> is encoded. If <paramref name="enc" /> is <see langword="null" />, ANSI encoding is assumed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.  
-or-  
The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.  
-or-  
The length of the new string to initialize is too large to allocate.</exception>
      <exception cref="T:System.ArgumentException">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.  
 -or-  
 A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</summary>
      <param name="index">A position in the current string.</param>
      <returns>The object at position <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero.</exception>
    </member>
    <member name="M:System.String.Clone">
      <summary>Returns a reference to this instance of <see cref="T:System.String" />.</summary>
      <returns>This instance of <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  

  Zero  

  The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.  
-or-  
Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  

  Zero  

  The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.  
-or-  
Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <returns>An integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  

  Zero  

  The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.  
-or-  
Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The starting position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The starting position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <param name="options">Options to use when performing the comparison (such as ignoring case or symbols).</param>
      <returns>An integer that indicates the lexical relationship between the two substrings, as shown in the following table.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  

  Zero  

  The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.  
-or-  
<paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.  
-or-  
Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  

  Zero  

  The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.  
-or-  
Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  

  Zero  

 <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  

  Greater than zero  

 <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  

  Zero  

 <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  

  Greater than zero  

 <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">An object that supplies culture-specific comparison information.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  

  Zero  

 <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  

  Greater than zero  

 <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options to use when performing the comparison (such as ignoring case or symbols).</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  

  Zero  

 <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  

  Greater than zero  

 <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  

  Zero  

 <paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.  

  Greater than zero  

 <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</summary>
      <param name="strA">The first string to use in the comparison.</param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />.</param>
      <param name="strB">The second string to use in the comparison.</param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

  The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.  

  Zero  

  The substrings are equal, or <paramref name="length" /> is zero.  

  Greater than zero  

  The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.  
-or-  
<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</summary>
      <param name="strA">The first string to compare.</param>
      <param name="strB">The second string to compare.</param>
      <returns>An integer that indicates the lexical relationship between the two comparands.  
  Value  

  Condition  

  Less than zero  

 <paramref name="strA" /> is less than <paramref name="strB" />.  

  Zero  

 <paramref name="strA" /> and <paramref name="strB" /> are equal.  

  Greater than zero  

 <paramref name="strA" /> is greater than <paramref name="strB" />.</returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <param name="value">An object that evaluates to a <see cref="T:System.String" />.</param>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.  
  Value  

  Condition  

  Less than zero  

  This instance precedes <paramref name="value" />.  

  Zero  

  This instance has the same position in the sort order as <paramref name="value" />.  

  Greater than zero  

  This instance follows <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</summary>
      <param name="strB">The string to compare with this instance.</param>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.  
  Value  

  Condition  

  Less than zero  

  This instance precedes <paramref name="strB" />.  

  Zero  

  This instance has the same position in the sort order as <paramref name="strB" />.  

  Greater than zero  

  This instance follows <paramref name="strB" />.  

 -or-  

 <paramref name="strB" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</summary>
      <param name="values">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</param>
      <returns>The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>Creates the string  representation of a specified object.</summary>
      <param name="arg0">The object to represent, or <see langword="null" />.</param>
      <returns>The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>Concatenates the string representations of two specified objects.</summary>
      <param name="arg0">The first object to concatenate.</param>
      <param name="arg1">The second object to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>Concatenates the string representations of three specified objects.</summary>
      <param name="arg0">The first object to concatenate.</param>
      <param name="arg1">The second object to concatenate.</param>
      <param name="arg2">The third object to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</summary>
      <param name="args">An object array that contains the elements to concatenate.</param>
      <returns>The concatenated string representations of the values of the elements in <paramref name="args" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of two specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" /> and <paramref name="str1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of three specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" /> and <paramref name="str2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatenates the string representations of four specified read-only character spans.</summary>
      <param name="str0">The first read-only character span to concatenate.</param>
      <param name="str1">The second read-only character span to concatenate.</param>
      <param name="str2">The third read-only character span to concatenate.</param>
      <param name="str3">The fourth read-only character span to concatenate.</param>
      <returns>The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> and <paramref name="str3" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>Concatenates two specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>Concatenates three specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <param name="str2">The third string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>Concatenates four specified instances of <see cref="T:System.String" />.</summary>
      <param name="str0">The first string to concatenate.</param>
      <param name="str1">The second string to concatenate.</param>
      <param name="str2">The third string to concatenate.</param>
      <param name="str3">The fourth string to concatenate.</param>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>Concatenates the elements of a specified <see cref="T:System.String" /> array.</summary>
      <param name="values">An array of string instances.</param>
      <returns>The concatenated elements of <paramref name="values" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</summary>
      <param name="values">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <returns>The concatenated members in <paramref name="values" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Contains(System.Char)">
      <summary>Returns a value indicating whether a specified character occurs within this string.</summary>
      <param name="value">The character to seek.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.Char,System.StringComparison)">
      <summary>Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.</summary>
      <param name="value">The character to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>Returns a value indicating whether a specified substring occurs within this string.</summary>
      <param name="value">The string to seek.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Contains(System.String,System.StringComparison)">
      <summary>Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</summary>
      <param name="str">The string to copy.</param>
      <returns>A new string with the same value as <paramref name="str" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</summary>
      <param name="sourceIndex">The index of the first character in this instance to copy.</param>
      <param name="destination">An array of Unicode characters to which characters in this instance are copied.</param>
      <param name="destinationIndex">The index in <paramref name="destination" /> at which the copy operation begins.</param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative  
-or-  
<paramref name="sourceIndex" /> does not identify a position in the current instance.  
-or-  
<paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.  
-or-  
<paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance  
-or-  
<paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</exception>
    </member>
    <member name="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})">
      <param name="length" />
      <param name="state" />
      <param name="action" />
      <typeparam name="TState" />
    </member>
    <member name="F:System.String.Empty">
      <summary>Represents the empty string. This field is read-only.</summary>
    </member>
    <member name="M:System.String.EndsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>Determines whether the end of this string instance matches the specified string.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Determines whether the end of this string instance matches the specified string when compared using the specified culture.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">Cultural information that determines how this instance and <paramref name="value" /> are compared. If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</summary>
      <param name="value">The string to compare to the substring at the end of this instance.</param>
      <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.EnumerateRunes">
      <summary>Returns an enumeration of <see cref="T:System.Text.Rune" /> from this string.</summary>
      <returns>A string rune enumerator.</returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</summary>
      <param name="obj">The string to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.  If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</summary>
      <param name="value">The string to compare to this instance.</param>
      <returns>
        <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />. If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />. If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
      <returns>
        <see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>Determines whether this string and a specified <see cref="T:System.String" /> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <param name="value">The string to compare to this instance.</param>
      <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>
        <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <returns>A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is not zero.</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is not zero or one.</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than zero, or greater than two.</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>Replaces the format items in a string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>Replaces one or more format items in a string with the string representation of a specified object.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <returns>A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.  
 -or-  
 The index of a format item is not zero.</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of two specified objects.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is not zero or one.</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a string with the string representation of three specified objects.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than zero, or greater than two.</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</summary>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</exception>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>Retrieves an object that can iterate through the individual characters in this string.</summary>
      <returns>An enumerator object.</returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})">
      <summary>Returns the hash code for the provided read-only character span.</summary>
      <param name="value">A read-only character span.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Returns the hash code for the provided read-only character span using the specified rules.</summary>
      <param name="value">A read-only character span.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.StringComparison)">
      <summary>Returns the hash code for this string using the specified rules.</summary>
      <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetPinnableReference">
      <summary>Returns a reference to the element of the string at index zero.</summary>
      <returns>A character representing the reference to the element of the string at index zero.</returns>
      <exception cref="T:System.NullReferenceException">The string is null.</exception>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.String" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</summary>
      <param name="value">A Unicode character to seek.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.  
-or-  
<paramref name="startIndex" /> is greater than the length of this string.  
-or-  
<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. A parameter specifies the type of search to use for the specified character.</summary>
      <param name="value">The character to seek.</param>
      <param name="comparisonType">An enumeration value that specifies the rules for the search.</param>
      <returns>The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance.</summary>
      <param name="value">The string to seek.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.  
-or-  
<paramref name="startIndex" /> is greater than the length of this string.  
-or-  
<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.  
-or-  
<paramref name="startIndex" /> is greater than the length of this instance.  
-or-  
<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.  
-or-  
<paramref name="startIndex" /> is greater than the number of characters in this instance.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.  
-or-  
<paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>Returns a new string in which a specified string is inserted at a specified index position in this instance.</summary>
      <param name="startIndex">The zero-based index position of the insertion.</param>
      <param name="value">The string to insert.</param>
      <returns>A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance.</exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>Retrieves the system's reference to the specified <see cref="T:System.String" />.</summary>
      <param name="str">A string to search for in the intern pool.</param>
      <returns>The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>Retrieves a reference to a specified <see cref="T:System.String" />.</summary>
      <param name="str">The string to search for in the intern pool.</param>
      <returns>A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.IsNormalized">
      <summary>Indicates whether this string is in Unicode normalization form C.</summary>
      <returns>
        <see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
      <summary>Indicates whether this string is in the specified Unicode normalization form.</summary>
      <param name="normalizationForm">A Unicode normalization form.</param>
      <returns>
        <see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>Indicates whether the specified string is <see langword="null" /> or an empty string ("").</summary>
      <param name="value">The string to test.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</summary>
      <param name="value">The string to test.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[])">
      <param name="separator" />
      <param name="value" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)">
      <param name="separator" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</summary>
      <param name="separator">The string to use as a separator.<paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the strings to concatenate.</param>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>Concatenates the elements of an object array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">An array that contains the elements to concatenate.</param>
      <returns>A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>Concatenates all the elements of a string array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="value">An array that contains the elements to concatenate.</param>
      <returns>A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string. If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>Concatenates the specified elements of a string array, using the specified separator between each element.</summary>
      <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</param>
      <param name="value">An array that contains the elements to concatenate.</param>
      <param name="startIndex">The first element in <paramref name="value" /> to use.</param>
      <param name="count">The number of elements of <paramref name="value" /> to use.</param>
      <returns>A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.  
 -or-  
 <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.  
-or-  
<paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates the members of a collection, using the specified separator between each member.</summary>
      <param name="separator">The string to use as a separator.<paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
      <param name="values">A collection that contains the objects to concatenate.</param>
      <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
      <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</summary>
      <param name="value">The Unicode character to seek.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The starting position of the search. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="value">The Unicode character to seek.</param>
      <param name="startIndex">The starting position of the search. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.  
 -or-  
 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance.</summary>
      <param name="value">The string to seek.</param>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.  
 -or-  
 The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.  
-or-  
The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.  
-or-  
The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.  
-or-  
The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.  
-or-  
The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.  
-or-  
The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.  
 -or-  
 The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <param name="value">The string to seek.</param>
      <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
      <returns>The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.  
 -or-  
 The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</exception>
    </member>
    <member name="P:System.String.Length">
      <summary>Gets the number of characters in the current <see cref="T:System.String" /> object.</summary>
      <returns>The number of characters in the current string.</returns>
    </member>
    <member name="M:System.String.Normalize">
      <summary>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</summary>
      <returns>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</returns>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.String.Normalize(System.Text.NormalizationForm)">
      <summary>Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</summary>
      <param name="normalizationForm">A Unicode normalization form.</param>
      <returns>A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</returns>
      <exception cref="T:System.ArgumentException">The current instance contains invalid Unicode characters.</exception>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>Determines whether two specified strings have the same value.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}">
      <param name="value" />
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>Determines whether two specified strings have different values.</summary>
      <param name="a">The first string to compare, or <see langword="null" />.</param>
      <param name="b">The second string to compare, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</summary>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <returns>A new string that is equivalent to this string except for the removed characters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.  
-or-  
<paramref name="startIndex" /> specifies a position that is not within this string.</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</summary>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <param name="count">The number of characters to delete.</param>
      <returns>A new string that is equivalent to this instance except for the removed characters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.  
 -or-  
 <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</summary>
      <param name="oldChar">The Unicode character to be replaced.</param>
      <param name="newChar">The Unicode character to replace all occurrences of <paramref name="oldChar" />.</param>
      <returns>A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />. If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</summary>
      <param name="oldValue">The string to be replaced.</param>
      <param name="newValue">The string to replace all occurrences of <paramref name="oldValue" />.</param>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />. If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string ("").</exception>
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="ignoreCase" />
      <param name="culture" />
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.StringComparison)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>Splits a string into substrings that are based on the characters in an array.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <returns>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number of substrings based on the characters in an array.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
    </member>
    <member name="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of substrings to return.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</summary>
      <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</param>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
    </member>
    <member name="M:System.String.StartsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>Determines whether the beginning of this string instance matches the specified string.</summary>
      <param name="value">The string to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</summary>
      <param name="value">The string to compare.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</param>
      <param name="culture">Cultural information that determines how this string and <paramref name="value" /> are compared. If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</summary>
      <param name="value">The string to compare.</param>
      <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</param>
      <returns>
        <see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</summary>
      <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
      <returns>A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
      <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
      <param name="length">The number of characters in the substring.</param>
      <returns>A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.  
-or-  
<paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</summary>
      <returns>An enumerator that can be used to iterate through the current string.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</returns>
      <exception cref="T:System.FormatException">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The character at index 0 in the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type of the returned object.</param>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed.</exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">An object that provides culture-specific formatting information.</param>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>Copies the characters in this instance to a Unicode character array.</summary>
      <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>Copies the characters in a specified substring in this instance to a Unicode character array.</summary>
      <param name="startIndex">The starting position of a substring in this instance.</param>
      <param name="length">The length of the substring in this instance.</param>
      <returns>A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.  
-or-  
<paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</exception>
    </member>
    <member name="M:System.String.ToLower">
      <summary>Returns a copy of this string converted to lowercase.</summary>
      <returns>A string in lowercase.</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</summary>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The lowercase equivalent of the current string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</summary>
      <returns>The lowercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>The current string.</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
      <returns>The current string.</returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>Returns a copy of this string converted to uppercase.</summary>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</summary>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The uppercase equivalent of the current string.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</summary>
      <returns>The uppercase equivalent of the current string.</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.Trim(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimEnd" />
    <member name="M:System.String.TrimEnd(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
    </member>
    <member name="M:System.String.TrimStart" />
    <member name="M:System.String.TrimStart(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <param name="trimChars">An array of Unicode characters to remove, or <see langword="null" />.</param>
      <returns>The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string. If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)" /> and <see cref="M:System.String.Equals(System.Object)" /> methods.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>Compare strings using culture-sensitive sort rules and the current culture.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>Compare strings using culture-sensitive sort rules and the invariant culture.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>Compare strings using ordinal (binary) sort rules.</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>Specifies whether applicable <see cref="Overload:System.String.Split" /> method overloads include or omit empty substrings from the return value.</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>The return value includes array elements that contain an empty string</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>The return value does not include array elements that contain an empty string</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>Serves as the base class for system exceptions namespace.</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class.</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>Converts a sequence of encoded bytes into a set of characters.</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Decoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.</summary>
      <param name="bytes">The address of a buffer that contains the byte sequences to convert.</param>
      <param name="byteCount">The number of bytes in <paramref name="bytes" /> to convert.</param>
      <param name="chars">The address of a buffer to store the converted characters.</param>
      <param name="charCount">The maximum number of characters in <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">
        <see langword="true" /> to indicate no further data is to be converted; otherwise, <see langword="false" />.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, <see langword="false" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount" /> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</summary>
      <param name="bytes">A byte array to convert.</param>
      <param name="byteIndex">The first element of <paramref name="bytes" /> to convert.</param>
      <param name="byteCount">The number of elements of <paramref name="bytes" /> to convert.</param>
      <param name="chars">An array to store the converted characters.</param>
      <param name="charIndex">The first element of <paramref name="chars" /> in which data is stored.</param>
      <param name="charCount">The maximum number of elements of <paramref name="chars" /> to use in the conversion.</param>
      <param name="flush">
        <see langword="true" /> to indicate that no further data is to be converted; otherwise, <see langword="false" />.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, <see langword="false" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.  
-or-  
The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.  
-or-  
The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Decoder.GetCharCount" /> method.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
      <param name="bytesUsed" />
      <param name="charsUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Decoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Decoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallback" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.DecoderFallbackBuffer" /> object contains data that has not been decoded yet.</exception>
    </member>
    <member name="P:System.Text.Decoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.DecoderFallbackBuffer" /> object associated with the current <see cref="T:System.Text.Decoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object.</returns>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <param name="flush">
        <see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <param name="flush">
        <see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <param name="flush">
        <see langword="true" /> to clear the internal state of the decoder after the conversion; otherwise, <see langword="false" />.</param>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).  
-or-  
<paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).  
-or-  
<paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.  
-or-  
<paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.  
-or-  
<paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <param name="flush">
        <see langword="true" /> to clear the internal state of the decoder after the conversion; otherwise, <see langword="false" />.</param>
      <returns>The actual number of characters written into the <paramref name="chars" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).  
-or-  
<paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.  
-or-  
<paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.  
-or-  
<paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>When overridden in a derived class, sets the decoder back to its initial state.</summary>
    </member>
    <member name="T:System.Text.DecoderExceptionFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the input byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
      <summary>Returns a decoder fallback buffer that throws an exception if it cannot convert a sequence of bytes to a character.</summary>
      <returns>A decoder fallback buffer that throws an exception when it cannot decode a byte sequence.</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.DecoderExceptionFallback" /> object and a specified object are equal.</summary>
      <param name="value">An object that derives from the <see cref="T:System.Text.DecoderExceptionFallback" /> class.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is not <see langword="null" /> and is a <see cref="T:System.Text.DecoderExceptionFallback" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance.</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
    </member>
    <member name="T:System.Text.DecoderExceptionFallbackBuffer">
      <summary>Throws <see cref="T:System.Text.DecoderFallbackException" /> when an encoded input byte sequence cannot be converted to a decoded output character. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>Throws <see cref="T:System.Text.DecoderFallbackException" /> when the input byte sequence cannot be decoded. The nominal return value is not used.</summary>
      <param name="bytesUnknown">An input array of bytes.</param>
      <param name="index">The index position of a byte in the input.</param>
      <returns>None. No value is returned because the <see cref="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" /> method always throws an exception.  
 The nominal return value is <see langword="true" />. A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
      <exception cref="T:System.Text.DecoderFallbackException">This method always throws an exception that reports the value and index position of the input byte that cannot be decoded.</exception>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the exception data buffer.</summary>
      <returns>The return value is always the Unicode character NULL (U+0000).  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.MovePrevious">
      <summary>Causes the next call to <see cref="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" /> to access the exception data buffer character position that is prior to the current position.</summary>
      <returns>The return value is always <see langword="false" />.  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the current <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The return value is always zero.  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="T:System.Text.DecoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character.</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer" /> class.</summary>
      <returns>An object that provides a fallback buffer for a decoder.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input byte sequence cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback" /> class. The default value is a <see cref="T:System.Text.DecoderExceptionFallback" /> object.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.DecoderFallback" /> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.DecoderFallback" /> object can return.</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input byte sequence that cannot be decoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.DecoderFallback" /> class. The default value is a <see cref="T:System.Text.DecoderReplacementFallback" /> object that emits the QUESTION MARK character ("?", U+003F) in place of unknown byte sequences.</returns>
    </member>
    <member name="T:System.Text.DecoderFallbackBuffer">
      <summary>Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.</summary>
      <param name="bytesUnknown">An input array of bytes.</param>
      <param name="index">The index position of a byte in <paramref name="bytesUnknown" />.</param>
      <returns>
        <see langword="true" /> if the fallback buffer can process <paramref name="bytesUnknown" />; <see langword="false" /> if the fallback buffer ignores <paramref name="bytesUnknown" />.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position.</summary>
      <returns>
        <see langword="true" /> if the <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.DecoderFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>The exception that is thrown when a decoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message, the array of bytes being decoded, and the index of the byte that cannot be decoded.</summary>
      <param name="message">An error message.</param>
      <param name="bytesUnknown">The input byte array.</param>
      <param name="index">The index position in <paramref name="bytesUnknown" /> of the byte that cannot be decoded.</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>Gets the input byte sequence that caused the exception.</summary>
      <returns>The input byte array that cannot be decoded.</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>Gets the index position in the input byte sequence of the byte that caused the exception.</summary>
      <returns>The index position in the input byte array of the byte that cannot be decoded. The index position is zero-based.</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an output character. The fallback emits a user-specified replacement string instead of a decoded input byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallback" /> class using a specified replacement string.</summary>
      <param name="replacement">A string that is emitted in a decoding operation in place of an input byte sequence that cannot be decoded.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> contains an invalid surrogate pair. In other words, the surrogate pair does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.DecoderFallbackBuffer" /> object that is initialized with the replacement string of this <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>A <see cref="T:System.Text.DecoderFallbackBuffer" /> object that specifies a string to use instead of the original decoding operation input.</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>A substitute string that is emitted in place of an input byte sequence that cannot be decoded.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <param name="value">A <see cref="T:System.Text.DecoderReplacementFallback" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.DecoderReplacementFallback" /> object having a <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property that is equal to the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property of the current <see cref="T:System.Text.DecoderReplacementFallback" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>The hash code of the value of the object.</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <returns>The number of characters in the string that is emitted in place of a byte sequence that cannot be decoded, that is, the length of the string returned by the <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> property.</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallbackBuffer">
      <summary>Represents a substitute output string that is emitted when the original input byte sequence cannot be decoded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.#ctor(System.Text.DecoderReplacementFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> class using the value of a <see cref="T:System.Text.DecoderReplacementFallback" /> object.</summary>
      <param name="fallback">A <see cref="T:System.Text.DecoderReplacementFallback" /> object that contains a replacement string.</param>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>Prepares the replacement fallback buffer to use the current replacement string.</summary>
      <param name="bytesUnknown">An input byte sequence. This parameter is ignored unless an exception is thrown.</param>
      <param name="index">The index position of the byte in <paramref name="bytesUnknown" />. This parameter is ignored in this operation.</param>
      <returns>
        <see langword="true" /> if the replacement string is not empty; <see langword="false" /> if the replacement string is empty.</returns>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> method has read all the characters in the replacement fallback buffer.</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the replacement fallback buffer.</summary>
      <returns>The next character in the replacement fallback buffer.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious">
      <summary>Causes the next call to <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> to access the character position in the replacement fallback buffer prior to the current character position.</summary>
      <returns>
        <see langword="true" /> if the <see cref="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the replacement fallback buffer that remain to be processed.</summary>
      <returns>The number of characters in the replacement fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Reset">
      <summary>Initializes all internal state information and data in the <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> object.</summary>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>Converts a set of characters into a sequence of bytes.</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoder" /> class.</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</summary>
      <param name="chars">The address of a string of UTF-16 encoded characters to convert.</param>
      <param name="charCount">The number of characters in <paramref name="chars" /> to convert.</param>
      <param name="bytes">The address of a buffer to store the converted bytes.</param>
      <param name="byteCount">The maximum number of bytes in <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">
        <see langword="true" /> to indicate no further data is to be converted; otherwise, <see langword="false" />.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="charCount" /> were converted; otherwise, <see langword="false" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount" /> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</summary>
      <param name="chars">An array of characters to convert.</param>
      <param name="charIndex">The first element of <paramref name="chars" /> to convert.</param>
      <param name="charCount">The number of elements of <paramref name="chars" /> to convert.</param>
      <param name="bytes">An array where the converted bytes are stored.</param>
      <param name="byteIndex">The first element of <paramref name="bytes" /> in which data is stored.</param>
      <param name="byteCount">The maximum number of elements of <paramref name="bytes" /> to use in the conversion.</param>
      <param name="flush">
        <see langword="true" /> to indicate no further data is to be converted; otherwise, <see langword="false" />.</param>
      <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
      <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
      <param name="completed">When this method returns, contains <see langword="true" /> if all the characters specified by <paramref name="charCount" /> were converted; otherwise, <see langword="false" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> or <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.  
-or-  
The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.  
-or-  
The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
      <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="Overload:System.Text.Encoder.GetByteCount" /> method.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
      <param name="charsUsed" />
      <param name="bytesUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Encoder.Fallback">
      <summary>Gets or sets a <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallback" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentException">A new value cannot be assigned in a set operation because the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object contains data that has not been encoded yet.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="P:System.Text.Encoder.FallbackBuffer">
      <summary>Gets the <see cref="T:System.Text.EncoderFallbackBuffer" /> object associated with the current <see cref="T:System.Text.Encoder" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object.</returns>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <param name="flush">
        <see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</param>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <param name="flush">
        <see langword="true" /> to simulate clearing the internal state of the encoder after the calculation; otherwise, <see langword="false" />.</param>
      <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.ReadOnlySpan{System.Char},System.Boolean)">
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <param name="flush">
        <see langword="true" /> to clear the internal state of the encoder after the conversion; otherwise, <see langword="false" />.</param>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).  
-or-  
<paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <param name="flush">
        <see langword="true" /> to clear the internal state of the encoder after the conversion; otherwise, <see langword="false" />.</param>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).  
-or-  
<paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
-or-  
<paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
-or-  
<paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)  
 -and-  
 <see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.Reset">
      <summary>When overridden in a derived class, sets the encoder back to its initial state.</summary>
    </member>
    <member name="T:System.Text.EncoderExceptionFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
      <summary>Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.</summary>
      <returns>An encoder fallback buffer that throws an exception when it cannot encode a character sequence.</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Text.EncoderExceptionFallback" /> object and a specified object are equal.</summary>
      <param name="value">An object that derives from the <see cref="T:System.Text.EncoderExceptionFallback" /> class.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is not <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET) and is a <see cref="T:System.Text.EncoderExceptionFallback" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.GetHashCode">
      <summary>Retrieves the hash code for this instance.</summary>
      <returns>The return value is always the same arbitrary value, and has no special significance.</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallback.MaxCharCount">
      <summary>Gets the maximum number of characters this instance can return.</summary>
      <returns>The return value is always zero.</returns>
    </member>
    <member name="T:System.Text.EncoderExceptionFallbackBuffer">
      <summary>Throws <see cref="T:System.Text.EncoderFallbackException" /> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used.</summary>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <returns>None. No value is returned because the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" /> method always throws an exception.</returns>
      <exception cref="T:System.Text.EncoderFallbackException">The character represented by <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" /> cannot be encoded.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="charUnknownHigh" /> or <paramref name="charUnknownLow" /> is invalid. <paramref name="charUnknownHigh" /> is not between U+D800 and U+DBFF, inclusive, or <paramref name="charUnknownLow" /> is not between U+DC00 and U+DFFF, inclusive.</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted.</summary>
      <param name="charUnknown">An input character.</param>
      <param name="index">The index position of the character in the input buffer.</param>
      <returns>None. No value is returned because the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" /> method always throws an exception.</returns>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="charUnknown" /> cannot be encoded. This method always throws an exception that reports the value of the <paramref name="charUnknown" /> and <paramref name="index" /> parameters.</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the exception fallback buffer.</summary>
      <returns>The return value is always the Unicode character, NULL (U+0000).  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.MovePrevious">
      <summary>Causes the next call to the <see cref="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" /> method to access the exception data buffer character position that is prior to the current position.</summary>
      <returns>The return value is always <see langword="false" />.  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the current <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The return value is always zero.  
 A return value is defined, although it is unchanging, because this method implements an abstract method.</returns>
    </member>
    <member name="T:System.Text.EncoderFallback">
      <summary>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an encoded output byte sequence.</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.CreateFallbackBuffer">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.</summary>
      <returns>An object that provides a fallback buffer for an encoder.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ExceptionFallback">
      <summary>Gets an object that throws an exception when an input character cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback" /> class. The default value is a <see cref="T:System.Text.EncoderExceptionFallback" /> object.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.MaxCharCount">
      <summary>When overridden in a derived class, gets the maximum number of characters the current <see cref="T:System.Text.EncoderFallback" /> object can return.</summary>
      <returns>The maximum number of characters the current <see cref="T:System.Text.EncoderFallback" /> object can return.</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ReplacementFallback">
      <summary>Gets an object that outputs a substitute string in place of an input character that cannot be encoded.</summary>
      <returns>A type derived from the <see cref="T:System.Text.EncoderFallback" /> class. The default value is a <see cref="T:System.Text.EncoderReplacementFallback" /> object that replaces unknown input characters with the QUESTION MARK character ("?", U+003F).</returns>
    </member>
    <member name="T:System.Text.EncoderFallbackBuffer">
      <summary>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</summary>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <returns>
        <see langword="true" /> if the fallback buffer can process <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" />; <see langword="false" /> if the fallback buffer ignores the surrogate pair.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</summary>
      <param name="charUnknown">An input character.</param>
      <param name="index">The index position of the character in the input buffer.</param>
      <returns>
        <see langword="true" /> if the fallback buffer can process <paramref name="charUnknown" />; <see langword="false" /> if the fallback buffer ignores <paramref name="charUnknown" />.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.GetNextChar">
      <summary>When overridden in a derived class, retrieves the next character in the fallback buffer.</summary>
      <returns>The next character in the fallback buffer.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.MovePrevious">
      <summary>When overridden in a derived class, causes the next call to the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position.</summary>
      <returns>
        <see langword="true" /> if the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackBuffer.Remaining">
      <summary>When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object that remain to be processed.</summary>
      <returns>The number of characters in the current fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Reset">
      <summary>Initializes all data and state information pertaining to this fallback buffer.</summary>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>The exception that is thrown when an encoder fallback operation fails. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. A parameter specifies the error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackException" /> class. Parameters specify the error message and the inner exception that is the cause of this exception.</summary>
      <param name="message">An error message.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>Gets the input character that caused the exception.</summary>
      <returns>The character that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>Gets the high component character of the surrogate pair that caused the exception.</summary>
      <returns>The high component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>Gets the low component character of the surrogate pair that caused the exception.</summary>
      <returns>The low component character of the surrogate pair that cannot be encoded.</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>Gets the index position in the input buffer of the character that caused the exception.</summary>
      <returns>The index position in the input buffer of the character that cannot be encoded.</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>Indicates whether the input that caused the exception is a surrogate pair.</summary>
      <returns>
        <see langword="true" /> if the input was a surrogate pair; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallback">
      <summary>Provides a failure handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback uses a user-specified replacement string instead of the original input character. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback" /> class.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallback" /> class using a specified replacement string.</summary>
      <param name="replacement">A string that is converted in an encoding operation in place of an input character that cannot be encoded.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> contains an invalid surrogate pair. In other words, the surrogate does not consist of one high surrogate component followed by one low surrogate component.</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.CreateFallbackBuffer">
      <summary>Creates a <see cref="T:System.Text.EncoderFallbackBuffer" /> object that is initialized with the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>A <see cref="T:System.Text.EncoderFallbackBuffer" /> object equal to this <see cref="T:System.Text.EncoderReplacementFallback" /> object.</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.DefaultString">
      <summary>Gets the replacement string that is the value of the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>A substitute string that is used in place of an input character that cannot be encoded.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.Equals(System.Object)">
      <summary>Indicates whether the value of a specified object is equal to the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <param name="value">A <see cref="T:System.Text.EncoderReplacementFallback" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter specifies an <see cref="T:System.Text.EncoderReplacementFallback" /> object and the replacement string of that object is equal to the replacement string of this <see cref="T:System.Text.EncoderReplacementFallback" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.GetHashCode">
      <summary>Retrieves the hash code for the value of the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>The hash code of the value of the object.</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.MaxCharCount">
      <summary>Gets the number of characters in the replacement string for the <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <returns>The number of characters in the string used in place of an input character that cannot be encoded.</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallbackBuffer">
      <summary>Represents a substitute input string that is used when the original input character cannot be encoded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.#ctor(System.Text.EncoderReplacementFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> class using the value of a <see cref="T:System.Text.EncoderReplacementFallback" /> object.</summary>
      <param name="fallback">A <see cref="T:System.Text.EncoderReplacementFallback" /> object.</param>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>Indicates whether a replacement string can be used when an input surrogate pair cannot be encoded, or whether the surrogate pair can be ignored. Parameters specify the surrogate pair and the index position of the pair in the input.</summary>
      <param name="charUnknownHigh">The high surrogate of the input pair.</param>
      <param name="charUnknownLow">The low surrogate of the input pair.</param>
      <param name="index">The index position of the surrogate pair in the input buffer.</param>
      <returns>
        <see langword="true" /> if the replacement string is not empty; <see langword="false" /> if the replacement string is empty.</returns>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method has read all the replacement string characters.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="charUnknownHigh" /> is less than U+D800 or greater than U+D8FF.  
 -or-  
 The value of <paramref name="charUnknownLow" /> is less than U+DC00 or greater than U+DFFF.</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>Prepares the replacement fallback buffer to use the current replacement string.</summary>
      <param name="charUnknown">An input character. This parameter is ignored in this operation unless an exception is thrown.</param>
      <param name="index">The index position of the character in the input buffer. This parameter is ignored in this operation.</param>
      <returns>
        <see langword="true" /> if the replacement string is not empty; <see langword="false" /> if the replacement string is empty.</returns>
      <exception cref="T:System.ArgumentException">This method is called again before the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method has read all the characters in the replacement fallback buffer.</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar">
      <summary>Retrieves the next character in the replacement fallback buffer.</summary>
      <returns>The next Unicode character in the replacement fallback buffer that the application can encode.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious">
      <summary>Causes the next call to the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> method to access the character position in the replacement fallback buffer prior to the current character position.</summary>
      <returns>
        <see langword="true" /> if the <see cref="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallbackBuffer.Remaining">
      <summary>Gets the number of characters in the replacement fallback buffer that remain to be processed.</summary>
      <returns>The number of characters in the replacement fallback buffer that have not yet been processed.</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Reset">
      <summary>Initializes all internal state information and data in this instance of <see cref="T:System.Text.EncoderReplacementFallbackBuffer" />.</summary>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>Represents a character encoding.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.</summary>
      <param name="codePage">The code page identifier of the preferred encoding.  
 -or-  
 0, to use the default encoding.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</summary>
      <param name="codePage">The encoding code page identifier.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> is less than zero.</exception>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>Gets an encoding for the ASCII (7-bit) character set.</summary>
      <returns>An  encoding for the ASCII (7-bit) character set.</returns>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>Gets an encoding for the UTF-16 format that uses the big endian byte order.</summary>
      <returns>An encoding object for the UTF-16 format that uses the big endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.BodyName">
      <summary>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</summary>
      <returns>A name for the current <see cref="T:System.Text.Encoding" /> that can be used with mail agent body tags.  
 -or-  
 An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>When overridden in a derived class, creates a shallow copy of the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>A copy of the current <see cref="T:System.Text.Encoding" /> object.</returns>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>When overridden in a derived class, gets the code page identifier of the current <see cref="T:System.Text.Encoding" />.</summary>
      <returns>The code page identifier of the current <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>Converts an entire byte array from one encoding to another.</summary>
      <param name="srcEncoding">The encoding format of <paramref name="bytes" />.</param>
      <param name="dstEncoding">The target encoding format.</param>
      <param name="bytes">The bytes to convert.</param>
      <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is <see langword="null" />.  
-or-  
<paramref name="dstEncoding" /> is <see langword="null" />.  
-or-  
<paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 srcEncoding. <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 dstEncoding. <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
      <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />.</param>
      <param name="dstEncoding">The encoding of the output array.</param>
      <param name="bytes">The array of bytes to convert.</param>
      <param name="index">The index of the first element of <paramref name="bytes" /> to convert.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> is <see langword="null" />.  
-or-  
<paramref name="dstEncoding" /> is <see langword="null" />.  
-or-  
<paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 srcEncoding. <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 dstEncoding. <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="P:System.Text.Encoding.DecoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.DecoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>The decoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</exception>
    </member>
    <member name="P:System.Text.Encoding.Default">
      <summary>Gets the default encoding for this .NET implementation.</summary>
      <returns>The default encoding for this .NET implementation.</returns>
    </member>
    <member name="P:System.Text.Encoding.EncoderFallback">
      <summary>Gets or sets the <see cref="T:System.Text.EncoderFallback" /> object for the current <see cref="T:System.Text.Encoding" /> object.</summary>
      <returns>The encoder fallback object for the current <see cref="T:System.Text.Encoding" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The value in a set operation is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A value cannot be assigned in a set operation because the current <see cref="T:System.Text.Encoding" /> object is read-only.</exception>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>When overridden in a derived class, gets the human-readable description of the current encoding.</summary>
      <returns>The human-readable description of the current <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current instance.</summary>
      <param name="value">The <see cref="T:System.Object" /> to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.Encoding" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</summary>
      <param name="chars">The character array containing the characters to encode.</param>
      <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})">
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</summary>
      <param name="s">The string containing the set of characters to encode.</param>
      <returns>The number of bytes produced by encoding the specified characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</summary>
      <param name="chars">A pointer to the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">A pointer to the location at which to start writing the resulting sequence of bytes.</param>
      <param name="byteCount">The maximum number of bytes to write.</param>
      <returns>The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.  
-or-  
<paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> is less than the resulting number of bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</summary>
      <param name="chars">The character array containing the characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="index">The index of the first character to encode.</param>
      <param name="count">The number of characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</summary>
      <param name="chars">The character array containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is <see langword="null" />.  
-or-  
<paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
-or-  
<paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
-or-  
<paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
      <param name="chars" />
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</summary>
      <param name="s">The string containing the characters to encode.</param>
      <returns>A byte array containing the results of encoding the specified set of characters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</summary>
      <param name="s">The string containing the set of characters to encode.</param>
      <param name="charIndex">The index of the first character to encode.</param>
      <param name="charCount">The number of characters to encode.</param>
      <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
      <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
      <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.  
-or-  
<paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.  
-or-  
<paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.  
-or-  
<paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</summary>
      <param name="bytes">A pointer to the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">A pointer to the location at which to start writing the resulting set of characters.</param>
      <param name="charCount">The maximum number of characters to write.</param>
      <returns>The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.  
-or-  
<paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> is less than the resulting number of characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="byteIndex">The index of the first byte to decode.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <param name="chars">The character array to contain the resulting set of characters.</param>
      <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
      <returns>The actual number of characters written into <paramref name="chars" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.  
-or-  
<paramref name="chars" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.  
-or-  
<paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.  
-or-  
<paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})">
      <param name="bytes" />
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</summary>
      <returns>A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</summary>
      <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>Returns the encoding associated with the specified code page identifier.</summary>
      <param name="codepage">The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.  
 -or-  
 0 (zero), to use the default encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> is less than zero or greater than 65535.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codepage" /> is not supported by the underlying platform.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="codepage" /> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="codepage">The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.  
 -or-  
 0 (zero), to use the default encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> is less than zero or greater than 65535.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codepage" /> is not supported by the underlying platform.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="codepage" /> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>Returns the encoding associated with the specified code page name.</summary>
      <param name="name">The code page name of the preferred encoding. Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid. Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</param>
      <returns>The encoding  associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid code page name.  
-or-  
The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="name">The code page name of the preferred encoding. Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid. Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified code page.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid code page name.  
-or-  
The code page indicated by <paramref name="name" /> is not supported by the underlying platform.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncodings">
      <summary>Returns an array that contains all encodings.</summary>
      <returns>An array that contains all encodings.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
      <param name="charCount">The number of characters to encode.</param>
      <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</summary>
      <returns>A byte array containing a sequence of bytes that specifies the encoding used.  
 -or-  
 A byte array of length zero, if a preamble is not required.</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
      <summary>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</summary>
      <param name="bytes">A pointer to a byte array.</param>
      <param name="byteCount">The number of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is a null pointer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> is less than zero.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A   fallback occurred (see Character Encoding in .NET for a complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</summary>
      <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
      <param name="index">The index of the first byte to decode.</param>
      <param name="count">The number of bytes to decode.</param>
      <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
      <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in .NET for complete explanation)  
 -and-  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="P:System.Text.Encoding.HeaderName">
      <summary>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</summary>
      <returns>A name for the current <see cref="T:System.Text.Encoding" /> to use with mail agent header tags.  
 -or-  
 An empty string (""), if the current <see cref="T:System.Text.Encoding" /> cannot be used.</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized">
      <summary>Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is always normalized; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</summary>
      <param name="form">One of the <see cref="T:System.Text.NormalizationForm" /> values.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> object is always normalized using the specified <see cref="T:System.Text.NormalizationForm" /> value; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserDisplay">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for displaying content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserSave">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by browser clients for saving content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsDisplay">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for displaying content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsSave">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> can be used by mail and news clients for saving content; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> is read-only; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.IsSingleByte">
      <summary>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Text.Encoding" /> uses single-byte code points; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.Preamble" />
    <member name="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
      <summary>Registers an encoding provider.</summary>
      <param name="provider">A subclass of <see cref="T:System.Text.EncodingProvider" /> that provides access to additional character encodings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>Gets an encoding for the UTF-16 format using the little endian byte order.</summary>
      <returns>An encoding for the UTF-16 format using the little endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF32">
      <summary>Gets an encoding for the UTF-32 format using the little endian byte order.</summary>
      <returns>An  encoding object for the UTF-32 format using the little endian byte order.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>Gets an encoding for the UTF-7 format.</summary>
      <returns>An encoding for the UTF-7 format.</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>Gets an encoding for the UTF-8 format.</summary>
      <returns>An encoding for the UTF-8 format.</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</summary>
      <returns>The IANA name for the current <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="P:System.Text.Encoding.WindowsCodePage">
      <summary>When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</summary>
      <returns>The Windows operating system code page that most closely corresponds to the current <see cref="T:System.Text.Encoding" />.</returns>
    </member>
    <member name="T:System.Text.EncodingInfo">
      <summary>Provides basic information about an encoding.</summary>
    </member>
    <member name="P:System.Text.EncodingInfo.CodePage">
      <summary>Gets the code page identifier of the encoding.</summary>
      <returns>The code page identifier of the encoding.</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.DisplayName">
      <summary>Gets the human-readable description of the encoding.</summary>
      <returns>The human-readable description of the encoding.</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.Equals(System.Object)">
      <summary>Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <param name="value">An object to compare to the current <see cref="T:System.Text.EncodingInfo" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.EncodingInfo" /> object and is equal to the current <see cref="T:System.Text.EncodingInfo" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetEncoding">
      <summary>Returns a <see cref="T:System.Text.Encoding" /> object that corresponds to the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> object that corresponds to the current <see cref="T:System.Text.EncodingInfo" /> object.</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Text.EncodingInfo" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.Name">
      <summary>Gets the name registered with the Internet Assigned Numbers Authority (IANA) for the encoding.</summary>
      <returns>The IANA name for the encoding.</returns>
    </member>
    <member name="T:System.Text.EncodingProvider">
      <summary>Provides the base class for an encoding provider, which supplies encodings that are unavailable on a particular platform.</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.EncodingProvider" /> class.</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32)">
      <summary>Returns the encoding associated with the specified code page identifier.</summary>
      <param name="codepage">The code page identifier of the requested encoding.</param>
      <returns>The encoding that is associated with the specified code page, or <see langword="null" /> if this <see cref="T:System.Text.EncodingProvider" /> cannot return a valid encoding that corresponds to <paramref name="codepage" />.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="codepage">The code page identifier of the requested encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with this encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with this encoding.</param>
      <returns>The encoding that is associated with the specified code page, or <see langword="null" /> if this <see cref="T:System.Text.EncodingProvider" /> cannot return a valid encoding that corresponds to <paramref name="codepage" />.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String)">
      <summary>Returns the encoding with the specified name.</summary>
      <param name="name">The name of the requested encoding.</param>
      <returns>The encoding that is associated with the specified name, or <see langword="null" /> if this <see cref="T:System.Text.EncodingProvider" /> cannot return a valid encoding that corresponds to <paramref name="name" />.</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>Returns the encoding associated with the specified name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</summary>
      <param name="name">The name of the preferred encoding.</param>
      <param name="encoderFallback">An object that provides an error-handling procedure when a character cannot be encoded with this encoding.</param>
      <param name="decoderFallback">An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</param>
      <returns>The encoding that is associated with the specified name, or <see langword="null" /> if this <see cref="T:System.Text.EncodingProvider" /> cannot return a valid encoding that corresponds to <paramref name="name" />.</returns>
    </member>
    <member name="T:System.Text.NormalizationForm">
      <summary>Defines the type of normalization to perform.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormC">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormD">
      <summary>Indicates that a Unicode string is normalized using full canonical decomposition.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKC">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKD">
      <summary>Indicates that a Unicode string is normalized using full compatibility decomposition.</summary>
    </member>
    <member name="T:System.Text.Rune">
      <summary>Represents a Unicode scalar value ([ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive).</summary>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char)">
      <summary>Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 code unit.</summary>
      <param name="ch">A UTF-16 code unit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> represents a UTF-16 surrogate code point (U+D800..U+DFFF, inclusive).</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char,System.Char)">
      <summary>Creates a <see cref="T:System.Text.Rune" /> from the provided UTF-16 surrogate pair.</summary>
      <param name="highSurrogate">The high surrogate of the surrogate pair.</param>
      <param name="lowSurrogate">The low surrogate of the surrogate pair.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> does not represent a UTF-16 high surrogate code point.
-or-
<paramref name="lowSurrogate" /> does not represent a UTF-16 low surrogate code point.</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Int32)">
      <summary>Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit integer that represents a Unicode scalar value.</summary>
      <param name="value">A Unicode scalar value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> does not represent a Unicode scalar value.</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.UInt32)">
      <summary>Creates a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</summary>
      <param name="value">A Unicode scalar value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> does not represent a Unicode scalar value.</exception>
    </member>
    <member name="M:System.Text.Rune.CompareTo(System.Text.Rune)">
      <summary>Compares the current instance to the specified <see cref="T:System.Text.Rune" /> instance.</summary>
      <param name="other">The instance to compare with the current instance.</param>
      <returns>A signed integer indicating the position of this instance in the sort order in relation to <paramref name="other" />: - Less than zero: This instance precedes <paramref name="other" />. 
- Zero: The instance has the same position in the sort order as <paramref name="other" />.
- Greater than zero: This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-16 source buffer.</summary>
      <param name="source">A read-only UTF-16 character span.</param>
      <param name="result">When this method returns, the decoded rune.</param>
      <param name="charsConsumed">When this method returns, the number of characters read to create the rune.</param>
      <returns>
        <see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value. <paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.
<see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.
<see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>Decodes the <see cref="T:System.Text.Rune" /> at the beginning of the provided UTF-8 source buffer.</summary>
      <param name="source">A read-only UTF-8 encoded byte span.</param>
      <param name="result">When this method returns, the decoded rune.</param>
      <param name="bytesConsumed">When this method returns, the number of bytes read to create the rune.</param>
      <returns>
        <see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-8 encoded scalar value. <paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.
<see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.
<see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-8 encoded scalar value. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-16 source buffer.</summary>
      <param name="source">A read-only UTF-16 encoded character span.</param>
      <param name="result">When this method returns, the decoded rune.</param>
      <param name="charsConsumed">When this method returns, the number of bytes read to create the rune.</param>
      <returns>
        <see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer begins with a valid UTF-16 encoded scalar value. <paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.
<see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-16 high surrogate character. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the length of the input buffer.
<see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer begins with an ill-formed UTF-16 encoded scalar value. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="charsConsumed" /> contains the number of <see cref="T:System.Char" /> values used to encode the ill-formed sequence.</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>Decodes the <see cref="T:System.Text.Rune" /> at the end of the provided UTF-8 source buffer.</summary>
      <param name="source">A read-only UTF-8 encoded byte span.</param>
      <param name="value">When this method returns, the decoded rune.</param>
      <param name="bytesConsumed">When this method returns, the number of bytes read to create the rune.</param>
      <returns>
        <see cref="F:System.Buffers.OperationStatus.Done" /> if the source buffer ends with a valid UTF-8 encoded scalar value. <paramref name="result" /> then contains the decoded <see cref="T:System.Text.Rune" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the <see cref="T:System.Text.Rune" />.
<see cref="F:System.Buffers.OperationStatus.NeedMoreData" /> if the source buffer is empty or contains only a standalone UTF-8 high surrogate character. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the length of the input buffer.
<see cref="F:System.Buffers.OperationStatus.InvalidData" /> if the source buffer ends with an ill-formed UTF-8 encoded scalar value. <paramref name="result" /> then contains <see cref="P:System.Text.Rune.ReplacementChar" />, and <paramref name="bytesConsumed" /> contains the number of <see cref="T:System.Byte" /> values used in the input buffer to encode the ill-formed sequence.</returns>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf16(System.Span{System.Char})">
      <summary>Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 destination buffer.</summary>
      <param name="destination">The buffer to which to write this value as UTF-16.</param>
      <returns>The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is not large enough to hold the output.</exception>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf8(System.Span{System.Byte})">
      <summary>Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 destination buffer.</summary>
      <param name="destination">The buffer to which to write this value as UTF-8.</param>
      <returns>The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is not large enough to hold the output.</exception>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is of type <see cref="T:System.Text.Rune" /> and is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Text.Rune)">
      <summary>Returns a value that indicates whether the current instance and a specified rune are equal.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Text.Rune.GetNumericValue(System.Text.Rune)">
      <summary>Gets the numeric value associated with the specified rune.</summary>
      <param name="value">The rune for which to get the numeric value.</param>
      <returns>The numeric value associated with <paramref name="value" />, or -1 if <paramref name="value" /> doesn't represent a numeric character.</returns>
    </member>
    <member name="M:System.Text.Rune.GetRuneAt(System.String,System.Int32)">
      <summary>Gets the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string.</summary>
      <param name="input">The string from which to create the rune.</param>
      <param name="index">The starting position in <paramref name="input" /> at which to create the rune.</param>
      <returns>The rune obtained from <paramref name="input" /> at the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> does not reference the start of a valid scalar value in <paramref name="input" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)">
      <summary>Gets the Unicode category associated with the specified rune.</summary>
      <param name="value">The rune for which to get the Unicode category.</param>
      <returns>The Unicode category associated with <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Text.Rune.IsAscii">
      <summary>Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the ASCII encoding range.</summary>
      <returns>
        <see langword="true" /> if the scalar value associated is within the ASCII encoding range ([ U+0000..U+007F ]) and therefore representable by a single UTF-8 code unit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Rune.IsBmp">
      <summary>Gets a value that indicates whether the scalar value associated with this <see cref="T:System.Text.Rune" /> is within the BMP encoding range.</summary>
      <returns>
        <see langword="true" /> if the scalar value associated is within the BMP encoding range ([ U+0000..U+FFFF ]) and therefore representable by a single UTF-16 code unit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsControl(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a control character.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a control character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsDigit(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a decimal digit.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetter(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a letter.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a letter or a decimal digit.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsLower(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a lowercase letter.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a lowercase letter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsNumber(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a number.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsPunctuation(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a punctuation mark.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a punctuation mark; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsSeparator(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a separator character.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a separator character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsSymbol(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a symbol character.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a symbol character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsUpper(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as an uppercase letter.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an uppercase letter; otherwise,<see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.Int32)">
      <summary>Returns a value that indicates whether a 32-bit signed integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive.</summary>
      <param name="value">The Unicode scalar value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.UInt32)">
      <summary>Returns a value that indicates whether a 32-bit unsigned integer represents a valid Unicode scalar value; that is, it is in the range [ U+0000..U+D7FF ], inclusive, or [ U+E000..U+10FFFF ], inclusive.</summary>
      <param name="value">The Unicode scalar value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a valid Unicode scalar value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)">
      <summary>Returns a value that indicates whether the specified rune is categorized as a white space character.</summary>
      <param name="value">The rune to evaluate.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a white space character; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_Equality(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Char)~System.Text.Rune">
      <summary>Defines an explicit conversion of a 16-bit Unicode character to a <see cref="T:System.Text.Rune" />.</summary>
      <param name="ch">The 16-bit Unicode character to convert.</param>
      <returns>
        <paramref name="ch" /> as a 32-bit Unicode character.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> is a Unicode scalar that represents a surrogate code point.</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Int32)~System.Text.Rune">
      <summary>Defines an explicit conversion of a 32-bit signed integer to a <see cref="T:System.Text.Rune" />.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>
        <paramref name="value" /> as a 32-bit Unicode character.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is an invalid Unicode scalar.</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.UInt32)~System.Text.Rune">
      <summary>Defines an explicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Text.Rune" />.</summary>
      <param name="value">The 32-bit signed integer to convert.</param>
      <returns>
        <paramref name="value" /> as a 32-bit Unicode character.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is an invalid Unicode scalar.</exception>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThan(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than another specified <see cref="T:System.Text.Rune" />.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is greater than or equal to another specified <see cref="T:System.Text.Rune" />.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_Inequality(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Text.Rune" /> instances have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThan(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than another specified <see cref="T:System.Text.Rune" />.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">the second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Text.Rune" /> is less than or equal to another specified <see cref="T:System.Text.Rune" />.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Rune.Plane">
      <summary>Gets the Unicode plane (0 to 16, inclusive) that contains this scalar.</summary>
      <returns>The Unicode plane (0 to 16, inclusive) that contains this scalar.</returns>
    </member>
    <member name="P:System.Text.Rune.ReplacementChar">
      <summary>Gets a <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</summary>
      <returns>A <see cref="T:System.Text.Rune" /> instance that represents the Unicode replacement character U+FFFD.</returns>
    </member>
    <member name="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase, using the casing rules of the specified culture.</summary>
      <param name="value">The 32-bit Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The lowercase equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)">
      <summary>Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to lowercase using the casing rules of the invariant culture.</summary>
      <param name="value">The 32-bit Unicode character to convert.</param>
      <returns>The lowercase equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Text.Rune.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Text.Rune" /> instance.</summary>
      <returns>The string representation of this rune.</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase, using the casing rules of the specified culture.</summary>
      <param name="value">The 32-bit Unicode character to convert.</param>
      <param name="culture">An object that supplies culture-specific casing rules.</param>
      <returns>The uppercase equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)">
      <summary>Returns a copy of the specified <see cref="T:System.Text.Rune" /> converted to uppercase using the casing rules of the invariant culture.</summary>
      <param name="value">The 32-bit Unicode character to convert.</param>
      <returns>The uppercase equivalent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Char,System.Text.Rune@)">
      <summary>Attempts to create a <see cref="T:System.Text.Rune" /> from the specified UTF-16 surrogate pair and returns a value that indicates whether the operation was successful.</summary>
      <param name="highSurrogate">The high surrogate of the surrogate pair.</param>
      <param name="lowSurrogate">The low surrogate of the surrogate pair.</param>
      <param name="result">The rune that corresponds to the specified surrogate pair.</param>
      <returns>
        <see langword="true" /> if the operation succeeded; <see langword="false" /> if the input values don't represent a well-formed UTF-16 surrogate pair.</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Text.Rune@)">
      <summary>Attempts to create a <see cref="T:System.Text.Rune" /> from a specified character and returns a value that indicates whether the operation succeeded.</summary>
      <param name="ch">The character from which to create the rune.</param>
      <param name="result">When this method returns, the rune that corresponds to <paramref name="ch" />.</param>
      <returns>
        <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Int32,System.Text.Rune@)">
      <summary>Attempts to create a <see cref="T:System.Text.Rune" /> from a specified signed integer that represents a Unicode scalar value.</summary>
      <param name="value">The Unicode scalar value.</param>
      <param name="result">When this method returns, the rune that corresponds to <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.UInt32,System.Text.Rune@)">
      <summary>Attempts to create a <see cref="T:System.Text.Rune" /> from the specified 32-bit unsigned integer that represents a Unicode scalar value.</summary>
      <param name="value">The Unicode scalar value.</param>
      <param name="result">When this method returns, the rune that corresponds to <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf16(System.Span{System.Char},System.Int32@)">
      <summary>Encodes this <see cref="T:System.Text.Rune" /> to a UTF-16 encoded destination buffer.</summary>
      <param name="destination">The buffer to which to write this value as UTF-16 encoded value.</param>
      <param name="charsWritten">The number of <see cref="T:System.Char" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</param>
      <returns>
        <see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf8(System.Span{System.Byte},System.Int32@)">
      <summary>Encodes this <see cref="T:System.Text.Rune" /> to a UTF-8 encoded destination buffer.</summary>
      <param name="destination">The buffer to which to write the UTF-8 encoded value.</param>
      <param name="bytesWritten">The number of <see cref="T:System.Byte" /> values written to <paramref name="destination" />, or 0 if the destination buffer is not large enough to contain the output.</param>
      <returns>
        <see langword="true" /> if the value was written to the buffer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Rune.TryGetRuneAt(System.String,System.Int32,System.Text.Rune@)">
      <summary>Attempts to get the <see cref="T:System.Text.Rune" /> that begins at a specified position in a string, and return a value that indicates whether the operation succeeded.</summary>
      <param name="input">The string from which to extract the rune.</param>
      <param name="index">The zero-based index from which to extract the rune.</param>
      <param name="value">When this method returns, the decoded rune.</param>
      <returns>
        <see langword="true" /> if a scalar value was successfully extracted from the specified index; <see langword="false" /> if a value could not be extracted because of invalid data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of the range of <paramref name="input" />.</exception>
    </member>
    <member name="P:System.Text.Rune.Utf16SequenceLength">
      <summary>Gets the length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</summary>
      <returns>The length in code units (<see cref="T:System.Char" />) of the UTF-16 sequence required to represent this scalar value.</returns>
    </member>
    <member name="P:System.Text.Rune.Utf8SequenceLength">
      <summary>Gets the length in code units of the UTF-8 sequence required to represent this scalar value.</summary>
      <returns>The length in code units of the UTF-8 sequence required to represent this scalar value.</returns>
    </member>
    <member name="P:System.Text.Rune.Value">
      <summary>Gets the Unicode scalar value as an integer.</summary>
      <returns>The Unicode scalar value as an integer.</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>Represents a mutable string of characters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified capacity.</summary>
      <param name="capacity">The suggested starting size of this instance.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class that starts with a specified capacity and can grow to a specified maximum.</summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <param name="maxCapacity">The maximum number of characters the current string can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> is less than one, <paramref name="capacity" /> is less than zero, or <paramref name="capacity" /> is greater than <paramref name="maxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class using the specified string and capacity.</summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Text.StringBuilder" /> class from the specified substring and capacity.</summary>
      <param name="value">The string that contains the substring used to initialize the value of this instance. If <paramref name="value" /> is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" />).</param>
      <param name="startIndex">The position within <paramref name="value" /> where the substring begins.</param>
      <param name="length">The number of characters in the substring.</param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.  
-or-  
<paramref name="startIndex" /> plus <paramref name="length" /> is not a position within <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>Appends the string representation of a specified Boolean value to this instance.</summary>
      <param name="value">The Boolean value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>Appends the string representation of a specified 8-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>Appends the string representation of a specified <see cref="T:System.Char" /> object to this instance.</summary>
      <param name="value">The UTF-16-encoded code unit to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>Appends an array of Unicode characters starting at a specified address to this instance.</summary>
      <param name="value">A pointer to an array of characters.</param>
      <param name="valueCount">The number of characters in the array.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> is less than zero.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is a null pointer.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Appends a specified number of copies of the string representation of a Unicode character to this instance.</summary>
      <param name="value">The character to append.</param>
      <param name="repeatCount">The number of times to append <paramref name="value" />.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>Appends the string representation of the Unicode characters in a specified array to this instance.</summary>
      <param name="value">The array of characters to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Appends the string representation of a specified subarray of Unicode characters to this instance.</summary>
      <param name="value">A character array.</param>
      <param name="startIndex">The starting position in <paramref name="value" />.</param>
      <param name="charCount">The number of characters to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> is less than zero.  
-or-  
<paramref name="startIndex" /> is less than zero.  
-or-  
<paramref name="startIndex" /> + <paramref name="charCount" /> is greater than the length of <paramref name="value" />.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>Appends the string representation of a specified decimal number to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>Appends the string representation of a specified double-precision floating-point number to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>Appends the string representation of a specified 16-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>Appends the string representation of a specified 32-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>Appends the string representation of a specified 64-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>Appends the string representation of a specified object to this instance.</summary>
      <param name="value">The object to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char})">
      <summary>Appends the string representation of a specified read-only character memory region to this instance.</summary>
      <param name="value">The read-only character memory region to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})">
      <summary>Appends the string representation of a specified read-only character span to this instance.</summary>
      <param name="value">The read-only character span to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>Appends the string representation of a specified 8-bit signed integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>Appends the string representation of a specified single-precision floating-point number to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>Appends a copy of the specified string to this instance.</summary>
      <param name="value">The string to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>Appends a copy of a specified substring to this instance.</summary>
      <param name="value">The string that contains the substring to append.</param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />.</param>
      <param name="count">The number of characters in <paramref name="value" /> to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="count" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero.  
-or-  
<paramref name="startIndex" /> less than zero.  
-or-  
<paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="value" />.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)">
      <summary>Appends the string representation of a specified string builder to this instance.</summary>
      <param name="value">The string builder to append.</param>
      <returns>A reference to this instance after the append operation is completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>Appends a copy of a substring within a specified string builder to this instance.</summary>
      <param name="value">The string builder that contains the substring to append.</param>
      <param name="startIndex">The starting position of the substring within <paramref name="value" />.</param>
      <param name="count">The number of characters in <paramref name="value" /> to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>Appends the string representation of a specified 16-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>Appends the string representation of a specified 32-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>Appends the string representation of a specified 64-bit unsigned integer to this instance.</summary>
      <param name="value">The value to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> in which any format specification is replaced by the string representation of <paramref name="arg0" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to one (1).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to format.</param>
      <returns>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <paramref name="format" /> where any format specification is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">An object to format.</param>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of <paramref name="arg0" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to 1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to 2.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to 3.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</summary>
      <param name="format">A composite format string.</param>
      <param name="args">An array of objects to format.</param>
      <returns>A reference to this instance with <paramref name="format" /> appended. Each format item in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.  
-or-  
The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="args" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of the expanded string would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="value">The string to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</summary>
      <returns>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <see cref="P:System.Text.StringBuilder.Length" /> to <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than the current length of this instance.  
 -or-  
 The value specified for a set operation is greater than the maximum capacity.</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>Gets or sets the character at the specified character position in this instance.</summary>
      <param name="index">The position of the character.</param>
      <returns>The Unicode character at position <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while setting a character.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of this instance while getting a character.</exception>
    </member>
    <member name="T:System.Text.StringBuilder.ChunkEnumerator">
      <summary>Supports simple iteration over the chunks of a <see cref="T:System.Text.StringBuilder" /> instance.</summary>
    </member>
    <member name="P:System.Text.StringBuilder.ChunkEnumerator.Current">
      <summary>Gets the chunk and the current position of the collection.</summary>
      <returns>The chunk at the current position of the collection.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.GetEnumerator">
      <summary>Provides an <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> implementation that returns <see langword="this" /> as the <see cref="T:System.Collections.IEnumerator" />.</summary>
      <returns>An enumerator object that can be used to iterate through the chunks.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.MoveNext">
      <summary>Advances the enumerator to the next chunk in the collection.</summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>Removes all characters from the current <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An object whose <see cref="P:System.Text.StringBuilder.Length" /> is 0 (zero).</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies the characters from a specified segment of this instance to a specified segment of a destination <see cref="T:System.Char" /> array.</summary>
      <param name="sourceIndex">The starting position in this instance where characters will be copied from. The index is zero-based.</param>
      <param name="destination">The array where characters will be copied.</param>
      <param name="destinationIndex">The starting position in <paramref name="destination" /> where characters will be copied. The index is zero-based.</param>
      <param name="count">The number of characters to be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" />, is less than zero.  
-or-  
<paramref name="sourceIndex" /> is greater than the length of this instance.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> is greater than the length of this instance.  
-or-  
<paramref name="destinationIndex" /> + <paramref name="count" /> is greater than the length of <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)">
      <param name="sourceIndex" />
      <param name="destination" />
      <param name="count" />
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" /> is at least the specified value.</summary>
      <param name="capacity">The minimum capacity to ensure.</param>
      <returns>The new capacity of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})">
      <summary>Returns a value indicating whether the characters in this instance are equal to the characters in a specified read-only character span.</summary>
      <param name="span">The character span to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the characters in this instance and <paramref name="span" /> are the same; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="sb">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if this instance and <paramref name="sb" /> have equal string, <see cref="P:System.Text.StringBuilder.Capacity" />, and <see cref="P:System.Text.StringBuilder.MaxCapacity" /> values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.GetChunks">
      <summary>Returns an object that can be used to iterate through the chunks of characters represented in a <see langword="ReadOnlyMemory&lt;Char&gt;" /> created from this <see cref="T:System.Text.StringBuilder" /> instance.</summary>
      <returns>An enumerator for the chunks in the <see langword="ReadOnlyMemory&lt;Char&gt;" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>Inserts the string representation of a Boolean value into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The character array to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">A character array.</param>
      <param name="startIndex">The starting index within <paramref name="value" />.</param>
      <param name="charCount">The number of characters to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />, and <paramref name="startIndex" /> and <paramref name="charCount" /> are not zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />, <paramref name="startIndex" />, or <paramref name="charCount" /> is less than zero.  
-or-  
<paramref name="index" /> is greater than the length of this instance.  
-or-  
<paramref name="startIndex" /> plus <paramref name="charCount" /> is not a position within <paramref name="value" />.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>Inserts the string representation of a decimal number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>Inserts the string representation of an object into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The object to insert, or <see langword="null" />.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>Inserts a string into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The string to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.  
-or-  
The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>Inserts one or more copies of a specified string into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The string to insert.</param>
      <param name="count">The number of times to insert <paramref name="value" />.</param>
      <returns>A reference to this instance after insertion has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the current length of this instance.  
-or-  
<paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.OutOfMemoryException">The current length of this <see cref="T:System.Text.StringBuilder" /> object plus the length of <paramref name="value" /> times <paramref name="count" /> exceeds <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</summary>
      <param name="index">The position in this instance where insertion begins.</param>
      <param name="value">The value to insert.</param>
      <returns>A reference to this instance after the insert operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the length of this instance.</exception>
      <exception cref="T:System.OutOfMemoryException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>Gets or sets the length of the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <returns>The length of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than zero or greater than <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>Gets the maximum capacity of this instance.</summary>
      <returns>The maximum number of characters this instance can hold.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>Removes the specified range of characters from this instance.</summary>
      <param name="startIndex">The zero-based position in this instance where removal begins.</param>
      <param name="length">The number of characters to remove.</param>
      <returns>A reference to this instance after the excise operation has completed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, or <paramref name="startIndex" /> + <paramref name="length" /> is greater than the length of this instance.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>Replaces all occurrences of a specified character in this instance with another specified character.</summary>
      <param name="oldChar">The character to replace.</param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />.</param>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</summary>
      <param name="oldChar">The character to replace.</param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />.</param>
      <param name="startIndex">The position in this instance where the substring begins.</param>
      <param name="count">The length of the substring.</param>
      <returns>A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> is greater than the length of the value of this instance.  
-or-  
<paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>Replaces all occurrences of a specified string in this instance with another specified string.</summary>
      <param name="oldValue">The string to replace.</param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or <see langword="null" />.</param>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</summary>
      <param name="oldValue">The string to replace.</param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />, or <see langword="null" />.</param>
      <param name="startIndex">The position in this instance where the substring begins.</param>
      <param name="count">The length of the substring.</param>
      <returns>A reference to this instance with all instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> + <paramref name="count" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="oldValue" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.  
-or-  
<paramref name="startIndex" /> plus <paramref name="count" /> indicates a character position not within this instance.  
-or-  
Enlarging the value of this instance would exceed <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.StringBuilder" /> object.</summary>
      <param name="info">The object to populate with serialization information.</param>
      <param name="context">The place to store and retrieve serialized data. Reserved for future use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
      <returns>A string whose value is the same as this instance.</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a substring of this instance to a <see cref="T:System.String" />.</summary>
      <param name="startIndex">The starting position of the substring in this instance.</param>
      <param name="length">The length of the substring.</param>
      <returns>A string whose value is the same as the specified substring of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.  
-or-  
The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the length of the current instance.</exception>
    </member>
    <member name="T:System.Text.StringRuneEnumerator">
      <summary>Provides an enumerator for the <see cref="T:System.Text.Rune" /> values represented by a string.</summary>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.Current">
      <summary>Gets the <see cref="T:System.Text.Rune" /> at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.Text.Rune" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.GetEnumerator">
      <summary>Returns the current enumerator instance.</summary>
      <returns>The current enumerator instance.</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.MoveNext">
      <summary>Advances the enumerator to the next <see cref="T:System.Text.Rune" /> of the string.</summary>
      <returns>
        <see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the string has been reached.</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#Generic#IEnumerable{System#Text#Rune}#GetEnumerator">
      <summary>Returns the current enumerator instance.</summary>
      <returns>The current enumerator instance.</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns the current enumerator instance.</summary>
      <returns>The current enumerator instance.</returns>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the <see cref="T:System.Text.Rune" /> at the current position of the enumerator.</summary>
      <returns>The <see cref="T:System.Text.Rune" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Reset">
      <summary>Resets the current <see cref="T:System.Text.StringRuneEnumerator" /> instance to the beginning of the string.</summary>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#IDisposable#Dispose">
      <summary>Releases all resources used by the current <see cref="T:System.Text.StringRuneEnumerator" /> instance.</summary>
    </member>
    <member name="T:System.Text.Unicode.Utf8">
      <summary>Provides static methods that convert chunked data between UTF-8 and UTF-16 encodings.</summary>
    </member>
    <member name="M:System.Text.Unicode.Utf8.FromUtf16(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>Converts a UTF-16 character span to a UTF-8 encoded byte span.</summary>
      <param name="source">A UTF-16 encoded read-only character span.</param>
      <param name="destination">A UTF-8 encoded byte span.</param>
      <param name="charsRead">When the method returns, the number of characters read from <paramref name="source" />.</param>
      <param name="bytesWritten">When the method returns, the number of characters written to <paramref name="destination" />.</param>
      <param name="replaceInvalidSequences">
        <see langword="true" /> to replace invalid UTF-16 sequences in <paramref name="source" /> with U+FFFD; <see langword="false" /> to return <see cref="F:System.Buffers.OperationStatus.InvalidData" /> if invalid characters are found in <paramref name="source" />.</param>
      <param name="isFinalBlock">
        <see langword="true" /> if the method should not return <see cref="F:System.Buffers.OperationStatus.InvalidData" />; otherwise, <see langword="false" />.</param>
      <returns>A value that indicates that status of the conversion.</returns>
    </member>
    <member name="M:System.Text.Unicode.Utf8.ToUtf16(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>Converts a UTF-8 encoded read-only byte span to a UTF-16 encoded character span.</summary>
      <param name="source">A UTF-8 encoded read-only character span.</param>
      <param name="destination">A UTF-8 encoded byte span..</param>
      <param name="bytesRead">When the method returns, the number of bytes read from <paramref name="source" />.</param>
      <param name="charsWritten">When the method returns, the number of characters written to <paramref name="destination" />.</param>
      <param name="replaceInvalidSequences">
        <see langword="true" /> to replace invalid UTF-8 sequences in <paramref name="source" /> with U+FFFD; <see langword="false" /> to return <see cref="F:System.Buffers.OperationStatus.InvalidData" /> if invalid characters are found in <paramref name="source" />.</param>
      <param name="isFinalBlock">
        <see langword="true" /> if the method should not return <see cref="F:System.Buffers.OperationStatus.InvalidData" />; otherwise, <see langword="false" />.</param>
      <returns>A value that indicates the status of the conversion.</returns>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>Propagates notification that operations should be canceled.</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>Initializes the <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="canceled">The canceled state for the token.</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>Gets whether this token is capable of being in the canceled state.</summary>
      <returns>
        <see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</summary>
      <param name="other">The other object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />. See the Remarks section for more information.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</summary>
      <param name="other">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the instances are equal; otherwise, <see langword="false" />. See the Remarks section for more information.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>Gets whether cancellation has been requested for this token.</summary>
      <returns>
        <see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</summary>
      <returns>An empty cancellation token.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="useSynchronizationContext">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="state">The state to pass to the <paramref name="callback" /> when the delegate is invoked. This may be null.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <param name="callback">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="state">The state to pass to the <paramref name="callback" /> when the delegate is invoked. This may be null.</param>
      <param name="useSynchronizationContext">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</param>
      <returns>The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</summary>
      <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)">
      <summary>Registers a delegate that is called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</summary>
      <param name="callback">The delegate to execute when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</param>
      <param name="state">The state to pass to the <paramref name="callback" /> when the delegate is invoked.  This may be <see langword="null" />.</param>
      <returns>An object that can 
            be used to unregister the callback.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>Represents a callback delegate that has been registered with a <see cref="T:System.Threading.CancellationToken" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenRegistration" /> class.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.DisposeAsync">
      <summary>Disposes of the registration and unregisters the target callback from the associated 
            <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>A task that represents the asynchronous dispose operation.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <param name="obj">The other object to which to compare this instance.</param>
      <returns>True, if both this and <paramref name="obj" /> are equal. False, otherwise.  
 Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <param name="other">The other <see cref="T:System.Threading.CancellationTokenRegistration" /> to which to compare this instance.</param>
      <returns>True, if both this and <paramref name="other" /> are equal. False, otherwise.  
 Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True if the instances are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are not equal.</summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True if the instances are not equal; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenRegistration.Token">
      <summary>Gets the <see cref="T:System.Threading.CancellationToken" /> with which this registration is associated.  If the
            registration isn't associated with a token (such as after the registration has been disposed),
            this will return a default token.</summary>
      <returns>The cancellation token with which this registration is associated, or a default token if the
            registration isn't associated with a token (such as after the registration has been disposed).</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Unregister">
      <summary>Disposes of the registration and unregisters the target callback from the associated 
            <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>
        <see langword="true" /> if the method succeeds; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner. If the initialization method (or the parameterless constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property. If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached. In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread. If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property. If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the parameterless constructor for <paramref name="T" /> are not cached. In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the parameterless constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <paramref name="T" /> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread. The exception is not cached. The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource">
      <summary>Represents an object that can be wrapped by a <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetResult(System.Int16)">
      <summary>Gets the result of the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" />.</summary>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetStatus(System.Int16)">
      <summary>Gets the status of the current operation.</summary>
      <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
      <returns>The status of the current operation.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>Schedules the continuation action for this <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" />.</summary>
      <param name="continuation">The continuation to invoke when the operation has completed.</param>
      <param name="state">The state object to pass to <paramref name="continuation" /> when it's invoked.</param>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
      <param name="flags">The flags describing the behavior of the continuation.</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource`1">
      <summary>Represents an object that can be wrapped by a <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <typeparam name="TResult">The type of the result produced by the the result of the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetResult(System.Int16)">
      <summary>Gets the result of the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</summary>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
      <returns>The result of the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetStatus(System.Int16)">
      <summary>Gets the status of the current operation.</summary>
      <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" />'s constructor.</param>
      <returns>A value that indicates the status of the current operation.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>Schedules the continuation action for this <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</summary>
      <param name="continuation">The continuation to invoke when the operation has completed.</param>
      <param name="state">The state object to pass to <paramref name="continuation" /> when it's invoked.</param>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
      <param name="flags">The flags describing the behavior of the continuation.</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
      <summary>Provides the core logic for implementing a manual-reset <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> or <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</summary>
      <typeparam name="TResult">The type of the result of this manual-reset <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
      <summary>Returns the result of the operation.</summary>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
      <summary>Gets the status of the operation.</summary>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
      <returns>A value that indicates the status of the operation.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>Schedules the continuation action for this operation.</summary>
      <param name="continuation">The continuation to invoke when the operation has completed.</param>
      <param name="state">The state object to pass to <paramref name="continuation" /> when it's invoked.</param>
      <param name="token">An opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask" /> constructor.</param>
      <param name="flags">The flags describing the behavior of the continuation.</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
      <summary>Resets to prepare for the next operation.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
      <summary>Gets or sets whether to force continuations to run asynchronously.</summary>
      <returns>
        <see langword="true" /> to force continuations to run asynchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
      <summary>Completes with an error.</summary>
      <param name="error">The exception.</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
      <summary>Completes with a successful result.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
      <summary>Gets the operation version.</summary>
      <returns>The operation version.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags">
      <summary>Provides flags passed from <see cref="T:System.Threading.Tasks.ValueTask" /> and <see cref="T:System.Threading.Tasks.ValueTask`1" /> to the <see langword="OnCompleted" /> method to control the behavior of a continuation.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.FlowExecutionContext">
      <summary>
        <see langword="OnCompleted" /> should capture the current <see cref="T:System.Threading.ExecutionContext" /> and use it to run the continuation.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.None">
      <summary>No requirements are placed on how the continuation is invoked.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.UseSchedulingContext">
      <summary>
        <see langword="OnCompleted" /> should capture the current scheduling context (the <see cref="T:System.Threading.SynchronizationContext" />)
  and use it when queueing the continuation for execution.  If this glag is not set, the implementation
  may choose to execute the continuation in an arbitrary location.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceStatus">
      <summary>Indicates the status of an <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> or <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Canceled">
      <summary>The operation completed due to cancellation.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Faulted">
      <summary>The operation completed with an error.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Pending">
      <summary>The operation has not yet completed.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Succeeded">
      <summary>The operation completed successfully.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>Represents an asynchronous operation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</summary>
      <param name="action">The delegate that represents the code to execute in the task.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CompletedTask">
      <summary>Gets a task that has already completed successfully.</summary>
      <returns>The successfully completed task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</param>
      <returns>An object used to await this task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <param name="continuationAction">An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation executes based on a set of specified conditions.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />. The continuation receives a cancellation token and uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run according to the specified <paramref name="continuationOptions" />. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.  
 -or-  
 The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</summary>
      <param name="continuationAction">An action to run according to the specified <paramref name="continuationOptions" />. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation uses a specified scheduler.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value. The continuation receives a cancellation token.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run according to the specified <c>continuationOptions.</c> When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.  
 -or-  
 The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according to the specified continuation options and returns a value.</summary>
      <param name="continuationFunction">A function to run according to the condition specified in <paramref name="continuationOptions" />. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value. The continuation uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.  
 -or-  
 The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation receives caller-supplied state information.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes. The continuation receives caller-supplied state information and uses a specified scheduler.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>An integer that was assigned by the system to the currently-executing task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>Creates a task that completes after a specified number of milliseconds.</summary>
      <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay" /> argument is less than -1.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>Creates a cancellable task that completes after a specified number of milliseconds.</summary>
      <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay" /> argument is less than -1.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>Creates a task that completes after a specified time interval.</summary>
      <param name="delay">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMilliseconds(-1)" />.  
-or-  
The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Creates a cancellable task that completes after a specified time interval.</summary>
      <param name="delay">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <returns>A task that represents the time delay.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMilliseconds(-1)" />.  
-or-  
The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
      <summary>Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</summary>
      <param name="disposing">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</param>
      <exception cref="T:System.InvalidOperationException">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely. If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</summary>
      <returns>The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</summary>
      <returns>A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</summary>
      <param name="cancellationToken">The cancellation token with which to complete the task.</param>
      <returns>The canceled task.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</summary>
      <param name="cancellationToken">The cancellation token with which to complete the task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The canceled task.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</summary>
      <param name="exception">The exception with which to complete the task.</param>
      <returns>The faulted task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</summary>
      <param name="exception">The exception with which to complete the task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The faulted task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</summary>
      <param name="result">The result to store into the completed task.</param>
      <typeparam name="TResult">The type of the result returned by the task.</typeparam>
      <returns>The successfully completed task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>An awaiter instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</summary>
      <returns>The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</summary>
      <returns>
        <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>Gets a value that indicates whether the task has completed.</summary>
      <returns>
        <see langword="true" /> if the task has completed (that is, the task is in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</summary>
      <returns>
        <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</summary>
      <param name="action">The work to execute asynchronously</param>
      <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter was <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work. A cancellation token allows the work to be cancelled.</summary>
      <param name="action">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
      <returns>A task that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter was <see langword="null" />.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</summary>
      <param name="function">The work to execute asynchronously</param>
      <returns>A task that represents a proxy for the task returned by <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</summary>
      <param name="function">The work to execute asynchronously.</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
      <returns>A task that represents a proxy for the task returned by <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was <see langword="null" />.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</summary>
      <param name="function">The work to execute asynchronously.</param>
      <typeparam name="TResult">The return type of the task.</typeparam>
      <returns>A task object that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work. A cancellation token allows the work to be cancelled.</summary>
      <param name="function">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
      <typeparam name="TResult">The result type of the task.</typeparam>
      <returns>A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</summary>
      <param name="function">The work to execute asynchronously</param>
      <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
      <returns>A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</summary>
      <param name="function">The work to execute asynchronously</param>
      <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
      <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
      <returns>A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was <see langword="null" />.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</summary>
      <param name="scheduler">The scheduler on which to attempt to run this task inline.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.Threading.Tasks.TaskSchedulerException">The scheduler was unable to queue this task.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</summary>
      <returns>The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</summary>
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>Gets an indication of whether the operation completed synchronously.</summary>
      <returns>
        <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.</summary>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The task has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.  
 -or-  
 An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.  
 -or-  
 An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</param>
      <returns>
        <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.  
 -or-  
 An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.  
 -or-  
 An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled. If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.  
 -or-  
 An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <returns>The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</param>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="cancellationToken">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</param>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</summary>
      <param name="tasks">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.TimeSpan.TotalMilliseconds" /> property of the <paramref name="timeout" /> argument is a negative number other than -1, which represents an infinite time-out.  
-or-  
The <see cref="P:System.TimeSpan.TotalMilliseconds" /> property of the <paramref name="timeout" /> argument is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of all of the supplied tasks.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Creates a task that will complete when any of the supplied tasks have completed.</summary>
      <param name="tasks">The tasks to wait on for completion.</param>
      <typeparam name="TResult">The type of the completed task.</typeparam>
      <returns>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>Creates an awaitable task that asynchronously yields back to the current context when awaited.</summary>
      <returns>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>Represents an asynchronous operation that can return a value.</summary>
      <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to this task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and creation options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified function and state.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to be assigned to the new task.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Task`1" /> with the specified action, state, and options.</summary>
      <param name="function">The delegate that represents the code to execute in the task. When the function has completed, the task's <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will be set to return the result value of the function.</param>
      <param name="state">An object representing data to be used by the function.</param>
      <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="continueOnCapturedContext">true to attempt to marshal the continuation back to the original context captured; otherwise, false.</param>
      <returns>An object used to await this task.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>Creates a continuation that is passed state information and that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as  well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation action.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>Creates a continuation that executes asynchronously when the target task completes.</summary>
      <param name="continuationAction">An action to run when the antecedent <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>Creates a cancelable continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate is passed the completed task as an argument.</param>
      <param name="cancellationToken">The cancellation token that is passed to the new continuation task.</param>
      <returns>A new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</summary>
      <param name="continuationAction">An action to run according the condition specified in <paramref name="continuationOptions" />. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</summary>
      <param name="continuationAction">An action to according the condition specified in <paramref name="continuationOptions" />. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</summary>
      <param name="continuationFunction">A function to run according the condition specified in <paramref name="continuationOptions" />.  
 When run, the delegate will be passed as an argument this completed task.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes according the condition specified in <paramref name="continuationOptions" />.</summary>
      <param name="continuationFunction">A function to run according the condition specified in <paramref name="continuationOptions" />.  
 When run, the delegate will be passed the completed task as an argument.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task as an argument.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The  <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="continuationOptions">Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation that executes when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes.</summary>
      <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</param>
      <param name="state">An object representing data to be used by the continuation function.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</param>
      <typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam>
      <returns>A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task`1" /> instances.</summary>
      <returns>A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task`1" /> objects.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>An awaiter instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>Gets the result value of this <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>The result value of this <see cref="T:System.Threading.Tasks.Task`1" />, which is of the same type as the task's type parameter.</returns>
      <exception cref="T:System.AggregateException">The task was canceled. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.  
 -or-  
 An exception was thrown during the execution of the task. The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>Specifies the behavior for a task that is created by using the <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /> or <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /> method.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> option so that the parent and child tasks are synchronized.  
 Note that if a parent task is configured with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> option, the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> option in the child task has no effect, and the child task will execute as a detached child task.  
 For more information, see Attached and Detached Child Tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see Attached and Detached Child Tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's <see cref="T:System.Threading.CancellationTokenSource" /> is disposed in a <see langword="finally" /> block (<see langword="Finally" /> in Visual Basic), a continuation with this option will run in that <see langword="finally" /> block. Only very short-running continuations should be executed synchronously.  
 Because the task executes synchronously, there is no need to call a method such as <see cref="M:System.Threading.Tasks.Task.Wait" /> to ensure that the calling thread waits for the task to complete.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>Specifies that tasks created by the continuation by calling methods such as <see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /> or <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /> see the default scheduler (<see cref="P:System.Threading.Tasks.TaskScheduler.Default" />) rather than the scheduler on which this continuation is running as the current scheduler.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that oversubscription may be warranted.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <see cref="P:System.Threading.Tasks.Task.Status" /> property value. It the continuation is a child task, it is created as a detached nested task.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.  
 The <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /> option guarantees that the <see cref="P:System.Threading.Tasks.Task.Exception" /> property in the antecedent is not <see langword="null" />. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the <see cref="P:System.Threading.Tasks.Task.Exception" /> property, the exception is unhandled. Also, if you attempt to access the <see cref="P:System.Threading.Tasks.Task`1.Result" /> property of a task that has been canceled or has faulted, a new exception is thrown.  
 This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its <see cref="P:System.Threading.Tasks.Task.Status" /> property upon completion is <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />. This option is not valid for multi-task continuations.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler" /> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
      <summary>Specifies that the continuation task should be run asynchronously.  This option has precedence over <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>Specifies flags that control optional behavior for the creation and execution of tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>Specifies that a task is attached to a parent in the task hierarchy. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> option so that the parent and child tasks are synchronized.  
 Note that if a parent task is configured with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> option, the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> option in the child task has no effect, and the child task will execute as a detached child task.  
 For more information, see Attached and Detached Child Tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>Specifies that any child task that attempts to execute as an attached child task (that is, it is created with the <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> option) will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see Attached and Detached Child Tasks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>Prevents the ambient scheduler from being seen as the current scheduler in the created task. This means that operations like StartNew or ContinueWith that are performed in the created task will see <see cref="P:System.Threading.Tasks.TaskScheduler.Default" /> as the current scheduler.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>Specifies that a task will be a long-running, coarse-grained operation involving fewer, larger components than fine-grained systems. It provides a hint to the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that oversubscription may be warranted. Oversubscription lets you create more threads than the available number of hardware threads. It also provides a hint  to the task scheduler that an additional thread might be required for the task so that it does not block the forward progress of other threads or work items on the local thread-pool queue.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>Specifies that the default behavior should be used.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler" /> to schedule a task in as fair a manner as possible, meaning that tasks scheduled sooner will be more likely to be run sooner, and tasks scheduled later will be more likely to be run later.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
      <summary>Forces continuations added to the current task to be executed asynchronously.  
 Note that the <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> member is available in the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration starting with the .NET Framework 4.6.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</param>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
      <param name="scheduler">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.  
 -or-  
 The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="creationOptions">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</param>
      <param name="continuationOptions">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.  
 -or-  
 The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</summary>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>Gets the default cancellation token for this task factory.</summary>
      <returns>The default task cancellation token for this task factory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>Gets the default task continuation options for this task factory.</summary>
      <returns>The default task continuation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationAction">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token to assign to the new continuation task.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <param name="scheduler">The object that is used to schedule the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that starts when a set of specified tasks has completed.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">An element in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array is empty or contains a null value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationAction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty .</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.  
 -or-  
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationFunction" /> is <see langword="null" />.  
 -or-  
 <paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
<paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.  
 -or-  
 paramref name="scheduler" /&gt; is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationAction">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationAction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
<paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
<paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a <see langword="null" /> value.  
 -or-  
The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
<paramref name="continuationFunction" /> is <see langword="null" />.  
 -or-  
 <paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>Gets the default task creation options for this task factory.</summary>
      <returns>The default task creation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid TaskCreationOptions value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">paramref name="creationOptions" /&gt; specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The action delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.  
 -or-  
 <paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
-or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> is <see langword="null" />.  
 -or-  
<paramref name="endMethod" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>Gets the default task scheduler for this task factory.</summary>
      <returns>The default task scheduler for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>Creates and starts a task.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.  
-or-  
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.  
 -or-
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="action">The action delegate to execute asynchronously.</param>
      <param name="state">An object containing data to be used by the <paramref name="action" /> delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.  
-or-  
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.  
-or-  
<paramref name="scheduler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <param name="function">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">An object containing data to be used by the <paramref name="function" /> delegate.</param>
      <param name="creationOptions">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</summary>
      <typeparam name="TResult">The return value of the <see cref="T:System.Threading.Tasks.Task`1" /> objects that the methods of this class create.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</summary>
      <param name="cancellationToken">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="cancellationToken">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</param>
      <param name="creationOptions">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="continuationOptions">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="scheduler">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />. A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> should be used.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="creationOptions">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="continuationOptions">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</summary>
      <param name="scheduler">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />. A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler" /> should be used.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>Gets the default cancellation token for this task factory.</summary>
      <returns>The default cancellation token for this task factory.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> enumeration value for this task factory.</summary>
      <returns>One of the enumeration values that specifies the default continuation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> array is <see langword="null" />.  
-or-  
The <paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 <paramref name="continuationFunction" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <param name="scheduler">The scheduler that is used to schedule the created continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <param name="scheduler">The scheduler that is used to schedule the created continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of a set of provided tasks.</summary>
      <param name="tasks">The array of tasks from which to continue.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value or is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is null.  
 -or-  
 The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created continuation task.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation task.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new continuation task.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</exception>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.  
 -or-  
 The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Creates a continuation task that will be started upon the completion of any task in the provided set.</summary>
      <param name="tasks">The array of tasks from which to continue when one task completes.</param>
      <param name="continuationFunction">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</param>
      <param name="continuationOptions">One of the enumeration values that controls the behavior of the created continuation task. The <see langword="NotOn" /> and <see langword="OnlyOn" /> values are not valid.</param>
      <typeparam name="TAntecedentResult">The type of the result of the antecedent <paramref name="tasks" />.</typeparam>
      <returns>The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">One of the elements in the <paramref name="tasks" /> array has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> array is <see langword="null" />.  
 -or-  
 The <paramref name="continuationFunction" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contains a null value.  
 -or-  
 The <paramref name="tasks" /> array is empty.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration value for this task factory.</summary>
      <returns>One of the enumeration values that specifies the default creation options for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>A task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</param>
      <param name="endMethod">The function delegate that processes the completed <paramref name="asyncResult" />.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the task that executes the end method.</param>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</summary>
      <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
      <param name="endMethod">The delegate that ends the asynchronous operation.</param>
      <param name="arg1">The first argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg2">The second argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="arg3">The third argument passed to the <paramref name="beginMethod" /> delegate.</param>
      <param name="state">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</param>
      <param name="creationOptions">An object that controls the behavior of the created task.</param>
      <typeparam name="TArg1">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</typeparam>
      <typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</typeparam>
      <returns>The created task that represents the asynchronous operation.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="beginMethod" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="endMethod" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>Gets the task scheduler for this task factory.</summary>
      <returns>The task scheduler for this task factory.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The started <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the <paramref name="function" /> delegate.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the <paramref name="function" /> delegate.</param>
      <param name="cancellationToken">The cancellation token that will be assigned to the new task.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <param name="scheduler">The task scheduler that is used to schedule the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ObjectDisposedException">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.  
 -or-  
 The <paramref name="scheduler" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Creates and starts a task.</summary>
      <param name="function">A function delegate that returns the future result to be available through the task.</param>
      <param name="state">An object that contains data to be used by the <paramref name="function" /> delegate.</param>
      <param name="creationOptions">One of the enumeration values that controls the behavior of the created task.</param>
      <returns>The started task.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> parameter specifies an invalid value.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>Represents an object that handles the low-level work of queuing tasks onto threads.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</summary>
      <returns>Returns the <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the currently executing task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>Gets the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance that is provided by the .NET Framework.</summary>
      <returns>Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler" /> instance.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>Creates a <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.TaskScheduler" /> associated with the current <see cref="T:System.Threading.SynchronizationContext" />, as determined by <see cref="P:System.Threading.SynchronizationContext.Current" />.</returns>
      <exception cref="T:System.InvalidOperationException">The current SynchronizationContext may not be used as a TaskScheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.</summary>
      <returns>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</returns>
      <exception cref="T:System.NotSupportedException">This scheduler is unable to generate a list of queued tasks at this time.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>Gets the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <returns>Returns the unique ID for this <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.</summary>
      <returns>Returns an integer that represents the maximum concurrency level. The default scheduler returns <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>Attempts to dequeue a <see cref="T:System.Threading.Tasks.Task" /> that was previously queued to this scheduler.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be dequeued.</param>
      <returns>A Boolean denoting whether the <paramref name="task" /> argument was successfully dequeued.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>Attempts to execute the provided <see cref="T:System.Threading.Tasks.Task" /> on this scheduler.</summary>
      <param name="task">A <see cref="T:System.Threading.Tasks.Task" /> object to be executed.</param>
      <returns>A Boolean that is true if <paramref name="task" /> was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</returns>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task" /> is not associated with this scheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously in this call, and if it can, executes it.</summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
      <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
      <returns>A Boolean value indicating whether the task was executed inline.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task" /> was already executed.</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>Represents the current stage in the lifecycle of a <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task's CancellationToken was already signaled before the task started executing. For more information, see Task Cancellation.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>The task has been initialized but has not yet been scheduled.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>The task completed due to an unhandled exception.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>The task completed execution successfully.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>The task is running but has not yet completed.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>The task has finished executing and is implicitly waiting for attached child tasks to complete.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>The task has been scheduled for execution but has not yet begun executing.</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>Provides data for the event that is raised when a faulted <see cref="T:System.Threading.Tasks.Task" />'s exception goes unobserved.</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> class with the unobserved exception.</summary>
      <param name="exception">The Exception that has gone unobserved.</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>The Exception that went unobserved.</summary>
      <returns>The Exception that went unobserved.</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>Gets whether this exception has been marked as "observed."</summary>
      <returns>true if this exception has been marked as "observed"; otherwise false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>Marks the <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> as "observed," thus preventing it from triggering exception escalation policy which, by default, terminates the process.</summary>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask">
      <summary>Provides an awaitable result of an asynchronous operation.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Sources.IValueTaskSource,System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ValueTask" /> class using the supplied <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> object that represents the operation.</summary>
      <param name="source">An object that represents the operation.</param>
      <param name="token">An opaque value that is passed through to the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /></param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Task)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ValueTask" /> class using the supplied task that represents the operation.</summary>
      <param name="task">The task that represents the operation.</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.AsTask">
      <summary>Retrieves a <see cref="T:System.Threading.Tasks.Task" /> object that represents this <see cref="T:System.Threading.Tasks.ValueTask" />.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> object that is wrapped in this <see cref="T:System.Threading.Tasks.ValueTask" /> if one exists, or a new <see cref="T:System.Threading.Tasks.Task" /> object that represents the result.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter for this value.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> to attempt to marshal the continuation back to the captured context; otherwise, <see langword="false" />.</param>
      <returns>The configured awaiter.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Threading.Tasks.ValueTask" /> instance.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Threading.Tasks.ValueTask)">
      <summary>Determines whether the specified <see cref="T:System.Threading.Tasks.ValueTask" /> object is equal to the current <see cref="T:System.Threading.Tasks.ValueTask" /> object.</summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetAwaiter">
      <summary>Creates an awaiter for this value.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for the current object.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCanceled">
      <summary>Gets a value that indicates whether this object represents a canceled operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a canceled operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompleted">
      <summary>Gets a value that indicates whether this object represents a completed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a completed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompletedSuccessfully">
      <summary>Gets a value that indicates whether this object represents a successfully completed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a successfully completed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsFaulted">
      <summary>Gets a value that indicates whether this object represents a failed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a failed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Equality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>Compares two <see cref="T:System.Threading.Tasks.ValueTask" /> values for equality.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Threading.Tasks.ValueTask" /> values are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Inequality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>Determines whether two <see cref="T:System.Threading.Tasks.ValueTask" /> values are unequal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Threading.Tasks.ValueTask" /> values are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Preserve">
      <summary>Gets a <see cref="T:System.Threading.Tasks.ValueTask" /> that may be used at any point in the future.</summary>
      <returns>The preserved <see cref="T:System.Threading.Tasks.ValueTask" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask`1">
      <summary>Provides a value type that wraps a <see cref="T:System.Threading.Tasks.Task`1" /> and a <typeparamref name="TResult" />, only one of which is used.</summary>
      <typeparam name="TResult">The result.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ValueTask`1" /> class using the supplied result of a successful operation.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Sources.IValueTaskSource{`0},System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ValueTask`1" /> class with a <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> object that represents the operation.</summary>
      <param name="source">The source.</param>
      <param name="token">An opaque value that is passed to the <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" />.</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.ValueTask`1" /> class using the supplied task that represents the operation.</summary>
      <param name="task">The task.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="task" /> argument is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
      <summary>Retrieves a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents this <see cref="T:System.Threading.Tasks.ValueTask`1" />.</summary>
      <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> object that is wrapped in this <see cref="T:System.Threading.Tasks.ValueTask`1" /> if one exists, or a new <see cref="T:System.Threading.Tasks.Task`1" /> object that represents the result.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
      <summary>Configures an awaiter for this value.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> to attempt to marshal the continuation back to the captured context; otherwise, <see langword="false" />.</param>
      <returns>The configured awaiter.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
      <summary>Determines whether the specified <see cref="T:System.Threading.Tasks.ValueTask`1" /> object is equal to the current <see cref="T:System.Threading.Tasks.ValueTask`1" /> object.</summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
      <summary>Creates an awaiter for this value.</summary>
      <returns>The awaiter.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for the current object.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
      <summary>Gets a value that indicates whether this object represents a canceled operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a canceled operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
      <summary>Gets a value that indicates whether this object represents a completed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a completed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
      <summary>Gets a value that indicates whether this object represents a successfully completed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a successfully completed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
      <summary>Gets a value that indicates whether this object represents a failed operation.</summary>
      <returns>
        <see langword="true" /> if this object represents a failed operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>Compares two values for equality.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Threading.Tasks.ValueTask`1" /> values are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>Determines whether two <see cref="T:System.Threading.Tasks.ValueTask`1" /> values are unequal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.Threading.Tasks.ValueTask`1" /> values are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Preserve">
      <summary>Gets a <see cref="T:System.Threading.Tasks.ValueTask`1" /> that may be used at any point in the future.</summary>
      <returns>A task object for future use.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.Result">
      <summary>Gets the result.</summary>
      <returns>The result.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>Contains constants that specify infinite time-out intervals. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>A constant used to specify an infinite waiting period, for threading methods that accept an <see cref="T:System.Int32" /> parameter.</summary>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>A constant used to specify an infinite waiting period, for methods that accept a <see cref="T:System.TimeSpan" /> parameter.</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</summary>
      <param name="explicitDisposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>An <see langword="IntPtr" /> representing the native operating system handle. The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</returns>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>Represents an invalid native operating system handle. This field is read-only.</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>Gets or sets the native operating system handle.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <returns>
        <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
-or-  
<paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="millisecondsTimeout">An integer that represents the interval to wait. If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
-or-  
<paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
      <summary>Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</summary>
      <param name="toSignal">The <see cref="T:System.Threading.WaitHandle" /> to signal.</param>
      <param name="toWaitOn">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the interval to wait. If the value is -1, the wait is infinite.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> is <see langword="null" />.  
-or-  
<paramref name="toWaitOn" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">This method is not supported on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> is a semaphore, and it already has a full count.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>Waits for all the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />. -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.  
 -or-  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  


            

 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
 -or-  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
 -or-  
 <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  


            

 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
 -or-  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
 -or-  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
 -or-  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</param>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
 -or-  
 <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  


            

 The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
 -or-  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.  
 -or-  
 <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">The <paramref name="waitHandles" /> array contains elements that are duplicates.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.  
 -or-  
 The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>Waits for any of the elements in the specified array to receive a signal.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <returns>The array index of the object that satisfied the wait.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is <see langword="null" />.  
 -or-  
 One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</summary>
      <returns>
        <see langword="true" /> if the current instance receives a signal. If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  
-or-  
<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled. This field is constant.</summary>
    </member>
    <member name="T:System.Threading.WaitHandleExtensions">
      <summary>Provides convenience methods to for working with a safe handle for a wait handle.</summary>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)">
      <summary>Gets the safe handle for a native operating system wait handle.</summary>
      <param name="waitHandle">A native operating system handle.</param>
      <returns>The safe wait handle that wraps the native operating system wait handle.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)">
      <summary>Sets a safe handle for a native operating system wait handle.</summary>
      <param name="waitHandle">A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.</param>
      <param name="value">The safe handle to wrap the operating system handle.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>Indicates that the value of a static field is unique for each thread.</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>The exception that is thrown when the time allotted for a process or operation has expired.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. The <paramref name="context" /> parameter is reserved for future use, and can be specified as <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" />, or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>Represents a time interval.</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of hours, minutes, and seconds.</summary>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, and seconds.</summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <param name="milliseconds">Number of milliseconds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to the specified number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the sum of the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
      <param name="ts">The time interval to add.</param>
      <returns>A new object that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>One of the following values.  
  Value  

  Description  

  -1  

 <paramref name="t1" /> is shorter than <paramref name="t2" />.  

  0  

 <paramref name="t1" /> is equal to <paramref name="t2" />.  

  1  

 <paramref name="t1" /> is longer than <paramref name="t2" />.</returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>One of the following values.  
  Value  

  Description  

  -1  

  This instance is shorter than <paramref name="value" />.  

  0  

  This instance is equal to <paramref name="value" />.  

  1  

  This instance is longer than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <see cref="T:System.TimeSpan" /> object.</summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Value  

  Description  

  A negative integer  

  This instance is shorter than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  A positive integer  

  This instance is longer than <paramref name="value" />.</returns>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The day component of this instance. The return value can be positive or negative.</returns>
    </member>
    <member name="M:System.TimeSpan.Divide(System.Double)">
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.Divide(System.TimeSpan)">
      <param name="ts" />
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="value">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> represents the same time interval as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of days, accurate to the nearest millisecond.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of hours accurate to the nearest millisecond.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
      <param name="value">A number of milliseconds.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
      <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
-or-  
<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
      <param name="value">A number of ticks that represent a time.</param>
      <returns>An object that represents <paramref name="value" />.</returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="M:System.TimeSpan.Multiply(System.Double)">
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the negated value of this instance.</summary>
      <returns>A new object with the same numeric value as this instance, but with the opposite sign.</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
      <param name="t1">The first time interval to add.</param>
      <param name="t2">The second time interval to add.</param>
      <returns>An object whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)">
      <param name="t1" />
      <param name="t2" />
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The first time interval to compare.</param>
      <param name="t2">The second time interval to compare.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)">
      <param name="factor" />
      <param name="timeSpan" />
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="t1">The minuend.</param>
      <param name="t2">The subtrahend.</param>
      <returns>An object whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
      <param name="t">The time interval to be negated.</param>
      <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />.</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
      <param name="t">The time interval to return.</param>
      <returns>The time interval specified by <paramref name="t" />.</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="input" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.</summary>
      <param name="s">A string that specifies the time interval to convert.</param>
      <returns>A time interval that corresponds to <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" /> and <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
      <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.  
-or-  
At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the difference between the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
      <param name="ts">The time interval to be subtracted.</param>
      <returns>A new time interval whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The number of ticks contained in this instance.</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>Represents the number of ticks in 1 second.</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value.</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format.</summary>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format and culture-specific formatting information.</summary>
      <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
      <returns>The total number of days represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
      <returns>The total number of hours represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
      <returns>The total number of milliseconds represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
      <returns>The total number of minutes represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
      <returns>The total number of seconds represented by this instance.</returns>
    </member>
    <member name="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="s">A string that specifies the time interval to convert.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
      <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
      <param name="input">A string that specifies the time interval to convert.</param>
      <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
      <param name="formatProvider">An object that provides culture-specific formatting information.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="T:System.TimeZone">
      <summary>Represents a time zone.</summary>
    </member>
    <member name="M:System.TimeZone.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeZone" /> class.</summary>
    </member>
    <member name="P:System.TimeZone.CurrentTimeZone">
      <summary>Gets the time zone of the current computer.</summary>
      <returns>A <see cref="T:System.TimeZone" /> object that represents the current local time zone.</returns>
    </member>
    <member name="P:System.TimeZone.DaylightName">
      <summary>Gets the daylight saving time zone name.</summary>
      <returns>The daylight saving time zone name.</returns>
    </member>
    <member name="M:System.TimeZone.GetDaylightChanges(System.Int32)">
      <summary>Returns the daylight saving time period for a particular year.</summary>
      <param name="year">The year that the daylight saving time period applies to.</param>
      <returns>A <see cref="T:System.Globalization.DaylightTime" /> object that contains the start and end date for daylight saving time in <paramref name="year" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="M:System.TimeZone.GetUtcOffset(System.DateTime)">
      <summary>Returns the Coordinated Universal Time (UTC) offset for the specified local time.</summary>
      <param name="time">A date and time value.</param>
      <returns>The Coordinated Universal Time (UTC) offset from <paramref name="time" />.</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)">
      <summary>Returns a value indicating whether the specified date and time is within a daylight saving time period.</summary>
      <param name="time">A date and time.</param>
      <returns>
        <see langword="true" /> if <paramref name="time" /> is in a daylight saving time period; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
      <summary>Returns a value indicating whether the specified date and time is within the specified daylight saving time period.</summary>
      <param name="time">A date and time.</param>
      <param name="daylightTimes">A daylight saving time period.</param>
      <returns>
        <see langword="true" /> if <paramref name="time" /> is in <paramref name="daylightTimes" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="daylightTimes" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.TimeZone.StandardName">
      <summary>Gets the standard time zone name.</summary>
      <returns>The standard time zone name.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt was made to set this property to <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZone.ToLocalTime(System.DateTime)">
      <summary>Returns the local time that corresponds to a specified date and time value.</summary>
      <param name="time">A Coordinated Universal Time (UTC) time.</param>
      <returns>A <see cref="T:System.DateTime" /> object whose value is the local time that corresponds to <paramref name="time" />.</returns>
    </member>
    <member name="M:System.TimeZone.ToUniversalTime(System.DateTime)">
      <summary>Returns the Coordinated Universal Time (UTC) that corresponds to a specified time.</summary>
      <param name="time">A date and time.</param>
      <returns>A <see cref="T:System.DateTime" /> object whose value is the Coordinated Universal Time (UTC) that corresponds to <paramref name="time" />.</returns>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>Represents any time zone in the world.</summary>
    </member>
    <member name="T:System.TimeZoneInfo.AdjustmentRule">
      <summary>Provides information about a time zone adjustment, such as the transition to and from daylight saving time.</summary>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>Creates a new adjustment rule for a particular time zone.</summary>
      <param name="dateStart">The effective date of the adjustment rule. If the value of the <paramref name="dateStart" /> parameter is <see langword="DateTime.MinValue.Date" />, this is the first adjustment rule in effect for a time zone.</param>
      <param name="dateEnd">The last date that the adjustment rule is in force. If the value of the <paramref name="dateEnd" /> parameter is <see langword="DateTime.MaxValue.Date" />, the adjustment rule has no end date.</param>
      <param name="daylightDelta">The time change that results from the adjustment. This value is added to the time zone's <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.</param>
      <param name="daylightTransitionStart">An object that defines the start of daylight saving time.</param>
      <param name="daylightTransitionEnd">An object that defines the end of daylight saving time.</param>
      <returns>An object that represents the new adjustment rule.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter does not equal <see cref="F:System.DateTimeKind.Unspecified" />.  
 -or-  
 The <paramref name="daylightTransitionStart" /> parameter is equal to the <paramref name="daylightTransitionEnd" /> parameter.  
 -or-  
 The <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter includes a time of day value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dateEnd" /> is earlier than <paramref name="dateStart" />.  
-or-  
<paramref name="daylightDelta" /> is less than -14 or greater than 14.  
-or-  
The <see cref="P:System.TimeSpan.Milliseconds" /> property of the <paramref name="daylightDelta" /> parameter is not equal to 0.  
-or-  
The <see cref="P:System.TimeSpan.Ticks" /> property of the <paramref name="daylightDelta" /> parameter does not equal a whole number of seconds.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateEnd">
      <summary>Gets the date when the adjustment rule ceases to be in effect.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that indicates the end date of the adjustment rule.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateStart">
      <summary>Gets the date when the adjustment rule takes effect.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that indicates when the adjustment rule takes effect.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta">
      <summary>Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd">
      <summary>Gets information about the annual transition from daylight saving time back to standard time.</summary>
      <returns>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> object that defines the annual transition from daylight saving time back to the time zone's standard time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart">
      <summary>Gets information about the annual transition from standard time to daylight saving time.</summary>
      <returns>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> object that defines the annual transition from a time zone's standard time to daylight saving time.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is equal to a second <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects have equal values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode">
      <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
      <returns>A 32-bit signed integer that serves as the hash code for the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of a <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data that is required to serialize this object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
      <returns>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ClearCachedData">
      <summary>Clears cached time zone data.</summary>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <returns>The date and time in the destination time zone.</returns>
      <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>Converts a time from one time zone to another.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZone">The time zone of <paramref name="dateTime" />.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Local" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="F:System.DateTimeKind.Local" />.  
 -or-  
 The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Utc" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  
 -or-  
 The <paramref name="dateTime" /> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sourceTimeZone" /> parameter is <see langword="null" />.  
 -or-  
 The <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>Converts a time to the time in a particular time zone.</summary>
      <param name="dateTimeOffset">The date and time to convert.</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <returns>The date and time in the destination time zone.</returns>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
      <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <returns>The date and time in the destination time zone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
      <summary>Converts a time from one time zone to another based on time zone identifiers.</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter does not correspond to the source time zone.  
 -or-  
 <paramref name="dateTime" /> is an invalid time in the source time zone.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZoneId" /> is <see langword="null" />.  
-or-  
<paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifiers were found, but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry keys that hold time zone data.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="sourceTimeZoneId" /> identifier was not found on the local system.  
 -or-  
 The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
      <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
      <param name="dateTimeOffset">The date and time to convert.</param>
      <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
      <returns>The date and time in the destination time zone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found but the registry data is corrupted.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.</summary>
      <param name="dateTime">The Coordinated Universal Time (UTC).</param>
      <param name="destinationTimeZone">The time zone to convert <paramref name="dateTime" /> to.</param>
      <returns>The date and time in the destination time zone. Its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" /> if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Utc" />; otherwise, its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of <paramref name="dateTime" /> is <see cref="F:System.DateTimeKind.Local" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)">
      <summary>Converts the specified date and time to Coordinated Universal Time (UTC).</summary>
      <param name="dateTime">The date and time to convert.</param>
      <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> value's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
        <paramref name="dateTime" />
        <see langword=")" /> returns <see langword="true" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts the time in a specified time zone to Coordinated Universal Time (UTC).</summary>
      <param name="dateTime">The date and time to convert.</param>
      <param name="sourceTimeZone">The time zone of <paramref name="dateTime" />.</param>
      <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> object's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" />.<see langword="Kind" /> is <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  
-or-  
<paramref name="dateTime" />.<see langword="Kind" /> is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Local" />.  
-or-  
<paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The name of the new time zone's standard time.</param>
      <returns>The new time zone.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
 -or-  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The new time zone's standard time name.</param>
      <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
      <param name="adjustmentRules">An array that augments the base UTC offset for a particular period.</param>
      <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the new time zone.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
 -or-  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  
 -or-  
 The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  
 -or-  
 One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  
 -or-  
 A date can have multiple adjustment rules applied to it.  
 -or-  
 The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)">
      <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.</summary>
      <param name="id">The time zone's identifier.</param>
      <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
      <param name="displayName">The display name of the new time zone.</param>
      <param name="standardDisplayName">The standard time name of the new time zone.</param>
      <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
      <param name="adjustmentRules">An array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
      <param name="disableDaylightSavingTime">
        <see langword="true" /> to discard any daylight saving time-related information present in <paramref name="adjustmentRules" /> with the new object; otherwise, <see langword="false" />.</param>
      <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is <see langword="true" />, the returned object has no daylight saving time data.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  
 -or-  
 The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  
 -or-  
 The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  
 -or-  
 One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  
 -or-  
 A date can have multiple adjustment rules applied to it.  
 -or-  
 The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>Gets the display name for the current time zone's daylight saving time.</summary>
      <returns>The display name for the time zone's daylight saving time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>Gets the general display name that represents the time zone.</summary>
      <returns>The time zone's general display name.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another object are equal.</summary>
      <param name="obj">A second object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.TimeZoneInfo" /> object that is equal to the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
      <param name="other">A second object to compare with the current object.</param>
      <returns>
        <see langword="true" /> if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>Instantiates a new <see cref="T:System.TimeZoneInfo" /> object based on its identifier.</summary>
      <param name="id">The time zone identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.</param>
      <returns>An object whose identifier is the value of the <paramref name="id" /> parameter.</returns>
      <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to hold information about the time zone.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">The time zone identifier specified by <paramref name="id" /> was not found. This means that a time zone identifier whose name matches <paramref name="id" /> does not exist, or that the identifier exists but does not contain any time zone data.</exception>
      <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
      <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.FromSerializedString(System.String)">
      <summary>Deserializes a string to re-create an original serialized <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="source">The string representation of the serialized <see cref="T:System.TimeZoneInfo" /> object.</param>
      <returns>The original serialized object.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter is <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is a null string.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The source parameter cannot be deserialized back into a <see cref="T:System.TimeZoneInfo" /> object.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAdjustmentRules">
      <summary>Retrieves an array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that apply to the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <returns>An array of objects for this time zone.</returns>
      <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to make an in-memory copy of the adjustment rules.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <param name="dateTime">A date and time.</param>
      <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      <param name="dateTimeOffset">A date and time.</param>
      <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOffset" /> is not an ambiguous time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
      <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>Returns a sorted collection of all the time zones about which information is available on the local system.</summary>
      <returns>A read-only collection of <see cref="T:System.TimeZoneInfo" /> objects.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to store all time zone information.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have permission to read from the registry keys that contain time zone information.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <param name="dateTime">The date and time to determine the offset for.</param>
      <returns>An object that indicates the time difference between the two time zones.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      <param name="dateTimeOffset">The date and time to determine the offset for.</param>
      <returns>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)">
      <summary>Indicates whether the current object and another <see cref="T:System.TimeZoneInfo" /> object have the same adjustment rules.</summary>
      <param name="other">A second object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.</param>
      <returns>
        <see langword="true" /> if the two time zones have identical adjustment rules and an identical base offset; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>Gets the time zone identifier.</summary>
      <returns>The time zone identifier.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <param name="dateTime">A date and time value.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      <param name="dateTimeOffset">A date and time.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="dateTime">A date and time value.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="dateTimeOffset">A date and time value.</param>
      <returns>
        <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>Indicates whether a particular date and time is invalid.</summary>
      <param name="dateTime">A date and time value.</param>
      <returns>
        <see langword="true" /> if <paramref name="dateTime" /> is invalid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
      <returns>An object that represents the local time zone.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>Gets the display name for the time zone's standard time.</summary>
      <returns>The display name of the time zone's standard time.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
      <returns>
        <see langword="true" /> if the time zone supports daylight saving time; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.TimeZoneInfo" /> object contains invalid or corrupted data.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ToSerializedString">
      <summary>Converts the current <see cref="T:System.TimeZoneInfo" /> object to a serialized string.</summary>
      <returns>A string that represents the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
      <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
    </member>
    <member name="T:System.TimeZoneInfo.TransitionTime">
      <summary>Provides information about a specific time change, such as the change from daylight saving time to standard time or vice versa, in a particular time zone.</summary>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule(System.DateTime,System.Int32,System.Int32)">
      <summary>Defines a time change that uses a fixed-date rule (that is, a time change that occurs on a specific day of a specific month).</summary>
      <param name="timeOfDay">The time at which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> property.</param>
      <param name="month">The month in which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> property.</param>
      <param name="day">The day of the month on which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.Day" /> property.</param>
      <returns>Data about the time change.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="timeOfDay" /> parameter has a non-default date component.  
 -or-  
 The <paramref name="timeOfDay" /> parameter's <see cref="P:System.DateTime.Kind" /> property is not <see cref="F:System.DateTimeKind.Unspecified" />.  
 -or-  
 The <paramref name="timeOfDay" /> parameter does not represent a whole number of milliseconds.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="month" /> parameter is less than 1 or greater than 12.  
 -or-  
 The <paramref name="day" /> parameter is less than 1 or greater than 31.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule(System.DateTime,System.Int32,System.Int32,System.DayOfWeek)">
      <summary>Defines a time change that uses a floating-date rule (that is, a time change that occurs on a specific day of a specific week of a specific month).</summary>
      <param name="timeOfDay">The time at which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> property.</param>
      <param name="month">The month in which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> property.</param>
      <param name="week">The week of the month in which the time change occurs. Its value can range from 1 to 5, with 5 representing the last week of the month. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.Week" /> property.</param>
      <param name="dayOfWeek">The day of the week on which the time change occurs. This parameter corresponds to the <see cref="P:System.TimeZoneInfo.TransitionTime.DayOfWeek" /> property.</param>
      <returns>Data about the time change.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="timeOfDay" /> parameter has a non-default date component.  
 -or-  
 The <paramref name="timeOfDay" /> parameter does not represent a whole number of milliseconds.  
 -or-  
 The <paramref name="timeOfDay" /> parameter's <see cref="P:System.DateTime.Kind" /> property is not <see cref="F:System.DateTimeKind.Unspecified" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.  
-or-  
<paramref name="week" /> is less than 1 or greater than 5.  
-or-  
The <paramref name="dayOfWeek" /> parameter is not a member of the <see cref="T:System.DayOfWeek" /> enumeration.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Day">
      <summary>Gets the day on which the time change occurs.</summary>
      <returns>The day on which the time change occurs.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.DayOfWeek">
      <summary>Gets the day of the week on which the time change occurs.</summary>
      <returns>The day of the week on which the time change occurs.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.Object)">
      <summary>Determines whether an object has identical values to the current <see cref="T:System.TimeZoneInfo.TransitionTime" /> object.</summary>
      <param name="obj">An object to compare with the current <see cref="T:System.TimeZoneInfo.TransitionTime" /> object.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.TimeZoneInfo.TransitionTime)">
      <summary>Determines whether the current <see cref="T:System.TimeZoneInfo.TransitionTime" /> object has identical values to a second <see cref="T:System.TimeZoneInfo.TransitionTime" /> object.</summary>
      <param name="other">An object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if the two objects have identical property values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.GetHashCode">
      <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
      <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo.TransitionTime" /> object.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.IsFixedDateRule">
      <summary>Gets a value indicating whether the time change occurs at a fixed date and time (such as November 1) or a floating date and time (such as the last Sunday of October).</summary>
      <returns>
        <see langword="true" /> if the time change rule is fixed-date; <see langword="false" /> if the time change rule is floating-date.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Month">
      <summary>Gets the month in which the time change occurs.</summary>
      <returns>The month in which the time change occurs.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Equality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>Determines whether two specified <see cref="T:System.TimeZoneInfo.TransitionTime" /> objects are equal.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> and <paramref name="t2" /> have identical values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Inequality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>Determines whether two specified <see cref="T:System.TimeZoneInfo.TransitionTime" /> objects are not equal.</summary>
      <param name="t1">The first object to compare.</param>
      <param name="t2">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="t1" /> and <paramref name="t2" /> have any different member values; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the deserialization of an object has been completed.</summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data that is required to serialize this object.</summary>
      <param name="info">The object to populate with data.</param>
      <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.TimeOfDay">
      <summary>Gets the hour, minute, and second at which the time change occurs.</summary>
      <returns>The time of day at which the time change occurs.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Week">
      <summary>Gets the week of the month in which a time change occurs.</summary>
      <returns>The week of the month in which the time change occurs.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
      <returns>An object that represents the Coordinated Universal Time (UTC) zone.</returns>
    </member>
    <member name="T:System.TimeZoneNotFoundException">
      <summary>The exception that is thrown when a time zone cannot be found.</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeZoneNotFoundException" /> class with a system-supplied message.</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeZoneNotFoundException" /> class from serialized data.</summary>
      <param name="info">The object that contains the serialized data.</param>
      <param name="context">The stream that contains the serialized data.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.  
 -or-  
 The <paramref name="context" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeZoneNotFoundException" /> class with the specified message string.</summary>
      <param name="message">A string that describes the exception.</param>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeZoneNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A string that describes the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:System.Tuple">
      <summary>Provides static methods for creating tuple objects.</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>Creates a new 1-tuple, or singleton.</summary>
      <param name="item1">The value of the only component of the tuple.</param>
      <typeparam name="T1">The type of the only component of the tuple.</typeparam>
      <returns>A tuple whose value is (<paramref name="item1" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>Creates a new 2-tuple, or pair.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <returns>A 2-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>Creates a new 3-tuple, or triple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <returns>A 3-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>Creates a new 4-tuple, or quadruple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <returns>A 4-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>Creates a new 5-tuple, or quintuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <returns>A 5-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>Creates a new 6-tuple, or sextuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <returns>A 6-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Creates a new 7-tuple, or septuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <returns>A 7-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />).</returns>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Creates a new 8-tuple, or octuple.</summary>
      <param name="item1">The value of the first component of the tuple.</param>
      <param name="item2">The value of the second component of the tuple.</param>
      <param name="item3">The value of the third component of the tuple.</param>
      <param name="item4">The value of the fourth component of the tuple.</param>
      <param name="item5">The value of the fifth component of the tuple.</param>
      <param name="item6">The value of the sixth component of the tuple.</param>
      <param name="item7">The value of the seventh component of the tuple.</param>
      <param name="item8">The value of the eighth component of the tuple.</param>
      <typeparam name="T1">The type of the first component of the tuple.</typeparam>
      <typeparam name="T2">The type of the second component of the tuple.</typeparam>
      <typeparam name="T3">The type of the third component of the tuple.</typeparam>
      <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
      <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
      <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
      <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
      <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
      <returns>An 8-tuple (octuple) whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />).</returns>
    </member>
    <member name="T:System.Tuple`1">
      <summary>Represents a 1-tuple, or singleton.</summary>
      <typeparam name="T1">The type of the tuple's only component.</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`1" /> class.</summary>
      <param name="item1">The value of the tuple's only component.</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`1" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>Gets the value of the <see cref="T:System.Tuple`1" /> object's single component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`1" /> object's single component.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`1" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`1" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`1" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`1" /> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`1" /> object.</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the <see langword="Tuple" /> element. <paramref name="index" /> must be 0.</param>
      <returns>The value of the <see langword="Tuple" /> element.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 0.</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>1, the number of elements in a <see cref="T:System.Tuple`1" /> object.</returns>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`1" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`1" /> object.</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>Represents a 2-tuple, or pair.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`2" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`2" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`2" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`2" /> object's second component.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`2" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`2" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`2" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`2" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`2" /> object.</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 1.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 1.</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>2, the number of elements in a <see cref="T:System.Tuple`2" /> object.</returns>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`2" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`2" /> object.</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>Represents a 3-tuple, or triple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`3" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`3" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`3" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`3" /> object's third component.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`3" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`3" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`3" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`3" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`3" /> object.</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 2.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 2.</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>3, the number of elements in a <see cref="T:System.Tuple`3" /> object.</returns>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`3" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`3" /> object.</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>Represents a 4-tuple, or quadruple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`4" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`4" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`4" /> object's fourth component.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`4" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`4" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`4" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`4" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`4" /> object.</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 3.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 3.</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>4, the number of elements in a <see cref="T:System.Tuple`4" /> object.</returns>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`4" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`4" /> object.</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>Represents a 5-tuple, or quintuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`5" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`5" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`5" /> object's fifth component.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`5" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`5" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`5" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`5" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`5" /> object.</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 4.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 4.</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>5, the number of elements in a <see cref="T:System.Tuple`5" /> object.</returns>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`5" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`5" /> object.</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>Represents a 6-tuple, or sextuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`6" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`6" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's fifth  component.</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`6" /> object's sixth component.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`6" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`6" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`6" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`6" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`6" /> object.</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 5.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 5.</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>6, the number of elements in a <see cref="T:System.Tuple`6" /> object.</returns>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`6" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`6" /> object.</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>Represents a 7-tuple, or septuple.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`7" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Tuple`7" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`7" /> object's seventh component.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`7" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`7" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`7" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`7" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`7" /> object.</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 to 6.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 6.</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>7, the number of elements in a <see cref="T:System.Tuple`7" /> object.</returns>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`7" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`7" /> object.</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>Represents an n-tuple, where n is 8 or greater.</summary>
      <typeparam name="T1">The type of the tuple's first component.</typeparam>
      <typeparam name="T2">The type of the tuple's second component.</typeparam>
      <typeparam name="T3">The type of the tuple's third component.</typeparam>
      <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
      <typeparam name="TRest">Any generic <see langword="Tuple" /> object that defines the types of the tuple's remaining components.</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>Initializes a new instance of the <see cref="T:System.Tuple`8" /> class.</summary>
      <param name="item1">The value of the tuple's first component.</param>
      <param name="item2">The value of the tuple's second component.</param>
      <param name="item3">The value of the tuple's third component.</param>
      <param name="item4">The value of the tuple's fourth component</param>
      <param name="item5">The value of the tuple's fifth component.</param>
      <param name="item6">The value of the tuple's sixth component.</param>
      <param name="item7">The value of the tuple's seventh component.</param>
      <param name="rest">Any generic <see langword="Tuple" /> object that contains the values of the tuple's remaining components.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> is not a generic <see langword="Tuple" /> object.</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's first component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's first component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's second component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's second component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's third component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's third component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>Gets the value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>Gets the current <see cref="T:System.Tuple`8" /> object's remaining components.</summary>
      <returns>The value of the current <see cref="T:System.Tuple`8" /> object's remaining components.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`8" /> object.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Tuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="obj" />.  

  Zero  

  This instance and <paramref name="obj" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Tuple`8" /> object.</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="Tuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="Tuple" /> element. <paramref name="index" /> can range from 0 for <see langword="Item1" /> to one less than the number of elements in the <see langword="Tuple" />.</param>
      <returns>The value of the <see langword="Tuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0.  
-or-  
<paramref name="index" /> is greater than or equal to <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="Tuple" />.</summary>
      <returns>The number of elements in the <see langword="Tuple" />.</returns>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`8" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.Tuple`8" /> object.</returns>
    </member>
    <member name="T:System.TupleExtensions">
      <summary>Provides extension methods for tuples to interoperate with language support for tuples in C#.</summary>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)">
      <summary>Deconstructs a tuple with 1 element into a separate variable.</summary>
      <param name="value">The 1-element tuple to deconstruct into a separate variable.</param>
      <param name="item1">The value of the single element.</param>
      <typeparam name="T1">The type of the single element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
      <summary>Deconstructs a tuple with 10 elements into separate variables.</summary>
      <param name="value">The 10-element tuple to deconstruct into 10 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
      <summary>Deconstructs a tuple with 11 elements into separate variables.</summary>
      <param name="value">The 11-element tuple to deconstruct into 11 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
      <summary>Deconstructs a tuple with 12 elements into separate variables.</summary>
      <param name="value">The 12-element tuple to deconstruct into 12 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
      <summary>Deconstructs a tuple with 13 elements into separate variables.</summary>
      <param name="value">The 13-element tuple to deconstruct into 13 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
      <summary>Deconstructs a tuple with 14 elements into separate variables.</summary>
      <param name="value">The 14-element tuple to deconstruct into 14 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
      <summary>Deconstructs a tuple with 15 elements into separate variables.</summary>
      <param name="value">The 15-element tuple to deconstruct into 15 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
      <summary>Deconstructs a tuple with 16 elements into separate variables.</summary>
      <param name="value">The 16-element tuple to deconstruct into 16 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
      <summary>Deconstructs a tuple with 17 elements into separate variables.</summary>
      <param name="value">The 17-element tuple to deconstruct into 17 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <param name="item17">The value of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
      <typeparam name="T17">The type of the seventeenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
      <summary>Deconstructs a tuple with 18 elements into separate variables.</summary>
      <param name="value">The 18-element tuple to deconstruct into 18 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <param name="item17">The value of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</param>
      <param name="item18">The value of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
      <typeparam name="T17">The type of the seventeenth element.</typeparam>
      <typeparam name="T18">The type of the eighteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
      <summary>Deconstructs a tuple with 19 elements into separate variables.</summary>
      <param name="value">The 19-element tuple to deconstruct into 19 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <param name="item17">The value of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</param>
      <param name="item18">The value of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</param>
      <param name="item19">The value of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
      <typeparam name="T17">The type of the seventeenth element.</typeparam>
      <typeparam name="T18">The type of the eighteenth element.</typeparam>
      <typeparam name="T19">The type of the nineteenth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)">
      <summary>Deconstructs a tuple with 2 elements into separate variables.</summary>
      <param name="value">The 2-element tuple to deconstruct into 2 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
      <summary>Deconstructs a tuple with 20 elements into separate variables.</summary>
      <param name="value">The 20-element tuple to deconstruct into 20 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <param name="item17">The value of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</param>
      <param name="item18">The value of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</param>
      <param name="item19">The value of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</param>
      <param name="item20">The value of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
      <typeparam name="T17">The type of the seventeenth element.</typeparam>
      <typeparam name="T18">The type of the eighteenth element.</typeparam>
      <typeparam name="T19">The type of the nineteenth element.</typeparam>
      <typeparam name="T20">The type of the twentieth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
      <summary>Deconstructs a tuple with 21 elements into separate variables.</summary>
      <param name="value">The 21-element tuple to deconstruct into 21 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <param name="item10">The value of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</param>
      <param name="item11">The value of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</param>
      <param name="item12">The value of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</param>
      <param name="item13">The value of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</param>
      <param name="item14">The value of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</param>
      <param name="item15">The value of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</param>
      <param name="item16">The value of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</param>
      <param name="item17">The value of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</param>
      <param name="item18">The value of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</param>
      <param name="item19">The value of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</param>
      <param name="item20">The value of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</param>
      <param name="item21">The value of the twenty-first element, or <paramref name="value" /><see langword=".Rest.Rest.Item7" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
      <typeparam name="T10">The type of the tenth element.</typeparam>
      <typeparam name="T11">The type of the eleventh element.</typeparam>
      <typeparam name="T12">The type of the twelfth element.</typeparam>
      <typeparam name="T13">The type of the thirteenth element.</typeparam>
      <typeparam name="T14">The type of the fourteenth element.</typeparam>
      <typeparam name="T15">The type of the fifteenth element.</typeparam>
      <typeparam name="T16">The type of the sixteenth element.</typeparam>
      <typeparam name="T17">The type of the seventeenth element.</typeparam>
      <typeparam name="T18">The type of the eighteenth element.</typeparam>
      <typeparam name="T19">The type of the nineteenth element.</typeparam>
      <typeparam name="T20">The type of the twentieth element.</typeparam>
      <typeparam name="T21">The type of the twenty-first element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)">
      <summary>Deconstructs a tuple with 3 elements into separate variables.</summary>
      <param name="value">The 3-element tuple to deconstruct into 3 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
      <summary>Deconstructs a tuple with 4 elements into separate variables.</summary>
      <param name="value">The 4-element tuple to deconstruct into 4 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)">
      <summary>Deconstructs a tuple with 5 elements into separate variables.</summary>
      <param name="value">The 5-element tuple to deconstruct into 5 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)">
      <summary>Deconstructs a tuple with 6 elements into separate variables.</summary>
      <param name="value">The 6-element tuple to deconstruct into 6 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
      <summary>Deconstructs a tuple with 7 elements into separate variables.</summary>
      <param name="value">The 7-element tuple to deconstruct into 7 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
      <summary>Deconstructs a tuple with 8 elements into separate variables.</summary>
      <param name="value">The 8-element tuple to deconstruct into 8 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
      <summary>Deconstructs a tuple with 9 elements into separate variables.</summary>
      <param name="value">The 9-element tuple to deconstruct into 9 separate variables.</param>
      <param name="item1">The value of the first element.</param>
      <param name="item2">The value of the second element.</param>
      <param name="item3">The value of the third element.</param>
      <param name="item4">The value of the fourth element.</param>
      <param name="item5">The value of the fifth element.</param>
      <param name="item6">The value of the sixth element.</param>
      <param name="item7">The value of the seventh element.</param>
      <param name="item8">The value of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</param>
      <param name="item9">The value of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element.</typeparam>
      <typeparam name="T9">The type of the ninth element.</typeparam>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <typeparam name="T20">The type of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <typeparam name="T20">The type of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</typeparam>
      <typeparam name="T21">The type of the twenty-first element, or <paramref name="value" /><see langword=".Rest.Rest.Item7" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
      <summary>Converts an instance of the <see langword="ValueTuple" /> structure to an instance of the  <see langword="Tuple" /> class.</summary>
      <param name="value">The value tuple instance to convert to a tuple.</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <returns>The converted tuple.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <typeparam name="T20">The type of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <typeparam name="T10">The type of the tenth element, or <paramref name="value" /><see langword=".Rest.Item3" />.</typeparam>
      <typeparam name="T11">The type of the eleventh element, or <paramref name="value" /><see langword=".Rest.Item4" />.</typeparam>
      <typeparam name="T12">The type of the twelfth element, or <paramref name="value" /><see langword=".Rest.Item5" />.</typeparam>
      <typeparam name="T13">The type of the thirteenth element, or <paramref name="value" /><see langword=".Rest.Item6" />.</typeparam>
      <typeparam name="T14">The type of the fourteenth element, or <paramref name="value" /><see langword=".Rest.Item7" />.</typeparam>
      <typeparam name="T15">The type of the fifteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item1" />.</typeparam>
      <typeparam name="T16">The type of the sixteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item2" />.</typeparam>
      <typeparam name="T17">The type of the seventeenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item3" />.</typeparam>
      <typeparam name="T18">The type of the eighteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item4" />.</typeparam>
      <typeparam name="T19">The type of the nineteenth element, or <paramref name="value" /><see langword=".Rest.Rest.Item5" />.</typeparam>
      <typeparam name="T20">The type of the twentieth element, or <paramref name="value" /><see langword=".Rest.Rest.Item6" />.</typeparam>
      <typeparam name="T21">The type of the twenty-first element, or <paramref name="value" /><see langword=".Rest.Rest.Item7" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
      <summary>Converts an instance of the <see langword="Tuple" /> class to an instance of the  <see langword="ValueTuple" /> structure.</summary>
      <param name="value">The tuple object to convert to a value tuple</param>
      <typeparam name="T1">The type of the first element.</typeparam>
      <typeparam name="T2">The type of the second element.</typeparam>
      <typeparam name="T3">The type of the third element.</typeparam>
      <typeparam name="T4">The type of the fourth element.</typeparam>
      <typeparam name="T5">The type of the fifth element.</typeparam>
      <typeparam name="T6">The type of the sixth element.</typeparam>
      <typeparam name="T7">The type of the seventh element.</typeparam>
      <typeparam name="T8">The type of the eighth element, or <paramref name="value" /><see langword=".Rest.Item1" />.</typeparam>
      <typeparam name="T9">The type of the ninth element, or <paramref name="value" /><see langword=".Rest.Item2" />.</typeparam>
      <returns>The converted value tuple instance.</returns>
    </member>
    <member name="T:System.Type">
      <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Type" /> class.</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</summary>
      <returns>The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>Gets the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</summary>
      <returns>The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</summary>
      <returns>If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>Gets the type that declares the current nested type or generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
      <returns>A reference to the default binder used by the system.</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>Separates names in the namespace of the <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</summary>
      <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. For the comparison to succeed, <paramref name="o" /> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</param>
      <returns>
        <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if: .  

<paramref name="o" /> is <see langword="null" />.  

<paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</summary>
      <param name="o">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>Represents the member filter used on attributes. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>Represents the case-sensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>Represents the case-insensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <param name="filter">The delegate that compares the interfaces against <paramref name="filterCriteria" />.</param>
      <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
      <returns>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception.</exception>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</summary>
      <param name="memberType">A bitwise combination of the enumeration values that indicates the type of member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="filter">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</param>
      <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.  
 The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</param>
      <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.  
 -or-  
 An empty array if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>Gets the fully qualified name of the type, including its namespace but not its assembly.</summary>
      <returns>The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</summary>
      <returns>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter. That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</exception>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>Gets an array of the generic type arguments for this type.</summary>
      <returns>An array of the generic type arguments for this type.</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>Gets the number of dimensions in an array.</summary>
      <returns>An integer that contains the number of dimensions in the current type.</returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</exception>
      <exception cref="T:System.ArgumentException">The current type is not an array.</exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitwise combination of enumeration values that indicate the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.  
 -or-  
 <see cref="F:System.Type.EmptyTypes" />.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.  
 -or-  
 An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</param>
      <returns>An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
-or-  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetEnumName(System.Object)">
      <summary>Returns the name of the constant that has the specified value, for the current enumeration type.</summary>
      <param name="value">The value whose name is to be retrieved.</param>
      <returns>The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</returns>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.  
 -or-  
 <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetEnumNames">
      <summary>Returns the names of the members of the current enumeration type.</summary>
      <returns>An array that contains the names of the members of the enumeration.</returns>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
    </member>
    <member name="M:System.Type.GetEnumUnderlyingType">
      <summary>Returns the underlying type of the current enumeration type.</summary>
      <returns>The underlying type of the current enumeration.</returns>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.  
 -or-  
 The enumeration type is not valid, because it contains more than one instance field.</exception>
    </member>
    <member name="M:System.Type.GetEnumValues">
      <summary>Returns an array of the values of the constants in the current enumeration type.</summary>
      <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</summary>
      <param name="name">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <returns>The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.
-or-
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>Searches for the public field with the specified name.</summary>
      <param name="name">The string containing the name of the data field to get.</param>
      <returns>An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified field, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the data field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>Returns all the public fields of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.
-or-
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>Searches for the interface with the specified name.</summary>
      <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</exception>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
      <param name="name">The string containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).  
-or-  
<see langword="false" /> to perform a case-sensitive search for all parts of <paramref name="name" />.</param>
      <returns>An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <param name="interfaceType">The interface type to retrieve a mapping for.</param>
      <returns>An object that represents the interface mapping for <paramref name="interfaceType" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="interfaceType" /> is not implemented by the current type.  
-or-  
The <paramref name="interfaceType" /> argument does not refer to an interface.  
-or-  
The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.
-or-
 <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception.</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>Searches for the public members with the specified name.</summary>
      <param name="name">The string containing the name of the public members to get.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the members to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the members to get.</param>
      <param name="type">The value to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A derived class must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>Returns all the public members of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
 -or-  
 An empty array if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>Searches for the public method with the specified name.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <returns>An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified method, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
 -or-  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
 -or-  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
 -or-  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
      <param name="name">The string containing the name of the public method to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
 -or-  
 An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <returns>An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <param name="name">The string containing the name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.  
 -or-  
 <see langword="null" />. If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>Returns all the public methods of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.
-or-
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>Searches for the public nested type with the specified name.</summary>
      <param name="name">The string containing the name of the nested type to get.</param>
      <returns>An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the nested type to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>Returns the public types nested in the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>Returns all the public properties of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.
-or-
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.</param>
      <returns>An array of objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.  
 -or-  
 An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>Searches for the public property with the specified name.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <returns>An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified property, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
<see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>Searches for the public property with the specified name and return type.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <returns>An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <param name="name">The string containing the name of the public property to get.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <returns>An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <param name="name">The string containing the name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.  
 -or-  
 <see cref="F:System.Reflection.BindingFlags.Default" /> to return <see langword="null" />.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</param>
      <param name="returnType">The return type of the property.</param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.  
 -or-  
 An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.  
-or-  
<paramref name="types" /> is <see langword="null" />.  
-or-  
One of the elements in <paramref name="types" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.  
-or-  
<paramref name="modifiers" /> is multidimensional.  
-or-  
<paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</exception>
      <exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>Gets the current <see cref="T:System.Type" />.</summary>
      <returns>The current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <returns>The type with the specified name, if found; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  


            

 The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
-or-  
<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".  
-or-  
<paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  


            

 The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</summary>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
-or-  
<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".  
-or-  
<paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})">
      <summary>Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the <paramref name="typeResolver" /> method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <returns>The type with the specified name, or <see langword="null" /> if the type is not found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
 -or-  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.  
 -or-  
 <paramref name="typeName" /> contains an invalid assembly name.  
 -or-  
 <paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)">
      <summary>Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
-or-  
<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
 -or-  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,*,]").  
 -or-  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.  
-or-  
<paramref name="typeName" /> contains an invalid assembly name.  
-or-  
<paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)">
      <summary>Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</summary>
      <param name="typeName">The name of the type to get. If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving. If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="assemblyResolver">A method that locates and returns the assembly that is specified in <paramref name="typeName" />. The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object. If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called. If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.  
 Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with.</param>
      <param name="typeResolver">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <paramref name="ignoreCase" /> is passed to that parameter.  
 Caution   Do not pass methods from unknown or untrusted callers.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
-or-  
<paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
-or-  
<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</exception>
      <exception cref="T:System.ArgumentException">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  
 -or-  
 <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,*,]").  
 -or-  
 <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
 -or-  
 <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.  
 -or-  
 <paramref name="typeName" /> contains an invalid assembly name.  
 -or-  
 <paramref name="typeName" /> is a valid assembly name without a type name.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>Gets the types of the objects in the specified array.</summary>
      <param name="args">An array of objects whose types to determine.</param>
      <returns>An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is <see langword="null" />.  
-or-  
One or more of the elements in <paramref name="args" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and at least one throws an exception.</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>Gets the underlying type code of the specified <see cref="T:System.Type" />.</summary>
      <param name="type">The type whose underlying type code to get.</param>
      <returns>The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Type.GetTypeCodeImpl">
      <summary>Returns the underlying type code of this <see cref="T:System.Type" /> instance.</summary>
      <returns>The type code of the underlying type.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>Gets the type associated with the specified class identifier (CLSID).</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
-or-  
<see langword="false" /> to ignore any exception that occurs.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="clsid">The CLSID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
-or-  
<see langword="false" /> to ignore any exception that occurs.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>Gets the type referenced by the specified type handle.</summary>
      <param name="handle">The object that refers to the type.</param>
      <returns>The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</summary>
      <param name="progID">The ProgID of the type to get.</param>
      <returns>The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="progID">The ProgID of the type to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
-or-  
<see langword="false" /> to ignore any exception that occurs.</param>
      <returns>The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The specified ProgID is not registered.</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</summary>
      <param name="progID">The progID of the type to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="prodID" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type. If the server name is <see langword="null" />, this method automatically reverts to the local machine.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw any exception that occurs.  
-or-  
<see langword="false" /> to ignore any exception that occurs.</param>
      <returns>The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">The specified progID is not registered.</exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</summary>
      <param name="o">The object for which to get the type handle.</param>
      <returns>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>Gets the GUID associated with the <see cref="T:System.Type" />.</summary>
      <returns>The GUID associated with the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
 -or-  
 An empty string ("") to invoke the default member.  
 -or-  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <returns>An object representing the return value of the invoked member.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
-or-  
<paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
-or-  
This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
-or-  
One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
 -or-  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this method.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
 -or-  
 An empty string ("") to invoke the default member.  
 -or-  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <returns>An object representing the return value of the invoked member.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
-or-  
<paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
-or-  
This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
-or-  
One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
 -or-  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
      <param name="name">The string containing the name of the constructor, method, property, or field member to invoke.  
 -or-  
 An empty string ("") to invoke the default member.  
 -or-  
 For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</param>
      <param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  
 -or-  
 A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature.  
 The default binder processes this parameter only when calling a COM component.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  
 -or-  
 A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <returns>An object representing the return value of the invoked member.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.  
-or-  
<paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.  
-or-  
<paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.  
-or-  
<paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.  
-or-  
<paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.  
-or-  
The named parameter array is larger than the argument array.  
-or-  
This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.  
-or-  
One of the named parameter arrays contains a string that is <see langword="null" />.</exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer.</exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args" />.  
 -or-  
 No member can be found that has the argument names supplied in <paramref name="namedParameters" />.  
 -or-  
 The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>Gets a value that indicates whether the type is an array.</summary>
      <returns>
        <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of a specified type can be assigned to a variable of the current type.</summary>
      <param name="c">The type to compare with the current type.</param>
      <returns>
        <see langword="true" /> if any of the following conditions is true:  

<paramref name="c" /> and the current instance represent the same type.  

<paramref name="c" /> is derived either directly or indirectly from the current instance. <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.  

The current instance is an interface that <paramref name="c" /> implements.  

<paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.  
 In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class. <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />. Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.  
using System;
using System.IO;

public class Example
{
   public static void Main()
   {
      Type t = typeof(Stream);
      Type genericT = typeof(GenericWithConstraint&lt;&gt;);
      Type genericParam = genericT.GetGenericArguments()[0];
      Console.WriteLine(t.IsAssignableFrom(genericParam));  
      // Displays True.
   }
}

public class GenericWithConstraint&lt;T&gt; where T : Stream
{}
Imports System.IO

Module Example
   Public Sub Main()
      Dim t As Type = GetType(Stream)
      Dim genericT As Type = GetType(GenericWithConstraint(Of ))
      Dim genericParam As Type = genericT.GetGenericArguments()(0)
      Console.WriteLine(t.IsAssignableFrom(genericParam))  
      ' Displays True.
   End Sub
End Module

Public Class GenericWithConstraint(Of T As Stream)
End Class

<paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).  


 <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</returns>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsByRefLike" />
    <member name="P:System.Type.IsClass">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type.</summary>
      <returns>
        <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsEnumDefined(System.Object)">
      <summary>Returns a value that indicates whether the specified value exists in the current enumeration type.</summary>
      <param name="value">The value to be tested.</param>
      <returns>
        <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The current type is not an enumeration.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</exception>
    </member>
    <member name="M:System.Type.IsEquivalentTo(System.Type)">
      <summary>Determines whether two COM types have the same identity and are eligible for type equivalence.</summary>
      <param name="other">The COM type that is tested for equivalence with the current type.</param>
      <returns>
        <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</returns>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericMethodParameter" />
    <member name="P:System.Type.IsGenericParameter">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type.</summary>
      <returns>
        <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeParameter" />
    <member name="P:System.Type.IsImport">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary>
      <param name="o">The object to compare with the current type.</param>
      <returns>
        <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements. <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</returns>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</summary>
      <returns>
        <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>Gets a value indicating whether a class is nested and declared public.</summary>
      <returns>
        <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</returns>
    </member>
    <member name="P:System.Type.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</summary>
      <returns>
        <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Type.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
      <returns>
        <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsSignatureType" />
    <member name="P:System.Type.IsSpecialName">
      <summary>Gets a value indicating whether the type has a name that requires special handling.</summary>
      <returns>
        <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</summary>
      <param name="c">The type to compare with the current type.</param>
      <returns>
        <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Type.IsSZArray" />
    <member name="P:System.Type.IsTypeDefinition" />
    <member name="P:System.Type.IsUnicodeClass">
      <summary>Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</summary>
      <returns>
        <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.IsVariableBoundArray" />
    <member name="P:System.Type.IsVisible">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</summary>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
 -or-  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</summary>
      <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
      <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid. For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
 -or-  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.  
 -or-  
 <paramref name="rank" /> is greater than 32.</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
 -or-  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
    </member>
    <member name="M:System.Type.MakeGenericMethodParameter(System.Int32)">
      <param name="position" />
    </member>
    <member name="M:System.Type.MakeGenericSignatureType(System.Type,System.Type[])">
      <summary>Creates a generic signature type, which allows third party reimplementations of Reflection to fully support the use of signature types in querying type members.</summary>
      <param name="genericTypeDefinition">The generic type definition.</param>
      <param name="typeArguments">An array of type arguments.</param>
      <returns>A generic signature type.</returns>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</summary>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
      <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is <see langword="null" />.  
-or-  
Any element of <paramref name="typeArguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.  
 -or-  
 Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.  
 -or-  
 <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.  
 -or-  
 The current type is a <see langword="ByRef" /> type. That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</summary>
      <returns>The module in which the current <see cref="T:System.Type" /> is defined.</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>Gets the namespace of the <see cref="T:System.Type" />.</summary>
      <returns>The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</returns>
    </member>
    <member name="M:System.Type.op_Equality(System.Type,System.Type)">
      <summary>Indicates whether two <see cref="T:System.Type" /> objects are equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Type.op_Inequality(System.Type,System.Type)">
      <summary>Indicates whether two <see cref="T:System.Type" /> objects are not equal.</summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>Gets the class object that was used to obtain this member.</summary>
      <returns>The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</returns>
    </member>
    <member name="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.</summary>
      <param name="typeName">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwIfNotFound">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found. Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">
        <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />; <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</param>
      <returns>The type with the specified name, if found; otherwise, <see langword="null" />. If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />. See the Exceptions section.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.  
-or-  
<paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  
-or-  
<paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.  
-or-  
<paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.  
-or-  
<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> does not include the assembly name.  
-or-  
<paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,*,]".  
-or-  
<paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.  
-or-  
<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid.  
 -or-  
 The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: This member is not supported.</exception>
    </member>
    <member name="P:System.Type.StructLayoutAttribute">
      <summary>Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</summary>
      <returns>Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Type.ToString">
      <summary>Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>Gets the handle for the current <see cref="T:System.Type" />.</summary>
      <returns>The handle for the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>Gets the initializer for the type.</summary>
      <returns>An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>Indicates the type provided by the common language runtime that represents this type.</summary>
      <returns>The underlying system type for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>The exception that is thrown when a method attempts to use a type that it does not have access to.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>Specifies the type of an object.</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>A simple type representing Boolean values of <see langword="true" /> or <see langword="false" />.</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255.</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" /> type corresponds to the Unicode character set.</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>A type representing a date and time value.</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>A database null (column) value.</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>A null reference.</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>A general type representing any reference or value type not explicitly represented by another <see langword="TypeCode" />.</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>An integral type representing signed 8-bit integers with values between -128 and 127.</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>A sealed class type representing Unicode character strings.</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535.</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>Checks if this object is equal to the specified object.</summary>
      <param name="o">The object with which to compare the current object.</param>
      <returns>
        <see langword="true" /> if this object is equal to the specified object; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented.</exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>Returns the hash code of this object.</summary>
      <returns>The hash code of this object.</returns>
    </member>
    <member name="M:System.TypedReference.GetTargetType(System.TypedReference)">
      <summary>Returns the type of the target of the specified <see langword="TypedReference" />.</summary>
      <param name="value">The value whose target's type is to be returned.</param>
      <returns>The type of the target of the specified <see langword="TypedReference" />.</returns>
    </member>
    <member name="M:System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])">
      <summary>Makes a <see langword="TypedReference" /> for a field identified by a specified object and list of field descriptions.</summary>
      <param name="target">An object that contains the field described by the first element of <paramref name="flds" />.</param>
      <param name="flds">A list of field descriptions where each element describes a field that contains the field described by the succeeding element. Each described field must be a value type. The field descriptions must be <see langword="RuntimeFieldInfo" /> objects supplied by the type system.</param>
      <returns>A <see cref="T:System.TypedReference" /> for the field described by the last element of <paramref name="flds" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="flds" /> is <see langword="null" />.  
-or-  
An element of <paramref name="flds" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="flds" /> array has no elements.  
 -or-  
 An element of <paramref name="flds" /> is not a <see langword="RuntimeFieldInfo" /> object.  
 -or-  
 The <see cref="P:System.Reflection.FieldInfo.IsInitOnly" /> or <see cref="P:System.Reflection.FieldInfo.IsStatic" /> property of an element of <paramref name="flds" /> is <see langword="true" />.</exception>
      <exception cref="T:System.MissingMemberException">Parameter <paramref name="target" /> does not contain the field described by the first element of <paramref name="flds" />, or an element of <paramref name="flds" /> describes a field that is not contained in the field described by the succeeding element of <paramref name="flds" />.  
 -or-  
 The field described by an element of <paramref name="flds" /> is not a value type.</exception>
    </member>
    <member name="M:System.TypedReference.SetTypedReference(System.TypedReference,System.Object)">
      <summary>Converts the specified value to a <see langword="TypedReference" />. This method is not supported.</summary>
      <param name="target">The target of the conversion.</param>
      <param name="value">The value to be converted.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.TypedReference.TargetTypeToken(System.TypedReference)">
      <summary>Returns the internal metadata type handle for the specified <see langword="TypedReference" />.</summary>
      <param name="value">The <see langword="TypedReference" /> for which the type handle is requested.</param>
      <returns>The internal metadata type handle for the specified <see langword="TypedReference" />.</returns>
    </member>
    <member name="M:System.TypedReference.ToObject(System.TypedReference)">
      <summary>Converts the specified <see langword="TypedReference" /> to an <see langword="Object" />.</summary>
      <param name="value">The <see langword="TypedReference" /> to be converted.</param>
      <returns>An <see cref="T:System.Object" /> converted from a <see langword="TypedReference" />.</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>Gets the fully qualified name of the type that fails to initialize.</summary>
      <returns>The fully qualified name of the type that fails to initialize.</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>The exception that is thrown when type-loading failures occur.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the class name, method name, resource ID, and additional exception information.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> object is <see langword="null" />.</exception>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>Gets the error message for this exception.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>Gets the fully qualified name of the type that causes the exception.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:System.TypeUnloadedException">
      <summary>The exception that is thrown when there is an attempt to access an unloaded class.</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.UInt16">
      <summary>Represents a 16-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>Compares this instance to a specified 16-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.</summary>
      <param name="obj">A 16-bit unsigned integer to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <returns>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.  
 This method is not CLS-compliant. The CLS-compliant alternative is <see cref="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)" />.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of this instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value pf this instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The current value of this instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
    </member>
    <member name="M:System.UInt16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>Tries to convert the string representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format. , or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UInt32">
      <summary>Represents a 32-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>Compares this instance to a specified 32-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32" />.</summary>
      <param name="obj">A value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt32" />.</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string representing the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.  
-or-  
<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.UInt32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>Tries to convert the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UInt64">
      <summary>Represents a 64-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>Compares this instance to a specified 64-bit unsigned integer and returns an indication of their relative values.</summary>
      <param name="value">An unsigned integer to compare.</param>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  Return Value  

  Description  

  Less than zero  

  This instance is less than <paramref name="value" />.  

  Zero  

  This instance is equal to <paramref name="value" />.  

  Greater than zero  

  This instance is greater than <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt64" /> value.</summary>
      <param name="obj">A <see cref="T:System.UInt64" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt64" />.</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of the enumeration values that specifies the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.  
 -or-  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.  
 -or-  
 <paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>
        <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>This conversion is not supported. No value is returned.</returns>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <param name="type">The type to which to convert this <see cref="T:System.UInt64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <param name="provider">This parameter is ignored.</param>
      <returns>The value of the current instance, unchanged.</returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.UInt64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert. The string is interpreted by using the style specified by the <paramref name="style" /> parameter.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  
-or-  
<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>Tries to convert the string representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <param name="s">A string that represents the number to convert.</param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value that is equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified 64-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer.</param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />.</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>Adds an offset to the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new unsigned pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>Adds an offset to the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to add the offset to.</param>
      <param name="offset">The offset to add.</param>
      <returns>A new unsigned pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>Converts the value of a 32-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>Converts the value of a 64-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />.</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit unsigned integer.</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.  
 This API is not CLS-compliant.</summary>
      <param name="value">The pointer or handle to convert.</param>
      <returns>The contents of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.UIntPtr" />.  
 This API is not CLS-compliant.</summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</summary>
      <param name="value1">The first pointer or handle to compare.</param>
      <param name="value2">The second pointer or handle to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new unsigned pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>Subtracts an offset from the value of an unsigned pointer.</summary>
      <param name="pointer">The unsigned pointer to subtract the offset from.</param>
      <param name="offset">The offset to subtract.</param>
      <returns>A new unsigned pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</returns>
    </member>
    <member name="M:System.UIntPtr.System#IEquatable{System#UIntPtr}#Equals(System.UIntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.UIntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.UIntPtr" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>Converts the value of this instance to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer.</exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>Converts the value of this instance to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equal to the value of this instance.</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</summary>
      <param name="exception">The exception that is not handled.</param>
      <param name="isTerminating">
        <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>Gets the unhandled exception object.</summary>
      <returns>The unhandled exception object.</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>Indicates whether the common language runtime is terminating.</summary>
      <returns>
        <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>Represents the method that will handle the event raised by an exception that is not handled by the application domain.</summary>
      <param name="sender">The source of the unhandled exception event.</param>
      <param name="e">An <c>UnhandledExceptionEventArgs</c> that contains the event data.</param>
    </member>
    <member name="T:System.Uri">
      <summary>Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> classes.</summary>
      <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class containing the information required to serialize the new <see cref="T:System.Uri" /> instance.</param>
      <param name="streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class containing the source of the serialized stream associated with the new <see cref="T:System.Uri" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serializationInfo" /> parameter contains a <see langword="null" /> URI.</exception>
      <exception cref="T:System.UriFormatException">The <paramref name="serializationInfo" /> parameter contains a URI that is empty.  
 -or-  
 The scheme specified is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.  
 -or-  
 The URI contains too many slashes.  
 -or-  
 The password specified in the URI is not valid.  
 -or-  
 The host name specified in URI is not valid.  
 -or-  
 The file name specified in the URI is not valid.  
 -or-  
 The user name specified in the URI is not valid.  
 -or-  
 The host or authority name specified in the URI cannot be terminated by backslashes.  
 -or-  
 The port number specified in the URI is not valid or cannot be parsed.  
 -or-  
 The length of URI exceeds 65519 characters.  
 -or-  
 The length of the scheme specified in the URI exceeds 1023 characters.  
 -or-  
 There is an invalid character sequence in the URI.  
 -or-  
 The MS-DOS path specified in the URI must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI.</summary>
      <param name="uriString">A string that identifies the resource to be represented by the <see cref="T:System.Uri" /> instance. Note that an IPv6 address in string form must be enclosed within brackets. For example, "http://[2607:f8b0:400d:c06::69]".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
         
         <paramref name="uriString" /> is empty.  
-or-  
The scheme specified in <paramref name="uriString" /> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.  
-or-  
<paramref name="uriString" /> contains too many slashes.  
-or-  
The password specified in <paramref name="uriString" /> is not valid.  
-or-  
The host name specified in <paramref name="uriString" /> is not valid.  
-or-  
The file name specified in <paramref name="uriString" /> is not valid.  
-or-  
The user name specified in <paramref name="uriString" /> is not valid.  
-or-  
The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.  
-or-  
The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.  
-or-  
The length of <paramref name="uriString" /> exceeds 65519 characters.  
-or-  
The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.  
-or-  
There is an invalid character sequence in <paramref name="uriString" />.  
-or-  
The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI, with explicit control of character escaping.</summary>
      <param name="uriString">A string that identifies the resource to be represented by the <see cref="T:System.Uri" /> instance. Note that an IPv6 address in string form must be enclosed within brackets. For example, "http://[2607:f8b0:400d:c06::69]".</param>
      <param name="dontEscape">
        <see langword="true" /> if <paramref name="uriString" /> is completely escaped; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> is empty or contains only spaces.  
-or-  
The scheme specified in <paramref name="uriString" /> is not valid.  
-or-  
<paramref name="uriString" /> contains too many slashes.  
-or-  
The password specified in <paramref name="uriString" /> is not valid.  
-or-  
The host name specified in <paramref name="uriString" /> is not valid.  
-or-  
The file name specified in <paramref name="uriString" /> is not valid.  
-or-  
The user name specified in <paramref name="uriString" /> is not valid.  
-or-  
The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.  
-or-  
The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.  
-or-  
The length of <paramref name="uriString" /> exceeds 65519 characters.  
-or-  
The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.  
-or-  
There is an invalid character sequence in <paramref name="uriString" />.  
-or-  
The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class with the specified URI. This constructor allows you to specify if the URI string is a relative URI, absolute URI, or is indeterminate.</summary>
      <param name="uriString">A string that identifies the resource to be represented by the <see cref="T:System.Uri" /> instance. Note that an IPv6 address in string form must be enclosed within brackets. For example, "http://[2607:f8b0:400d:c06::69]".</param>
      <param name="uriKind">Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
         
         <paramref name="uriString" /> contains a relative URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Absolute" />.  
or  
<paramref name="uriString" /> contains an absolute URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Relative" />.  
or  
<paramref name="uriString" /> is empty.  
-or-  
The scheme specified in <paramref name="uriString" /> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.  
-or-  
<paramref name="uriString" /> contains too many slashes.  
-or-  
The password specified in <paramref name="uriString" /> is not valid.  
-or-  
The host name specified in <paramref name="uriString" /> is not valid.  
-or-  
The file name specified in <paramref name="uriString" /> is not valid.  
-or-  
The user name specified in <paramref name="uriString" /> is not valid.  
-or-  
The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.  
-or-  
The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.  
-or-  
The length of <paramref name="uriString" /> exceeds 65519 characters.  
-or-  
The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.  
-or-  
There is an invalid character sequence in <paramref name="uriString" />.  
-or-  
The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class based on the specified base URI and relative URI string.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The relative URI to add to the base URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
         
The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.  
-or-  
The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.  
-or-  
The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.  
-or-  
The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.  
-or-  
The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.  
-or-  
The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.  
-or-  
There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.  
-or-  
The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class based on the specified base and relative URIs, with explicit control of character escaping.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The relative URI to add to the base URI.</param>
      <param name="dontEscape">
        <see langword="true" /> if <paramref name="uriString" /> is completely escaped; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance.</exception>
      <exception cref="T:System.UriFormatException">The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.  
 -or-  
 The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
 -or-  
 The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.  
 -or-  
 The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
 -or-  
 The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
 -or-  
 The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
 -or-  
 The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
 -or-  
 The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.  
 -or-  
 The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.  
 -or-  
 The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.  
 -or-  
 The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.  
 -or-  
 There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.  
 -or-  
 The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Uri" /> class based on the combination of a specified base <see cref="T:System.Uri" /> instance and a relative <see cref="T:System.Uri" /> instance.</summary>
      <param name="baseUri">An absolute <see cref="T:System.Uri" /> that is the base for the new <see cref="T:System.Uri" /> instance.</param>
      <param name="relativeUri">A relative <see cref="T:System.Uri" /> instance that is combined with <paramref name="baseUri" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
         
         The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.  
-or-  
The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.  
-or-  
The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.  
-or-  
The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.  
-or-  
The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.  
-or-  
The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.  
-or-  
The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.  
-or-  
There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.  
-or-  
The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Gets the absolute path of the URI.</summary>
      <returns>A <see cref="T:System.String" /> containing the absolute path to the resource.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Gets the absolute URI.</summary>
      <returns>A <see cref="T:System.String" /> containing the entire URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Gets the Domain Name System (DNS) host name or IP address and the port number for a server.</summary>
      <returns>A <see cref="T:System.String" /> containing the authority component of the URI represented by this instance.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>Converts the internally stored URI to canonical form.</summary>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this method is valid only for absolute URIs.</exception>
      <exception cref="T:System.UriFormatException">The URI is incorrectly formed.</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Determines whether the specified host name is a valid DNS name.</summary>
      <param name="name">The host name to validate. This can be an IPv4 or IPv6 address or an Internet host name.</param>
      <returns>A <see cref="T:System.UriHostNameType" /> that indicates the type of the host name. If the type of the host name cannot be determined or if the host name is <see langword="null" /> or a zero-length string, this method returns <see cref="F:System.UriHostNameType.Unknown" />.</returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Determines whether the specified scheme name is valid.</summary>
      <param name="schemeName">The scheme name to validate.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the scheme name is valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>Calling this method has no effect.</summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Compares the specified parts of two URIs using the specified comparison rules.</summary>
      <param name="uri1">The first <see cref="T:System.Uri" />.</param>
      <param name="uri2">The second <see cref="T:System.Uri" />.</param>
      <param name="partsToCompare">A bitwise combination of the <see cref="T:System.UriComponents" /> values that specifies the parts of <paramref name="uri1" /> and <paramref name="uri2" /> to compare.</param>
      <param name="compareFormat">One of the <see cref="T:System.UriFormat" /> values that specifies the character escaping used when the URI components are compared.</param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values.</param>
      <returns>An <see cref="T:System.Int32" /> value that indicates the lexical relationship between the compared <see cref="T:System.Uri" /> components.  
  Value  

  Meaning  

  Less than zero  

 <paramref name="uri1" /> is less than <paramref name="uri2" />.  

  Zero  

 <paramref name="uri1" /> equals <paramref name="uri2" />.  

  Greater than zero  

 <paramref name="uri1" /> is greater than <paramref name="uri2" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Gets a host name that, after being unescaped if necessary, is safe to use for DNS resolution.</summary>
      <returns>A <see cref="T:System.String" /> that contains the host part of the URI in a format suitable for DNS resolution; or the original host string, if it is already suitable for resolution.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Uri" /> instances for equality.</summary>
      <param name="comparand">The <see cref="T:System.Uri" /> instance or a URI identifier to compare with the current instance.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the two instances represent the same URI; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>Converts any unsafe or reserved characters in the path component to their hexadecimal character representations.</summary>
      <exception cref="T:System.UriFormatException">The URI passed from the constructor is invalid. This exception can occur if a URI has too many characters or the URI is relative.</exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Converts a string to its escaped representation.</summary>
      <param name="stringToEscape">The string to escape.</param>
      <returns>A <see cref="T:System.String" /> that contains the escaped representation of <paramref name="stringToEscape" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> is <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
           

The length of <paramref name="stringToEscape" /> exceeds 32766 characters.</exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>Converts a string to its escaped representation.</summary>
      <param name="str">The string to transform to its escaped representation.</param>
      <returns>The escaped representation of the string.</returns>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Converts a URI string to its escaped representation.</summary>
      <param name="stringToEscape">The string to escape.</param>
      <returns>A <see cref="T:System.String" /> that contains the escaped representation of <paramref name="stringToEscape" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> is <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.
           

The length of <paramref name="stringToEscape" /> exceeds 32766 characters.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Gets the escaped URI fragment.</summary>
      <returns>A <see cref="T:System.String" /> that contains any URI fragment information.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>Gets the decimal value of a hexadecimal digit.</summary>
      <param name="digit">The hexadecimal digit (0-9, a-f, A-F) to convert.</param>
      <returns>An <see cref="T:System.Int32" /> value that contains a number from 0 to 15 that corresponds to the specified hexadecimal digit.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> is not a valid hexadecimal digit (0-9, a-f, A-F).</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Gets the specified components of the current instance using the specified escaping for special characters.</summary>
      <param name="components">A bitwise combination of the <see cref="T:System.UriComponents" /> values that specifies which parts of the current instance to return to the caller.</param>
      <param name="format">One of the <see cref="T:System.UriFormat" /> values that controls how special characters are escaped.</param>
      <returns>A <see cref="T:System.String" /> that contains the components.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> is not a combination of valid <see cref="T:System.UriComponents" /> values.</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Uri" /> is not an absolute URI. Relative URIs cannot be used with this method.</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Gets the hash code for the URI.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the hash value generated for this URI.</returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>Gets the specified portion of a <see cref="T:System.Uri" /> instance.</summary>
      <param name="part">One of the <see cref="T:System.UriPartial" /> values that specifies the end of the URI portion to return.</param>
      <returns>A <see cref="T:System.String" /> that contains the specified portion of the <see cref="T:System.Uri" /> instance.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Uri" /> instance is not an absolute instance.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="part" /> is not valid.</exception>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data needed to serialize the current instance.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Uri" />.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>Converts a specified character into its hexadecimal equivalent.</summary>
      <param name="character">The character to convert to hexadecimal representation.</param>
      <returns>The hexadecimal representation of the specified character.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="character" /> is greater than 255.</exception>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>Converts a specified hexadecimal representation of a character to the character.</summary>
      <param name="pattern">The hexadecimal representation of a character.</param>
      <param name="index">The location in <paramref name="pattern" /> where the hexadecimal representation of a character begins.</param>
      <returns>The character represented by the hexadecimal encoding at position <paramref name="index" />. If the character at <paramref name="index" /> is not hexadecimal encoded, the character at <paramref name="index" /> is returned. The value of <paramref name="index" /> is incremented to point to the character following the one returned.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of characters in <paramref name="pattern" />.</exception>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Gets the host component of this instance.</summary>
      <returns>A <see cref="T:System.String" /> that contains the host name. This is usually the DNS host name or IP address of the server.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Gets the type of the host name specified in the URI.</summary>
      <returns>A member of the <see cref="T:System.UriHostNameType" /> enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>The RFC 3490 compliant International Domain Name of the host, using Punycode as appropriate. This string, after being unescaped if necessary, is safe to use for DNS resolution.</summary>
      <returns>The hostname, formatted with Punycode according to the IDN standard.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Gets whether the <see cref="T:System.Uri" /> instance is absolute.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> instance is absolute; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>Gets whether a character is invalid in a file system name.</summary>
      <param name="character">The <see cref="T:System.Char" /> to test.</param>
      <returns>
        <see langword="true" /> if the specified character is invalid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Determines whether the current <see cref="T:System.Uri" /> instance is a base of the specified <see cref="T:System.Uri" /> instance.</summary>
      <param name="uri">The specified <see cref="T:System.Uri" /> instance to test.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Uri" /> instance is a base of <paramref name="uri" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Gets whether the port value of the URI is the default for this scheme.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the value in the <see cref="P:System.Uri.Port" /> property is the default port for this scheme; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>Gets whether the specified character should be escaped.</summary>
      <param name="character">The <see cref="T:System.Char" /> to test.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the specified character should be escaped; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Gets a value indicating whether the specified <see cref="T:System.Uri" /> is a file URI.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> is a file URI; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>Determines whether a specified character is a valid hexadecimal digit.</summary>
      <param name="character">The character to validate.</param>
      <returns>
        <see langword="true" /> if the character is a valid hexadecimal digit; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>Determines whether a character in a string is hexadecimal encoded.</summary>
      <param name="pattern">The string to check.</param>
      <param name="index">The location in <paramref name="pattern" /> to check for hexadecimal encoding.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if <paramref name="pattern" /> is hexadecimal encoded at the specified location; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Gets whether the specified <see cref="T:System.Uri" /> references the local host.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if this <see cref="T:System.Uri" /> references the local host; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>Gets whether the specified character is a reserved character.</summary>
      <param name="character">The <see cref="T:System.Char" /> to test.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the specified character is a reserved character otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Gets whether the specified <see cref="T:System.Uri" /> is a universal naming convention (UNC) path.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> is a UNC path; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Indicates whether the string used to construct this <see cref="T:System.Uri" /> was well-formed and is not required to be further escaped.</summary>
      <returns>
        <see langword="true" /> if the string was well-formed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Indicates whether the string is well-formed by attempting to construct a URI with the string and ensures that the string does not require further escaping.</summary>
      <param name="uriString">The string used to attempt to construct a <see cref="T:System.Uri" />.</param>
      <param name="uriKind">The type of the <see cref="T:System.Uri" /> in <paramref name="uriString" />.</param>
      <returns>
        <see langword="true" /> if the string was well-formed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Gets a local operating-system representation of a file name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local operating-system representation of a file name.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>Determines the difference between two <see cref="T:System.Uri" /> instances.</summary>
      <param name="toUri">The URI to compare to the current URI.</param>
      <returns>If the hostname and scheme of this URI instance and <paramref name="toUri" /> are the same, then this method returns a <see cref="T:System.String" /> that represents a relative URI that, when appended to the current URI instance, yields the <paramref name="toUri" /> parameter.  
 If the hostname or scheme is different, then this method returns a <see cref="T:System.String" /> that represents the <paramref name="toUri" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this method is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Determines the difference between two <see cref="T:System.Uri" /> instances.</summary>
      <param name="uri">The URI to compare to the current URI.</param>
      <returns>If the hostname and scheme of this URI instance and <paramref name="uri" /> are the same, then this method returns a relative <see cref="T:System.Uri" /> that, when appended to the current URI instance, yields <paramref name="uri" />.  
 If the hostname or scheme is different, then this method returns a <see cref="T:System.Uri" /> that represents the <paramref name="uri" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Determines whether two <see cref="T:System.Uri" /> instances have the same value.</summary>
      <param name="uri1">A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri2" />.</param>
      <param name="uri2">A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri1" />.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> instances are equivalent; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Determines whether two <see cref="T:System.Uri" /> instances do not have the same value.</summary>
      <param name="uri1">A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri2" />.</param>
      <param name="uri2">A <see cref="T:System.Uri" /> instance to compare with <paramref name="uri1" />.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the two <see cref="T:System.Uri" /> instances are not equal; otherwise, <see langword="false" />. If either parameter is <see langword="null" />, this method returns <see langword="true" />.</returns>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Gets the original URI string that was passed to the <see cref="T:System.Uri" /> constructor.</summary>
      <returns>A <see cref="T:System.String" /> containing the exact URI specified when this instance was constructed; otherwise, <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>Parses the URI of the current instance to ensure it contains all the parts required for a valid URI.</summary>
      <exception cref="T:System.UriFormatException">The Uri passed from the constructor is invalid.</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Gets the <see cref="P:System.Uri.AbsolutePath" /> and <see cref="P:System.Uri.Query" /> properties separated by a question mark (?).</summary>
      <returns>A <see cref="T:System.String" /> that contains the <see cref="P:System.Uri.AbsolutePath" /> and <see cref="P:System.Uri.Query" /> properties separated by a question mark (?).</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Gets the port number of this URI.</summary>
      <returns>An <see cref="T:System.Int32" /> value that contains the port number for this URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Gets any query information included in the specified URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains any query information included in the specified URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Gets the scheme name for this URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the scheme for this URI, converted to lowercase.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>Specifies the characters that separate the communication protocol scheme from the address portion of the URI. This field is read-only.</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Gets an array containing the path segments that make up the specified URI.</summary>
      <returns>A <see cref="T:System.String" /> array that contains the path segments that make up the specified URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data needed to serialize the current instance.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Uri" />.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Gets a canonical string representation for the specified <see cref="T:System.Uri" /> instance.</summary>
      <returns>A <see cref="T:System.String" /> instance that contains the unescaped canonical representation of the <see cref="T:System.Uri" /> instance. All characters are unescaped except #, ?, and %.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri" /> using the specified <see cref="T:System.String" /> instance and a <see cref="T:System.UriKind" />.</summary>
      <param name="uriString">The <see cref="T:System.String" /> representing the <see cref="T:System.Uri" />.</param>
      <param name="uriKind">The type of the Uri.</param>
      <param name="result">When this method returns, contains the constructed <see cref="T:System.Uri" />.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> was successfully created; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri" /> using the specified base and relative <see cref="T:System.String" /> instances.</summary>
      <param name="baseUri">The base <see cref="T:System.Uri" />.</param>
      <param name="relativeUri">The relative <see cref="T:System.Uri" />, represented as a <see cref="T:System.String" />, to add to the base <see cref="T:System.Uri" />.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Uri" /> constructed from <paramref name="baseUri" /> and <paramref name="relativeUri" />. This parameter is passed uninitialized.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> was successfully created; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Creates a new <see cref="T:System.Uri" /> using the specified base and relative <see cref="T:System.Uri" /> instances.</summary>
      <param name="baseUri">The base <see cref="T:System.Uri" />.</param>
      <param name="relativeUri">The relative <see cref="T:System.Uri" /> to add to the base <see cref="T:System.Uri" />.</param>
      <param name="result">When this method returns, contains a <see cref="T:System.Uri" /> constructed from <paramref name="baseUri" /> and <paramref name="relativeUri" />. This parameter is passed uninitialized.</param>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> was successfully created; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>Converts the specified string by replacing any escape sequences with their unescaped representation.</summary>
      <param name="path">The <see cref="T:System.String" /> to convert.</param>
      <returns>A <see cref="T:System.String" /> that contains the unescaped value of the <paramref name="path" /> parameter.</returns>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Converts a string to its unescaped representation.</summary>
      <param name="stringToUnescape">The string to unescape.</param>
      <returns>A <see cref="T:System.String" /> that contains the unescaped representation of <paramref name="stringToUnescape" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> is <see langword="null" />.</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>Specifies that the URI is a pointer to a file. This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>Specifies that the URI is accessed through the File Transfer Protocol (FTP). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Specifies that the URI is accessed through the Gopher protocol. This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>Specifies that the URI is an email address and is accessed through the Simple Mail Transport Protocol (SMTP). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>Specifies that the URI is accessed through the NetPipe scheme used by Windows Communication Foundation (WCF). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>Specifies that the URI is accessed through the NetTcp scheme used by Windows Communication Foundation (WCF). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP). This field is read-only.</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Indicates that the URI string was completely escaped before the <see cref="T:System.Uri" /> instance was created.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <paramref name="dontEscape" /> parameter was set to <see langword="true" /> when the <see cref="T:System.Uri" /> instance was created; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Gets the user name, password, or other user-specific information associated with the specified URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the user information associated with the URI. The returned value does not include the '@' character reserved for delimiting the user information part of the URI.</returns>
      <exception cref="T:System.InvalidOperationException">This instance represents a relative URI, and this property is valid only for absolute URIs.</exception>
    </member>
    <member name="T:System.UriComponents">
      <summary>Specifies the parts of a <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" />, and <see cref="P:System.Uri.Fragment" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>The <see cref="P:System.Uri.Fragment" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>The <see cref="P:System.Uri.Host" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>The <see cref="P:System.Uri.Host" /> and <see cref="P:System.Uri.Port" /> data. If no port data is in the Uri and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, and <see cref="P:System.Uri.Query" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Specifies that the delimiter should be included.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>The normalized form of the <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>The <see cref="P:System.Uri.LocalPath" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>The <see cref="P:System.Uri.LocalPath" /> and <see cref="P:System.Uri.Query" /> data. Also see <see cref="P:System.Uri.PathAndQuery" />.</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>The <see cref="P:System.Uri.Port" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>The <see cref="P:System.Uri.Query" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>The <see cref="P:System.Uri.Scheme" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>The <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, and <see cref="P:System.Uri.Port" /> data.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>The complete <see cref="T:System.Uri" /> context that is needed for Uri Serializers. The context includes the IPv6 scope.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>The <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, and <see cref="P:System.Uri.Port" /> data. If no port data is in the <see cref="T:System.Uri" /> and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>The <see cref="P:System.Uri.Port" /> data. If no port data is in the <see cref="T:System.Uri" /> and a default port has been assigned to the <see cref="P:System.Uri.Scheme" />, the default port is returned. If there is no default port, -1 is returned.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>The <see cref="P:System.Uri.UserInfo" /> data.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>Controls how URI information is escaped.</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Characters that have a reserved meaning in the requested URI components remain escaped. All others are not escaped.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>No escaping is performed.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>Escaping is performed according to the rules in RFC 2396.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>The exception that is thrown when an invalid Uniform Resource Identifier (URI) is detected.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException" /> class.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information that is required to serialize the new <see cref="T:System.UriFormatException" />.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.UriFormatException" />.</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException" /> class with the specified message.</summary>
      <param name="textString">The error message string.</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UriFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="textString">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="e">The exception that is the cause of the current exception. If the <c>innerException</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data that is needed to serialize the <see cref="T:System.UriFormatException" />.</summary>
      <param name="serializationInfo">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that will hold the serialized data for the <see cref="T:System.UriFormatException" />.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the destination of the serialized stream that is associated with the new <see cref="T:System.UriFormatException" />.</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Defines host name types for the <see cref="M:System.Uri.CheckHostName(System.String)" /> method.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>The host is set, but the type cannot be determined.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>The host name is a domain name system (DNS) style host name.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>The host name is an Internet Protocol (IP) version 4 host address.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>The host name is an Internet Protocol (IP) version 6 host address.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>The type of the host name is not supplied.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>Defines the different kinds of URIs.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>The URI is absolute.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>The URI is relative.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>The URI kind is indeterminate.</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>Parses a new URI scheme. This is an abstract class.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>Constructs a default URI parser.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>Gets the components from a URI.</summary>
      <param name="uri">The URI to parse.</param>
      <param name="components">The <see cref="T:System.UriComponents" /> to retrieve from <paramref name="uri" />.</param>
      <param name="format">One of the <see cref="T:System.UriFormat" /> values that controls how special characters are escaped.</param>
      <returns>A string that contains the components.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriFormat" /> is invalid.  
-or-
 <paramref name="uriComponents" /> is not a combination of valid <see cref="T:System.UriComponents" /> values.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> requires user-driven parsing  
-or-
 <paramref name="uri" /> is not an absolute URI. Relative URIs cannot be used with this method.</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>Initialize the state of the parser and validate the URI.</summary>
      <param name="uri">The T:System.Uri to validate.</param>
      <param name="parsingError">Validation errors, if any.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>Determines whether <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />.</summary>
      <param name="baseUri">The base URI.</param>
      <param name="relativeUri">The URI to test.</param>
      <returns>
        <see langword="true" /> if <paramref name="baseUri" /> is a base URI for <paramref name="relativeUri" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>Indicates whether the parser for a scheme is registered.</summary>
      <param name="schemeName">The scheme name to check.</param>
      <returns>
        <see langword="true" /> if <paramref name="schemeName" /> has been registered; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="schemeName" /> parameter is not valid.</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>Indicates whether a URI is well-formed.</summary>
      <param name="uri">The URI to check.</param>
      <returns>
        <see langword="true" /> if <paramref name="uri" /> is well-formed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>Invoked by a <see cref="T:System.Uri" /> constructor to get a <see cref="T:System.UriParser" /> instance</summary>
      <returns>A <see cref="T:System.UriParser" /> for the constructed <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>Invoked by the Framework when a <see cref="T:System.UriParser" /> method is registered.</summary>
      <param name="schemeName">The scheme that is associated with this <see cref="T:System.UriParser" />.</param>
      <param name="defaultPort">The port number of the scheme.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>Associates a scheme and port number with a <see cref="T:System.UriParser" />.</summary>
      <param name="uriParser">The URI parser to register.</param>
      <param name="schemeName">The name of the scheme that is associated with this parser.</param>
      <param name="defaultPort">The default port number for the specified scheme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> parameter is null  
-or-
 <paramref name="schemeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> parameter is not valid  
-or-
 <paramref name="defaultPort" /> parameter is not valid. The <paramref name="defaultPort" /> parameter is less than -1 or greater than 65,534.</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>Called by <see cref="T:System.Uri" /> constructors and <see cref="Overload:System.Uri.TryCreate" /> to resolve a relative URI.</summary>
      <param name="baseUri">A base URI.</param>
      <param name="relativeUri">A relative URI.</param>
      <param name="parsingError">Errors during the resolve process, if any.</param>
      <returns>The string of the resolved relative <see cref="T:System.Uri" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> parameter is not an absolute <see cref="T:System.Uri" />  
-or-
 <paramref name="baseUri" /> parameter requires user-driven parsing.</exception>
    </member>
    <member name="T:System.UriPartial">
      <summary>Defines the parts of a URI for the <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" /> method.</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>The scheme and authority segments of the URI.</summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>The scheme, authority, and path segments of the URI.</summary>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>The scheme, authority, path, and query segments of the URI.</summary>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>The scheme segment of the URI.</summary>
    </member>
    <member name="T:System.ValueTuple">
      <summary>Provides static methods for creating value tuples.</summary>
    </member>
    <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
      <summary>Compares the current <see cref="T:System.ValueTuple" /> instance to a specified <see cref="T:System.ValueTuple" /> instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>This method always returns 0.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.ValueTuple" /> instance.</exception>
    </member>
    <member name="M:System.ValueTuple.Create">
      <summary>Creates a new value tuple with zero components.</summary>
      <returns>A new value tuple with no components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``1(``0)">
      <summary>Creates a new value tuple with 1 component (a singleton).</summary>
      <param name="item1">The value of the value tuple's only component.</param>
      <typeparam name="T1">The type of the value tuple's only component.</typeparam>
      <returns>A value tuple with 1 component.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``2(``0,``1)">
      <summary>Creates a new value tuple with 2 components (a pair).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <returns>A value tuple with 2 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
      <summary>Creates a new value tuple with 3 components (a triple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <returns>A value tuple with 3 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
      <summary>Creates a new value tuple with 4 components (a quadruple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <param name="item4">The value of the value tuple's fourth component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth component.</typeparam>
      <returns>A value tuple with 4 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>Creates a new value tuple with 5 components (a quintuple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <param name="item4">The value of the value tuple's fourth component.</param>
      <param name="item5">The value of the value tuple's fifth component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth component.</typeparam>
      <returns>A value tuple with 5 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>Creates a new value tuple with 6 components (a sexuple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <param name="item4">The value of the value tuple's fourth component.</param>
      <param name="item5">The value of the value tuple's fifth component.</param>
      <param name="item6">The value of the value tuple's sixth component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth component.</typeparam>
      <returns>A value tuple with 6 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Creates a new value tuple with 7 components (a septuple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <param name="item4">The value of the value tuple's fourth component.</param>
      <param name="item5">The value of the value tuple's fifth component.</param>
      <param name="item6">The value of the value tuple's sixth component.</param>
      <param name="item7">The value of the value tuple's seventh component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the value tuple's seventh component.</typeparam>
      <returns>A value tuple with 7 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Creates a new value tuple with 8 components (an octuple).</summary>
      <param name="item1">The value of the value tuple's first component.</param>
      <param name="item2">The value of the value tuple's second component.</param>
      <param name="item3">The value of the value tuple's third component.</param>
      <param name="item4">The value of the value tuple's fourth component.</param>
      <param name="item5">The value of the value tuple's fifth component.</param>
      <param name="item6">The value of the value tuple's sixth component.</param>
      <param name="item7">The value of the value tuple's seventh component.</param>
      <param name="item8">The value of the value tuple's eighth component.</param>
      <typeparam name="T1">The type of the value tuple's first component.</typeparam>
      <typeparam name="T2">The type of the value tuple's second component.</typeparam>
      <typeparam name="T3">The type of the value tuple's third component.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth component.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth component.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth component.</typeparam>
      <typeparam name="T7">The type of the value tuple's seventh component.</typeparam>
      <typeparam name="T8">The type of the value tuple's eighth component.</typeparam>
      <returns>A value tuple with 8 components.</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare to the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.ValueTuple" /> instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
      <summary>Determines whether two <see cref="T:System.ValueTuple" /> instances are equal. This method always returns <see langword="true" />.</summary>
      <param name="other">The value tuple to compare with the current instance.</param>
      <returns>This method always returns <see langword="true" />.</returns>
    </member>
    <member name="M:System.ValueTuple.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.ValueTuple" /> instance.</summary>
      <returns>This method always return 0.</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple" /> instance to a specified object.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison. This parameter is ignored.</param>
      <returns>Returns 0 if <paramref name="other" /> is a <see cref="T:System.ValueTuple" /> instance and 1 if <paramref name="other" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.ValueTuple" /> instance.</exception>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns the hash code for this <see cref="T:System.ValueTuple" /> instance.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method computes the hash code. This parameter is ignored.</param>
      <returns>The hash code for this <see cref="T:System.ValueTuple" /> instance.</returns>
    </member>
    <member name="M:System.ValueTuple.System#IComparable#CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.ValueTuple" /> instance with a specified object and returns an indication of their relative values.</summary>
      <param name="other">The object to compare with the current instance</param>
      <returns>0 if <paramref name="other" /> is a <see cref="T:System.ValueTuple" /> instance; otherwise, 1 if <paramref name="other" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.ValueTuple" /> instance.</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Returns an <see cref="T:System.IndexOutOfRangeException" />. There are no elements in a <see langword="ValueTuple" />.</summary>
      <param name="index">There is no acceptable value for <paramref name="index" />.</param>
      <returns>An <see cref="T:System.IndexOutOfRangeException" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">There is no acceptable value for <paramref name="index" />.</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the length of this <see langword="ValueTuple" /> instance, which is always 0. There are no elements in a <see langword="ValueTuple" />.</summary>
      <returns>0, the number of elements in this <see langword="ValueTuple" /> instance.</returns>
    </member>
    <member name="M:System.ValueTuple.ToString">
      <summary>Returns the string representation of this <see cref="T:System.ValueTuple" /> instance.</summary>
      <returns>This method always returns "()".</returns>
    </member>
    <member name="T:System.ValueTuple`1">
      <summary>Represents a value tuple with a single component.</summary>
      <typeparam name="T1">The type of the value tuple's only element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`1.#ctor(`0)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`1" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
    </member>
    <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
      <summary>Compares the current <see cref="T:System.ValueTuple`1" /> instance to a specified <see cref="T:System.ValueTuple`1" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1" /> instance is equal to a specified <see cref="T:System.ValueTuple`1" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`1.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`1" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`1" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`1.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`1" /> instance's first element.</summary>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`1" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`1" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`1" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`1" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the <see langword="ValueTuple" /> element. <paramref name="index" /> must be 0.</param>
      <returns>The value of the <see langword="ValueTuple" /> element.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 0.</exception>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>1, the number of elements in a <see cref="T:System.ValueTuple`1" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`1.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`1" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`1" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`2">
      <summary>Represents a value tuple with 2 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`2" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
    </member>
    <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
      <summary>Compares the current <see cref="T:System.ValueTuple`2" /> instance to a specified <see cref="T:System.ValueTuple`2" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2" /> instance is equal to a specified <see cref="T:System.ValueTuple`2" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`2.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`2" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`2" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`2.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`2" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`2.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`2" /> instance's second element.</summary>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`2" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`2" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`2" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`2" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 to 1.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 1.</exception>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>2, the number of elements in a <see cref="T:System.ValueTuple`2" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`2.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`2" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`2" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`3">
      <summary>Represents a value tuple with 3 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`3" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
    </member>
    <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
      <summary>Compares the current <see cref="T:System.ValueTuple`3" /> instance to a specified <see cref="T:System.ValueTuple`3" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3" /> instance is equal to a specified <see cref="T:System.ValueTuple`3" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`3.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`3" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`3" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`3.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`3" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`3" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`3" /> instance's third element.</summary>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`3" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`3" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`3" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`3" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 to 2.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 2.</exception>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>3, the number of elements in a <see cref="T:System.ValueTuple`3" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`3.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`3" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`3" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`4">
      <summary>Represents a value tuple with 4 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`4" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
      <param name="item4">The value tuple's fourth element.</param>
    </member>
    <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
      <summary>Compares the current <see cref="T:System.ValueTuple`4" /> instance to a specified <see cref="T:System.ValueTuple`4" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4" /> instance is equal to a specified <see cref="T:System.ValueTuple`4" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`4.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`4" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`4" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`4.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`4" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`4" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`4" /> instance's third element.</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item4">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`4" /> instance's fourth element.</summary>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`4" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`4" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`4" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`4" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 to 3.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 3.</exception>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>4, the number of elements in a <see cref="T:System.ValueTuple`4" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`4.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`4" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`4" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`5">
      <summary>Represents a value tuple with 5 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth element.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`5" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
      <param name="item4">The value tuple's fourth element.</param>
      <param name="item5">The value tuple's fifth element.</param>
    </member>
    <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>Compares the current <see cref="T:System.ValueTuple`5" /> instance to a specified <see cref="T:System.ValueTuple`5" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5" /> instance is equal to a specified <see cref="T:System.ValueTuple`5" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`5.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`5" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`5" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`5.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`5" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`5" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`5" /> instance's third element.</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item4">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`5" /> instance's fourth element.</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item5">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`5" /> instance's fifth element.</summary>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`5" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`5" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`5" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`5" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 to 4.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 4.</exception>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>5, the number of elements in a <see cref="T:System.ValueTuple`5" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`5.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`5" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`5" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`6">
      <summary>Represents a value tuple with 6 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth element.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth element.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`6" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
      <param name="item4">The value tuple's fourth element.</param>
      <param name="item5">The value tuple's fifth element.</param>
      <param name="item6">The value tuple's sixth element.</param>
    </member>
    <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>Compares the current <see cref="T:System.ValueTuple`6" /> instance to a specified <see cref="T:System.ValueTuple`6" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6" /> instance is equal to a specified <see cref="T:System.ValueTuple`6" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`6.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`6" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`6" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`6.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's third element.</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item4">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's fourth element.</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item5">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's fifth element.</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item6">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`6" /> instance's sixth element.</summary>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`6" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`6" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`6" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`6" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 to 5.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 5.</exception>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>6, the number of elements in a <see cref="T:System.ValueTuple`6" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`6.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`6" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`6" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`7">
      <summary>Represents a value tuple with 7 components.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth element.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth element.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth element.</typeparam>
      <typeparam name="T7">The type of the value tuple's seventh element.</typeparam>
    </member>
    <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>Initializes a new <see cref="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
      <param name="item4">The value tuple's fourth element.</param>
      <param name="item5">The value tuple's fifth element.</param>
      <param name="item6">The value tuple's sixth element.</param>
      <param name="item7">The value tuple's seventh element.</param>
    </member>
    <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>Compares the current <see cref="T:System.ValueTuple`7" /> instance to a specified <see cref="T:System.ValueTuple`7" /> instance.</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7" /> instance is equal to a specified <see cref="T:System.ValueTuple`7" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`7.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`7" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`7" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`7.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's third element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item4">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's fourth element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item5">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's fifth element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item6">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's sixth element.</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item7">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`7" /> instance's seventh element.</summary>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`7" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`7" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`7" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`7" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The index of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 (the index of <see cref="F:System.ValueTuple`7.Item1" />) to 6 (the index of  <see cref="F:System.ValueTuple`7.Item7" />).</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than 6.</exception>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>7, the number of elements in a <see cref="T:System.ValueTuple`7" /> object.</returns>
    </member>
    <member name="M:System.ValueTuple`7.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`7" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`7" /> instance.</returns>
    </member>
    <member name="T:System.ValueTuple`8">
      <summary>Represents an n-value tuple, where n is 8 or greater.</summary>
      <typeparam name="T1">The type of the value tuple's first element.</typeparam>
      <typeparam name="T2">The type of the value tuple's second element.</typeparam>
      <typeparam name="T3">The type of the value tuple's third element.</typeparam>
      <typeparam name="T4">The type of the value tuple's fourth element.</typeparam>
      <typeparam name="T5">The type of the value tuple's fifth element.</typeparam>
      <typeparam name="T6">The type of the value tuple's sixth element.</typeparam>
      <typeparam name="T7">The type of the value tuple's seventh element.</typeparam>
      <typeparam name="TRest">Any generic value tuple instance that defines the types of the tuple's remaining elements.</typeparam>
    </member>
    <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>Initializes a new <see cref="T:System.ValueTuple`8" /> instance.</summary>
      <param name="item1">The value tuple's first element.</param>
      <param name="item2">The value tuple's second element.</param>
      <param name="item3">The value tuple's third element.</param>
      <param name="item4">The value tuple's fourth element.</param>
      <param name="item5">The value tuple's fifth element.</param>
      <param name="item6">The value tuple's sixth element.</param>
      <param name="item7">The value tuple's seventh element.</param>
      <param name="rest">An instance of any value tuple type that contains the values of the value's tuple's remaining elements.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> is not a generic value tuple type.</exception>
    </member>
    <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>Compares the current <see cref="T:System.ValueTuple`8" /> instance to a specified <see cref="T:System.ValueTuple`8" /> instance</summary>
      <param name="other">The tuple to compare with this instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8" /> instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8" /> instance is equal to a specified <see cref="T:System.ValueTuple`8" /> instance.</summary>
      <param name="other">The value tuple to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified tuple; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`8.GetHashCode">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`8" /> instance.</summary>
      <returns>The hash code for the current <see cref="T:System.ValueTuple`8" /> instance.</returns>
    </member>
    <member name="F:System.ValueTuple`8.Item1">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's first element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item2">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's second element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item3">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's third element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item4">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's fourth element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item5">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's fifth element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item6">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's sixth element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item7">
      <summary>Gets the value of the current <see cref="T:System.ValueTuple`8" /> instance's seventh element.</summary>
    </member>
    <member name="F:System.ValueTuple`8.Rest">
      <summary>Gets the current <see cref="T:System.ValueTuple`8" /> instance's remaining elements.</summary>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compares the current <see cref="T:System.ValueTuple`8" /> instance to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that provides custom rules for comparison.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.ValueTuple`8" /> object.</exception>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8" /> instance is equal to a specified object based on a specified comparison method.</summary>
      <param name="other">The object to compare with this instance.</param>
      <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
      <returns>
        <see langword="true" /> if the current instance is equal to the specified objects; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calculates the hash code for the current <see cref="T:System.ValueTuple`8" /> instance by using a specified computation method.</summary>
      <param name="comparer">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.ValueTuple`8" /> instance.</param>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.ValueTuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
      <param name="other">An object to compare with the current instance.</param>
      <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  Value  

  Description  

  A negative integer  

  This instance precedes <paramref name="other" />.  

  Zero  

  This instance and <paramref name="other" /> have the same position in the sort order.  

  A positive integer  

  This instance follows <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not a <see cref="T:System.ValueTuple`8" /> object.</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>Gets the value of the specified <see langword="ValueTuple" /> element.</summary>
      <param name="index">The value of the specified <see langword="ValueTuple" /> element. <paramref name="index" /> can range from 0 for <see langword="Item1" /> to one less than the number of elements in the <see langword="ValueTuple" />.</param>
      <returns>The value of the <see langword="ValueTuple" /> element at the specified position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than 0.  
-or-  
<paramref name="index" /> is greater than or equal to <see cref="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>Gets the number of elements in the <see langword="ValueTuple" />.</summary>
      <returns>The number of elements in the <see langword="ValueTuple" />.</returns>
    </member>
    <member name="M:System.ValueTuple`8.ToString">
      <summary>Returns a string that represents the value of this <see cref="T:System.ValueTuple`8" /> instance.</summary>
      <returns>The string representation of this <see cref="T:System.ValueTuple`8" /> instance.</returns>
    </member>
    <member name="T:System.ValueType">
      <summary>Provides the base class for value types.</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ValueType" /> class.</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:System.Version">
      <summary>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class.</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major and minor values.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major, minor, and build values.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <param name="build">The build number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class with the specified major, minor, build, and revision numbers.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <param name="build">The build number.</param>
      <param name="revision">The revision number.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero.</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified string.</summary>
      <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>Gets the value of the build component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The build number, or -1 if the build number is undefined.</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.</summary>
      <returns>A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.</summary>
      <param name="version">An object to compare, or <see langword="null" />.</param>
      <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  Return value  

  Meaning  

  Less than zero  

  The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />.  

  Zero  

  The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />.  

  Greater than zero  

  The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />.  

 -or-  

 <paramref name="version" /> is <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> is not of type <see cref="T:System.Version" />.</exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.</summary>
      <param name="value">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>A signed integer that indicates the relative values of the two objects, as shown in the following table.  
  Return value  

  Meaning  

  Less than zero  

  The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />.  

  Zero  

  The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />.  

  Greater than zero  

  The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />.  

 -or-  

 <paramref name="value" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object is equal to a specified object.</summary>
      <param name="obj">An object to compare with the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the current <see cref="T:System.Version" /> object and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of the current <see cref="T:System.Version" /> object matches the corresponding component of <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object and a specified <see cref="T:System.Version" /> object represent the same value.</summary>
      <param name="obj">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if every component of the current <see cref="T:System.Version" /> object matches the corresponding component of the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Version" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>Gets the value of the major component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The major version number.</returns>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>Gets the high 16 bits of the revision number.</summary>
      <returns>A 16-bit signed integer.</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>Gets the value of the minor component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The minor version number.</returns>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>Gets the low 16 bits of the revision number.</summary>
      <returns>A 16-bit signed integer.</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are equal.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> equals <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is greater than <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than or equal to the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is greater than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are not equal.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> does not equal <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than the second specified <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is less than <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than or equal to the second <see cref="T:System.Version" /> object.</summary>
      <param name="v1">The first <see cref="T:System.Version" /> object.</param>
      <param name="v2">The second <see cref="T:System.Version" /> object.</param>
      <returns>
        <see langword="true" /> if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Version.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>Converts the string representation of a version number to an equivalent <see cref="T:System.Version" /> object.</summary>
      <param name="input">A string that contains a version number to convert.</param>
      <returns>An object that is equivalent to the version number specified in the <paramref name="input" /> parameter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>Gets the value of the revision component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The revision number, or -1 if the revision number is undefined.</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:  
 major.minor[.build[.revision]]  
 For example, if you create a <see cref="T:System.Version" /> object using the constructor <c>Version(1,1)</c>, the returned string is "1.1". If you create a <see cref="T:System.Version" /> object using the constructor <c>Version(1,3,4,2)</c>, the returned string is "1.3.4.2".</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation. A specified count indicates the number of components to return.</summary>
      <param name="fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4.</param>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned.  
  fieldCount  

  Return Value  

  0  

  An empty string ("").  

  1  

  major  

  2  

  major.minor  

  3  

  major.minor.build  

  4  

  major.minor.build.revision  

   

 For example, if you create <see cref="T:System.Version" /> object using the constructor <c>Version(1,3,5)</c>, <c>ToString(2)</c> returns "1.3" and <c>ToString(4)</c> throws an exception.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.  
-or-  
<paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object.</exception>
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32,System.Int32@)">
      <param name="destination" />
      <param name="fieldCount" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryParse(System.ReadOnlySpan{System.Char},System.Version@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>Tries to convert the string representation of a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="input">A string that contains a version number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="input" />, if the conversion succeeded. If <paramref name="input" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or if the conversion fails, <paramref name="result" /> is <see langword="null" /> when the method returns.</param>
      <returns>
        <see langword="true" /> if the <paramref name="input" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Void">
      <summary>Specifies a return value type for a method that does not return a value.</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object.</summary>
      <param name="target">The object to track or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object and using the specified resurrection tracking.</summary>
      <param name="target">An object to track.</param>
      <param name="trackResurrection">Indicates when to stop tracking the object. If <see langword="true" />, the object is tracked after finalization; if <see langword="false" />, the object is only tracked until finalization.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, using deserialized data from the specified serialization and stream objects.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>Discards the reference to the target represented by the current <see cref="T:System.WeakReference" /> object.</summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize the current <see cref="T:System.WeakReference" /> object.</summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected.</summary>
      <returns>
        <see langword="true" /> if the object referenced by the current <see cref="T:System.WeakReference" /> object has not been garbage collected and is still accessible; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.</summary>
      <returns>
        <see langword="null" /> if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object is tracked after it is finalized.</summary>
      <returns>
        <see langword="true" /> if the object the current <see cref="T:System.WeakReference" /> object refers to is tracked after finalization; or <see langword="false" /> if the object is only tracked until finalization.</returns>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>Represents a typed weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
      <typeparam name="T">The type of the object referenced.</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference`1" /> class that references the specified object.</summary>
      <param name="target">The object to reference, or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference`1" /> class that references the specified object and uses the specified resurrection tracking.</summary>
      <param name="target">The object to reference, or <see langword="null" />.</param>
      <param name="trackResurrection">
        <see langword="true" /> to track the object after finalization; <see langword="false" /> to track the object only until finalization.</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>Discards the reference to the target that is represented by the current <see cref="T:System.WeakReference`1" /> object.</summary>
    </member>
    <member name="M:System.WeakReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data necessary to serialize the current <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="info">An object that holds all the data necessary to serialize or deserialize the current <see cref="T:System.WeakReference`1" /> object.</param>
      <param name="context">The location where serialized data is stored and retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>Sets the target object that is referenced by this <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="target">The new target object.</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>Tries to retrieve the target object that is referenced by the current <see cref="T:System.WeakReference`1" /> object.</summary>
      <param name="target">When this method returns, contains the target object, if it is available. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if the target was retrieved; otherwise, <see langword="false" />.</returns>
    </member>
  </members>
</doc>