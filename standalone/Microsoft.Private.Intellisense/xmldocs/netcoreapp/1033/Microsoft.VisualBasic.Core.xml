<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.AppWinStyle">
      <summary>Indicates the window style to use for the invoked program when calling the <see langword="Shell" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.Hide">
      <summary>Window is hidden and focus is passed to the hidden window. This member is equivalent to the Visual Basic constant <see langword="vbHide" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MaximizedFocus">
      <summary>Window is maximized with focus. This member is equivalent to the Visual Basic constant <see langword="vbMaximizedFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedFocus">
      <summary>Window is displayed as an icon with focus. This member is equivalent to the Visual Basic constant <see langword="vbMinimizedFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedNoFocus">
      <summary>Window is displayed as an icon. The currently active window remains active. This member is equivalent to the Visual Basic constant <see langword="vbMinimizedNoFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalFocus">
      <summary>Window has focus and is restored to its original size and position. This member is equivalent to the Visual Basic constant <see langword="vbNormalFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalNoFocus">
      <summary>Window is restored to its most recent size and position. The currently active window remains active. This member is equivalent to the Visual Basic constant <see langword="vbNormalNoFocus" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>Indicates the type of procedure being invoked when calling the <see langword="CallByName" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>A property value is being retrieved.  This member is equivalent to the Visual Basic constant <see langword="vbGet" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>An Object property value is being determined. This member is equivalent to the Visual Basic constant <see langword="vbLet" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>A method is being invoked.  This member is equivalent to the Visual Basic constant <see langword="vbMethod" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>A property value is being determined.  This member is equivalent to the Visual Basic constant <see langword="vbSet" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>Adds an element to a <see langword="Collection" /> object.</summary>
      <param name="Item">Required. An object of any type that specifies the element to add to the collection.</param>
      <param name="Key">Optional. A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</param>
      <param name="Before">Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument. If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</param>
      <param name="After">Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument. If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property. If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>Deletes all elements of a Visual Basic <see langword="Collection" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</summary>
      <param name="Key">Required. A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</param>
      <returns>
        <see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>Gets the number of elements in a collection.</summary>
      <returns>The number of elements in a collection.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>Gets a specific element of a <see langword="Collection" /> object either by position or by key.</summary>
      <param name="Index">A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</param>
      <returns>A specific element of a <see langword="Collection" /> object either by position or by key.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>Gets a specific element of a <see langword="Collection" /> object either by position or by key.</summary>
      <param name="Index">A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</param>
      <returns>A specific element of a <see langword="Collection" /> object either by position or by key.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>Gets a specific element of a <see langword="Collection" /> object either by position or by key.</summary>
      <param name="Key">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</param>
      <returns>A specific element of a <see langword="Collection" /> object either by position or by key.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>Removes an element from a <see langword="Collection" /> object.</summary>
      <param name="Index">A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>Removes an element from a <see langword="Collection" /> object.</summary>
      <param name="Key">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.ComClassAttribute">
      <summary>The <see langword="ComClassAttribute" /> attribute instructs the compiler to add metadata that allows a class to be exposed as a COM object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see langword="ComClassAttribute" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="ComClassAttribute" /> class.</summary>
      <param name="_ClassID">Initializes the value of the <see langword="ClassID" /> property that is used to uniquely identify a class.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see langword="ComClassAttribute" /> class.</summary>
      <param name="_ClassID">Initializes the value of the <see langword="ClassID" /> property that is used to uniquely identify a class.</param>
      <param name="_InterfaceID">Initializes the value of the <see langword="InterfaceID" /> property that is used to uniquely identify an interface.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see langword="ComClassAttribute" /> class.</summary>
      <param name="_ClassID">Initializes the value of the <see langword="ClassID" /> property that is used to uniquely identify a class.</param>
      <param name="_InterfaceID">Initializes the value of the <see langword="InterfaceID" /> property that is used to uniquely identify an interface.</param>
      <param name="_EventId">Initializes the value of the <see langword="EventID" /> property that is used to uniquely identify an event.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.ClassID">
      <summary>Gets a class ID used to uniquely identify a class.</summary>
      <returns>Read-only. A string that can be used by the compiler to uniquely identify the class when a COM object is created.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.EventID">
      <summary>Gets an event ID used to uniquely identify an event.</summary>
      <returns>Read only. A string that can be used by the compiler to uniquely identify an event for the class when a COM object is created.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceID">
      <summary>Gets an interface ID used to uniquely identify an interface.</summary>
      <returns>Read-only. A string that can be used by the compiler to uniquely identify an interface for the class when a COM object is created.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceShadows">
      <summary>Indicates that the COM interface name shadows another member of the class or base class.</summary>
      <returns>A <see langword="Boolean" /> value that indicates that the COM interface name shadows another member of the class or base class.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>Indicates how to compare strings when calling comparison functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>Performs a binary comparison. This member is equivalent to the Visual Basic constant <see langword="vbBinaryCompare" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>Performs a textual comparison. This member is equivalent to the Visual Basic constant <see langword="vbTextCompare" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.BooleanType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromObject(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Boolean" /> value.</param>
      <returns>The <see langword="Boolean" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromString(System.String)">
      <summary>Returns a <see langword="Boolean" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Boolean" /> value.</param>
      <returns>The <see langword="Boolean" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ByteType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromObject(System.Object)">
      <summary>Returns a <see langword="Byte" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Byte" /> value.</param>
      <returns>The <see langword="Byte" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromString(System.String)">
      <summary>Returns a <see langword="Byte" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Byte" /> value.</param>
      <returns>The <see langword="Byte" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharArrayType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromObject(System.Object)">
      <summary>Returns a <see langword="CharArray" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="CharArray" /> value.</param>
      <returns>The <see langword="CharArray" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromString(System.String)">
      <summary>Returns a <see langword="CharArray" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="CharArray" /> value.</param>
      <returns>The <see langword="CharArray" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromObject(System.Object)">
      <summary>Returns a <see langword="Char" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Char" /> value.</param>
      <returns>The <see langword="Char" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromString(System.String)">
      <summary>Returns a <see langword="Char" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Char" /> value.</param>
      <returns>The <see langword="Char" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>Provides methods that perform various type conversions.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
      <returns>An object of the specified target type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FallbackUserDefinedConversion(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
      <returns>An object of the specified target type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>Converts a <see cref="T:System.Char" /> value to a string, given a byte count.</summary>
      <param name="Value">The <see langword="Char" /> value to convert.</param>
      <param name="Count">The byte count of the <see langword="Char" /> value.</param>
      <returns>The string representation of the specified value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>Converts a <see cref="T:System.Char" /> array to a string.</summary>
      <param name="Value">The <see langword="Char" /> array to convert.</param>
      <returns>The string representation of the specified array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>Converts a subset of a <see cref="T:System.Char" /> array to a string.</summary>
      <param name="Value">The <see langword="Char" /> array to convert.</param>
      <param name="StartIndex">Zero-based index of the start position.</param>
      <param name="Length">Length of the subset in bytes.</param>
      <returns>The string representation of the specified array from the start position to the specified length.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Boolean" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>A <see langword="Boolean" /> value. Returns <see langword="False" /> if the object is null; otherwise, <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>Converts a string to a <see cref="T:System.Boolean" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>A <see langword="Boolean" /> value. Returns <see langword="False" /> if the string is null; otherwise, <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Byte" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Byte" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>Converts a string to a <see cref="T:System.Byte" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Byte" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Char" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Char" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>Converts a string to a <see cref="T:System.Char" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Char" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>Converts an object to a one-dimensional <see cref="T:System.Char" /> array.</summary>
      <param name="Value">The object to convert.</param>
      <returns>A one-dimensional <see langword="Char" /> array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>Converts a string to a one-dimensional <see cref="T:System.Char" /> array.</summary>
      <param name="Value">The string to convert.</param>
      <returns>A one-dimensional <see langword="Char" /> array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>Converts an object to a <see cref="T:System.DateTime" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="DateTime" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>Converts a string to a <see cref="T:System.DateTime" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="DateTime" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Decimal" /> value.</summary>
      <param name="Value">A Boolean value to convert.</param>
      <returns>The <see langword="Decimal" /> value of the Boolean value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Decimal" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Decimal" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>Converts a string to a <see cref="T:System.Decimal" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Decimal" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Double" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Double" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>Converts a string to a <see cref="T:System.Double" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Double" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>Converts an object to a generic type <paramref name="T" />.</summary>
      <param name="Value">The object to convert.</param>
      <typeparam name="T">The type to convert <paramref name="Value" /> to.</typeparam>
      <returns>A structure or object of generic type <paramref name="T" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>Converts an object to an integer value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="int" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>Converts a string to an integer value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="int" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>Converts an object to a <see langword="Long" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Long" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>Converts a string to a <see langword="Long" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Long" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>Converts an object to an <see cref="T:System.SByte" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="SByte" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>Converts a string to an <see cref="T:System.SByte" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="SByte" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>Converts an object to a <see langword="Short" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Short" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>Converts a string to a <see langword="Short" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Short" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Single" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Single" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.Single" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Single" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <param name="Value">The <see langword="Boolean" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Boolean" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>Converts a <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <param name="Value">The <see langword="Byte" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Byte" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>Converts a <see cref="T:System.Char" /> value to a <see cref="T:System.String" />.</summary>
      <param name="Value">The <see langword="Char" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Char" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>Converts a <see cref="T:System.DateTime" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="DateTime" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="DateTime" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Decimal" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Decimal" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <param name="Value">The <see langword="decimal" /> value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Decimal" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Double" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Double" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <param name="Value">The <see langword="Double" /> value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Double" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>Converts a <see langword="Short" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Short" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Short" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>Converts an integer value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="int" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="int" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>Converts a <see langword="Long" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Long" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Long" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>Converts an object to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="String" /> representation of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>Converts a <see cref="T:System.Single" /> value (a single-precision floating point number) to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Single" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Single" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Single" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <param name="Value">The <see langword="Single" /> value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Single" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>Converts a <see langword="uint" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Uint" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Uint" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>Converts a <see langword="Ulong" /> value to a <see cref="T:System.String" /> value.</summary>
      <param name="Value">The <see langword="Ulong" /> value to convert.</param>
      <returns>The <see langword="String" /> representation of the <see langword="Ulong" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>Converts an object to a <see langword="Uint" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Uint" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>Converts a string to a <see langword="Uint" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Uint" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>Converts an object to a <see langword="Ulong" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Ulong" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>Converts a string to a <see langword="Ulong" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Ulong" /> value of the string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>Converts an object to a <see langword="Ushort" /> value.</summary>
      <param name="Value">The object to convert.</param>
      <returns>The <see langword="Ushort" /> value of the object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>Converts a string to a <see langword="Ushort" /> value.</summary>
      <param name="Value">The string to convert.</param>
      <returns>The <see langword="Ushort" /> value of the string.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DateType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromObject(System.Object)">
      <summary>Returns a <see langword="Date" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Date" /> value.</param>
      <returns>The <see langword="Date" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String)">
      <summary>Returns a <see langword="Date" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Date" /> value.</param>
      <returns>The <see langword="Date" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String,System.Globalization.CultureInfo)">
      <summary>Returns a <see langword="Date" /> value that corresponds to the specified string and culture information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Date" /> value.</param>
      <param name="culture">Required. A <see cref="T:System.Globalization.CultureInfo" /> object that defines how date values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Date" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DecimalType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromBoolean(System.Boolean)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified <see langword="Boolean" /> value.</summary>
      <param name="Value">Required. <see langword="Boolean" /> value to convert to a <see langword="Decimal" /> value.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Decimal" /> value.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified object and number format information.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Decimal" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Decimal" /> value.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified string and number format information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Decimal" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Decimal" /> value that corresponds to the specified string and number format information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Decimal" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Decimal" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>When applied to a class, the compiler implicitly calls a component-initializing method from the default synthetic constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" /> attribute.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DoubleType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Double" /> value.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Double" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Double" /> value.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified string and number format information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Double" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Double" /> value.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Double" /> value that corresponds to the specified string and number format information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Double" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Double" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>The Visual Basic compiler uses this class during static local initialization; it is not meant to be called directly from your code. An exception of this type is thrown if a static local variable fails to initialize.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IntegerType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromObject(System.Object)">
      <summary>Returns an <see langword="Integer" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to an <see langword="Integer" /> value.</param>
      <returns>The <see langword="Integer" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromString(System.String)">
      <summary>Returns an <see langword="Integer" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to an <see langword="Integer" /> value.</param>
      <returns>The <see langword="Integer" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LateBinding">
      <summary>This class has been deprecated since Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>Performs a late-bound call to an object method.</summary>
      <param name="o">The object to call a method on.</param>
      <param name="objType">The type of the object.</param>
      <param name="name">The method name of <paramref name="o" /> to call.</param>
      <param name="args">An array of parameter values to pass to the method.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <param name="CopyBack">An array of <see langword="Boolean" /> values, where <see langword="True" /> indicates that the associated parameter is passed <see langword="ByRef" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>Returns a late-bound value from an object.</summary>
      <param name="o">The object to return the value from.</param>
      <param name="objType">The type of the object.</param>
      <param name="name">The member name of <paramref name="o" /> to retrieve a value from.</param>
      <param name="args">An array of one or more index values that specify the location in <paramref name="o" /> if <paramref name="o" /> is a one-dimensional or multi-dimensional array, or argument values to pass to the object <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <param name="CopyBack">An array of <see langword="Boolean" /> values, where <see langword="True" /> indicates that the associated parameter is passed <see langword="ByRef" />.</param>
      <returns>If <paramref name="o" /> is an array, the value from <paramref name="o" /> at the location specified by <paramref name="args" />. If <paramref name="o" /> is an object, the return value of <paramref name="o" /> invoked by using the named parameters in <paramref name="paramnames" /> and their associated values in <paramref name="args" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>Returns a late-bound value from an object, using the specified index or parameters.</summary>
      <param name="o">The object to return the value from.</param>
      <param name="args">An array of one or more index values that specify the location in <paramref name="o" /> if <paramref name="o" /> is a one-dimensional or multi-dimensional array, or argument values to pass to the object <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <returns>If <paramref name="o" /> is an array, the value from <paramref name="o" /> at the location specified by <paramref name="args" />. If <paramref name="o" /> is an object, the return value of <paramref name="o" /> invoked by using the named parameters in <paramref name="paramnames" /> and their associated values in <paramref name="args" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Sets a late-bound value of an object, using the specified parameters.</summary>
      <param name="o">The object to set the value for.</param>
      <param name="args">An array of one or more index values that specify the location in <paramref name="o" /> if <paramref name="o" /> is a one-dimensional or multi-dimensional array, or argument values to pass to the object <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Sets a late-bound value of an object, using the specified parameters.</summary>
      <param name="o">The object to set the value for.</param>
      <param name="args">An array of one or more parameter values to pass to the object <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <param name="OptimisticSet">
        <see langword="True" /> to suppress the exception thrown when the set member is not found.</param>
      <param name="RValueBase">
        <see langword="True" /> to identify <paramref name="o" /> as the result of a late-bound expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[])">
      <summary>Sets a late-bound value of a member of an object, using the specified parameters.</summary>
      <param name="o">The object to set the member value for.</param>
      <param name="objType">The type of the object.</param>
      <param name="name">The member name to set.</param>
      <param name="args">An array of one or parameter values to pass to the member of <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Sets a late-bound value of a member of an object, using the specified parameters.</summary>
      <param name="o">The object to set the member value for.</param>
      <param name="objType">The type of the object.</param>
      <param name="name">The member name to set.</param>
      <param name="args">An array of one or more parameter values to pass to the member of <paramref name="o" />.</param>
      <param name="paramnames">An array that contains the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <param name="OptimisticSet">
        <see langword="True" /> to suppress the exception thrown when the set member is not found.</param>
      <param name="RValueBase">
        <see langword="True" /> to identify <paramref name="o" /> as the result of a late-bound expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>This class provides helpers that the Visual Basic compiler uses to do the work for the Like Operator. It is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>Performs binary or text string comparison given two objects. This helper method is not meant to be called directly from your code.</summary>
      <param name="Source">The string to compare.</param>
      <param name="Pattern">The string against which <paramref name="Source" /> is being compared.</param>
      <param name="CompareOption">A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.</param>
      <returns>
        <see langword="True" /> if the strings match; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Performs binary or text string comparison given two strings. This helper method is not meant to be called directly from your code.</summary>
      <param name="Source">The string to compare.</param>
      <param name="Pattern">The string against which <paramref name="Source" /> is being compared.</param>
      <param name="CompareOption">A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.</param>
      <returns>
        <see langword="True" /> if the strings match; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LongType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromObject(System.Object)">
      <summary>Returns a <see langword="Long" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Long" /> value.</param>
      <returns>The <see langword="Long" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromString(System.String)">
      <summary>Returns a <see langword="Long" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Long" /> value.</param>
      <returns>The <see langword="Long" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>This class provides helpers that the Visual Basic compiler uses for late binding calls; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackCall(System.Object,System.String,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound method or function call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="IgnoreReturn">A <see langword="Boolean" /> value indicating whether or not the return value can be ignored.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackGet(System.Object,System.String,System.Object[],System.String[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="OptimisticSet">A <see langword="Boolean" /> value used to determine whether the set operation will work. Set to <see langword="True" /> when you believe that an intermediate value has been set in the property or field; otherwise <see langword="False" />.</param>
      <param name="RValueBase">A <see langword="Boolean" /> value that specifies when the base reference of the late reference is an <see langword="RValue" />. Set to <see langword="True" /> when the base reference of the late reference is an <see langword="RValue" />; this allows you to generate a run-time exception for late assignments to fields of <see langword="RValues" /> of value types. Otherwise, set to <see langword="False" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault1(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field, or call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method. If <paramref name="Instance" /> is of type <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />, then bind using the Dynamic Language Runtime; otherwise perform standard late-binding.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A <see langword="Boolean" /> value used to specify whether to throw exceptions when an error is encountered. Set to <see langword="True" /> to throw exceptions. Set to <see langword="False" /> to return <see langword="Nothing" /> when an error is encountered.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault2(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field, or call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A <see langword="Boolean" /> value used to specify whether to throw exceptions when an error is encountered. Set to <see langword="True" /> to throw exceptions. Set to <see langword="False" /> to return <see langword="Nothing" /> when an error is encountered.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSet(System.Object,System.String,System.Object[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSetComplex(System.Object,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="OptimisticSet">A <see langword="Boolean" /> value used to determine whether the set operation will work. Set to <see langword="True" /> when you believe that an intermediate value has been set in the property or field; otherwise <see langword="False" />.</param>
      <param name="RValueBase">A <see langword="Boolean" /> value that specifies when the base reference of the late reference is an <see langword="RValue" />. Set to <see langword="True" /> when the base reference of the late reference is an <see langword="RValue" />; this allows you to generate a run-time exception for late assignments to fields of <see langword="RValues" /> of value types. Otherwise, set to <see langword="False" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>Executes a late-bound method or function call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="CopyBack">An array of <see langword="Boolean" /> values that the late binder uses to communicate back to the call site which arguments match <see langword="ByRef" /> parameters. Each <see langword="True" /> value indicates that the arguments matched and should be copied out after the call to <see langword="LateCall" /> is complete.</param>
      <param name="IgnoreReturn">A <see langword="Boolean" /> value indicating whether or not the return value can be ignored.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCallInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A <see langword="Boolean" /> value used to specify whether to throw exceptions when an error is encountered. Set to <see langword="True" /> to throw exceptions. Set to <see langword="False" /> to return <see langword="Nothing" /> when an error is encountered.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="CopyBack">An array of <see langword="Boolean" /> values that the late binder uses to communicate back to the call site which arguments match <see langword="ByRef" /> parameters. Each <see langword="True" /> value indicates that the arguments matched and should be copied out after the call to <see langword="LateCall" /> is complete.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGetInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A <see langword="Boolean" /> value used to specify whether to throw exceptions when an error is encountered. Set to <see langword="True" /> to throw exceptions. Set to <see langword="False" /> to return <see langword="Nothing" /> when an error is encountered.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <returns>An instance of the call object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="OptimisticSet">A <see langword="Boolean" /> value used to determine whether the set operation will work. Set to <see langword="True" /> when you believe that an intermediate value has been set in the property or field; otherwise <see langword="False" />.</param>
      <param name="RValueBase">A <see langword="Boolean" /> value that specifies when the base reference of the late reference is an <see langword="RValue" />. Set to <see langword="True" /> when the base reference of the late reference is an <see langword="RValue" />; this allows you to generate a run-time exception for late assignments to fields of <see langword="RValues" /> of value types. Otherwise, set to <see langword="False" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="OptimisticSet">A <see langword="Boolean" /> value used to determine whether the set operation will work. Set to <see langword="True" /> when you believe that an intermediate value has been set in the property or field; otherwise <see langword="False" />.</param>
      <param name="RValueBase">A <see langword="Boolean" /> value that specifies when the base reference of the late reference is an <see langword="RValue" />. Set to <see langword="True" /> when the base reference of the late reference is an <see langword="RValue" />; this allows you to generate a run-time exception for late assignments to fields of <see langword="RValues" /> of value types. Otherwise, set to <see langword="False" />.</param>
      <param name="CallType">An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> representing the type of procedure being called. The value of CallType can be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />. Only <see langword="Set" /> is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="OptimisticSet">A <see langword="Boolean" /> value used to determine whether the set operation will work. Set to <see langword="True" /> when you believe that an intermediate value has been set in the property or field; otherwise <see langword="False" />.</param>
      <param name="RValueBase">A <see langword="Boolean" /> value that specifies when the base reference of the late reference is an <see langword="RValue" />. Set to <see langword="True" /> when the base reference of the late reference is an <see langword="RValue" />; this allows you to generate a run-time exception for late assignments to fields of <see langword="RValues" /> of value types. Otherwise, set to <see langword="False" />.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>The Visual Basic compiler uses this class for object flow control; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>Checks for a synchronization lock on the specified type.</summary>
      <param name="Expression">The data type for which to check for synchronization lock.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>Provides services to the Visual Basic compiler for compiling <see langword="For...Next" /> loops.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>Initializes a <see langword="For...Next" /> loop.</summary>
      <param name="Counter">The loop counter variable.</param>
      <param name="Start">The initial value of the loop counter.</param>
      <param name="Limit">The value of the <see langword="To" /> option.</param>
      <param name="StepValue">The value of the <see langword="Step" /> option.</param>
      <param name="LoopForResult">An object that contains verified values for loop values.</param>
      <param name="CounterResult">The counter value for the next loop iteration.</param>
      <returns>
        <see langword="False" /> if the loop has terminated; otherwise, <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>Checks for valid values for the loop counter, <see langword="Step" />, and <see langword="To" /> values.</summary>
      <param name="count">Required. A <see langword="Decimal" /> value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A <see langword="Decimal" /> value that represents the value passed by using the <see langword="To" /> keyword.</param>
      <param name="StepValue">Required. A <see langword="Decimal" /> value that represents the value passed by using the <see langword="Step" /> keyword.</param>
      <returns>
        <see langword="True" /> if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" /> or <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>Increments a <see langword="For...Next" /> loop.</summary>
      <param name="Counter">The loop counter variable.</param>
      <param name="LoopObj">An object that contains verified values for loop values.</param>
      <param name="CounterResult">The counter value for the next loop iteration.</param>
      <returns>
        <see langword="False" /> if the loop has terminated; otherwise, <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>Checks for valid values for the loop counter, <see langword="Step" />, and <see langword="To" /> values.</summary>
      <param name="count">Required. A <see langword="Single" /> value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A <see langword="Single" /> value that represents the value passed by using the <see langword="To" /> keyword.</param>
      <param name="StepValue">Required. A <see langword="Single" /> value that represents the value passed by using the <see langword="Step" /> keyword.</param>
      <returns>
        <see langword="True" /> if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>Checks for valid values for the loop counter, <see langword="Step" />, and <see langword="To" /> values.</summary>
      <param name="count">Required. A <see langword="Double" /> value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A <see langword="Double" /> value that represents the value passed by using the <see langword="To" /> keyword.</param>
      <param name="StepValue">Required. A <see langword="Double" /> value that represents the value passed by using the <see langword="Step" /> keyword.</param>
      <returns>
        <see langword="True" /> if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)">
      <summary>Performs an addition (+) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The sum of <paramref name="o1" /> and <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)">
      <summary>Performs a bitwise <see langword="And" /> operation.</summary>
      <param name="obj1">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="obj2">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>1 if both <paramref name="obj1" /> and <paramref name="obj2" /> evaluate to 1; otherwise, 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)">
      <summary>Performs a bitwise <see langword="Or" /> operation.</summary>
      <param name="obj1">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="obj2">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>0 if both <paramref name="obj1" /> and <paramref name="obj2" /> evaluate to 0; otherwise, 1.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)">
      <summary>Performs an <see langword="Xor" /> operation.</summary>
      <param name="obj1">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="obj2">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>A numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)">
      <summary>Performs a division (/) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The full quotient of <paramref name="o1" /> divided by <paramref name="o2" />, including any remainder.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)">
      <summary>Returns a boxed primitive value. This method is used to prevent copying structures multiple times.</summary>
      <param name="o">Required. Any expression.</param>
      <returns>The primitive value of <paramref name="o" /> typed as object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)">
      <summary>Performs an integer division (\) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The integer quotient of <paramref name="o1" /> divided by <paramref name="o2" />, which discards any remainder and retains only the integer portion.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>Performs a <see langword="Like" /> comparison.</summary>
      <param name="vLeft">Required. Any expression.</param>
      <param name="vRight">Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.</param>
      <param name="CompareOption">Required. A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> value that specifies that the operation use either text or binary comparison.</param>
      <returns>
        <see langword="True" /> if the string representation of the value in <paramref name="vLeft" /> satisfies the pattern that is contained in <paramref name="vRight" />; otherwise, <see langword="False" />. <see langword="True" /> if both <paramref name="vLeft" /> and <paramref name="vRight" /> are <see langword="Nothing" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)">
      <summary>Performs a modulus (<see langword="Mod" />) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The remainder after <paramref name="o1" /> is divided by <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)">
      <summary>Performs a multiplication (*) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The product of <paramref name="o1" /> and <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)">
      <summary>Performs a unary minus (-) operation.</summary>
      <param name="obj">Required. Any numeric expression.</param>
      <returns>The negative value of <paramref name="obj" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)">
      <summary>Performs a <see langword="Not" /> operation.</summary>
      <param name="obj">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>For <see langword="Boolean" /> operations, <see langword="False" /> if <paramref name="obj" /> is <see langword="True" />; otherwise, <see langword="True" />. For bitwise operations, 1 if <paramref name="obj" /> is 0; otherwise, 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)">
      <summary>Performs binary or text string comparison when given two objects.</summary>
      <param name="o1">Required. Any expression.</param>
      <param name="o2">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>Value  

 Condition  

 -1  


               <paramref name="o1" /> is less than <paramref name="o2" />.  

 0  


               <paramref name="o1" /> is equal to <paramref name="o2" />.  

 1  


               <paramref name="o1" /> is greater than <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)">
      <summary>Performs a unary plus (+) operation.</summary>
      <param name="obj">Required. Any numeric expression.</param>
      <returns>The value of <paramref name="obj" />. (The sign of the <paramref name="obj" /> is unchanged.)</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)">
      <summary>Performs an exponent (^) operation.</summary>
      <param name="obj1">Required. Any numeric expression.</param>
      <param name="obj2">Required. Any numeric expression.</param>
      <returns>The result of <paramref name="obj1" /> raised to the power of <paramref name="obj2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)">
      <summary>Performs an arithmetic left shift (&lt;&lt;) operation.</summary>
      <param name="o1">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</param>
      <param name="amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</param>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="o1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)">
      <summary>Performs an arithmetic right shift (&gt;&gt;) operation.</summary>
      <param name="o1">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</param>
      <param name="amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</param>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="o1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)">
      <summary>Performs a string concatenation (&amp;) operation.</summary>
      <param name="vLeft">Required. Any expression.</param>
      <param name="vRight">Required. Any expression.</param>
      <returns>A string representing the concatenation of <paramref name="vLeft" /> and <paramref name="vRight" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)">
      <summary>Performs a subtraction (-) operation.</summary>
      <param name="o1">Required. Any numeric expression.</param>
      <param name="o2">Required. Any numeric expression.</param>
      <returns>The difference between <paramref name="o1" /> and <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)">
      <summary>Performs an <see langword="Xor" /> comparison.</summary>
      <param name="obj1">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="obj2">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>A <see langword="Boolean" /> or numeric value. For a <see langword="Boolean" /> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <see langword="Boolean" /> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>Provides late-bound math operators, such as <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> and <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" />, which the Visual Basic compiler uses internally.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic addition (+) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The sum of <paramref name="Left" /> and <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic <see langword="And" /> operator.</summary>
      <param name="Left">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="Right">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>For <see langword="Boolean" /> operations, <see langword="True" /> if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to <see langword="True" />; otherwise, <see langword="False" />. For bitwise operations, 1 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 1; otherwise, 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic equal (=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> and <paramref name="Right" /> are equal; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic greater-than (&gt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> is greater than <paramref name="Right" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic greater-than or equal-to (&gt;=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> is greater than or equal to <paramref name="Right" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic less-than (&lt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> is less than <paramref name="Right" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic less-than or equal-to (&lt;=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> is less than or equal to <paramref name="Right" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic not-equal (&lt;&gt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>
        <see langword="True" /> if <paramref name="Left" /> is not equal to <paramref name="Right" />; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>Performs binary or text string comparison when given two strings.</summary>
      <param name="Left">Required. Any <see langword="String" /> expression.</param>
      <param name="Right">Required. Any <see langword="String" /> expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>Value  

 Condition  

 -1  


               <paramref name="Left" /> is less than <paramref name="Right" />.  

 0  


               <paramref name="Left" /> is equal to <paramref name="Right" />.  

 1  


               <paramref name="Left" /> is greater than <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic concatenation (&amp;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <returns>A string representing the concatenation of <paramref name="Left" /> and <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic equals (=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded equals operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic greater-than (&gt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded greater-than operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic greater-than or equal-to (&gt;=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded greater-than or equal-to operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic less-than (&lt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded less-than operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic less-than or equal-to (&lt;=) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded less-than or equal-to operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic not-equal (&lt;&gt;) operator.</summary>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive string comparison; otherwise, <see langword="False" />.</param>
      <returns>The result of the overloaded not-equal operator. <see langword="False" /> if operator overloading is not supported.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic division (/) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The full quotient of <paramref name="Left" /> divided by <paramref name="Right" />, including any remainder.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic exponent (^) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The result of <paramref name="Left" /> raised to the power of <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])">
      <summary>Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.</summary>
      <param name="vbOp">The user-defined operator.</param>
      <param name="Arguments">Argument values to pass to the user-defined operator.</param>
      <returns>The result returned from the user-defined operator.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic integer division (\) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The integer quotient of <paramref name="Left" /> divided by <paramref name="Right" />, which discards any remainder and retains only the integer portion.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic arithmetic left shift (&lt;&lt;) operator.</summary>
      <param name="Operand">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</param>
      <param name="Amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</param>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic <see langword="Mod" /> operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The remainder after <paramref name="Left" /> is divided by <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic multiply (*) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The product of <paramref name="Left" /> and <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>Represents the Visual Basic unary minus (-) operator.</summary>
      <param name="Operand">Required. Any numeric expression.</param>
      <returns>The negative value of <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>Represents the Visual Basic <see langword="Not" /> operator.</summary>
      <param name="Operand">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>For <see langword="Boolean" /> operations, <see langword="False" /> if <paramref name="Operand" /> is <see langword="True" />; otherwise, <see langword="True" />. For bitwise operations, 1 if <paramref name="Operand" /> is 0; otherwise, 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic <see langword="Or" /> operator.</summary>
      <param name="Left">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="Right">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>For <see langword="Boolean" /> operations, <see langword="False" /> if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to <see langword="False" />; otherwise, <see langword="True" />. For bitwise operations, 0 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 0; otherwise, 1.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>Represents the Visual Basic unary plus (+) operator.</summary>
      <param name="Operand">Required. Any numeric expression.</param>
      <returns>The value of <paramref name="Operand" />. (The sign of the <paramref name="Operand" /> is unchanged.)</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic arithmetic right shift (&gt;&gt;) operator.</summary>
      <param name="Operand">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" />, or <see langword="ULong" />).</param>
      <param name="Amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <see langword="Integer" /> or widen to <see langword="Integer" />.</param>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic subtraction (-) operator.</summary>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
      <returns>The difference between <paramref name="Left" /> and <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic <see langword="Xor" /> operator.</summary>
      <param name="Left">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <param name="Right">Required. Any <see langword="Boolean" /> or numeric expression.</param>
      <returns>A <see langword="Boolean" /> or numeric value. For a <see langword="Boolean" /> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <see langword="Boolean" /> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>Specifies that the current <see langword="Option Compare" /> setting should be passed as the default value for an argument.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>The Visual Basic compiler emits this helper class to indicate (for Visual Basic debugging) which comparison option, binary or text, is being used</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" /> class. This is a helper method.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>Provides helpers for the Visual Basic <see langword="Err" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>Performs the work for the <see langword="Clear" /> method of the <see langword="Err" /> object. A helper method.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>Performs the work for the <see langword="Raise" /> method of the <see langword="Err" /> object. A helper method.</summary>
      <param name="hr">An integer value that identifies the nature of the error. Visual Basic errors are in the range 0-65535; the range 0-512 is reserved for system errors; the range 513-65535 is available for user-defined errors.</param>
      <returns>An <see cref="T:System.Exception" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.EndApp">
      <summary>Closes all files for the calling assembly and stops the process.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>The Visual Basic compiler uses this helper method to capture exceptions in the <see langword="Err" /> object.</summary>
      <param name="ex">The <see cref="T:System.Exception" /> object to be caught.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>The Visual Basic compiler uses this helper method to capture exceptions in the <see langword="Err" /> object.</summary>
      <param name="ex">The <see cref="T:System.Exception" /> object to be caught.</param>
      <param name="lErl">The line number of the exception.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ShortType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromObject(System.Object)">
      <summary>Returns a <see langword="Short" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Short" /> value.</param>
      <returns>The <see langword="Short" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromString(System.String)">
      <summary>Returns a <see langword="Short" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Short" /> value.</param>
      <returns>The <see langword="Short" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.SingleType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object)">
      <summary>Returns a <see langword="Single" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Single" /> value.</param>
      <returns>The <see langword="Single" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Single" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="Single" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Single" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String)">
      <summary>Returns a <see langword="Single" /> value that corresponds to the specified string.</summary>
      <param name="Value">Required. String to convert to a <see langword="Single" /> value.</param>
      <returns>The <see langword="Single" /> value that corresponds to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="Single" /> value that corresponds to the specified string and number format information.</summary>
      <param name="Value">Required. String to convert to a <see langword="Single" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="Single" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>This class provides attributes that are applied to the standard module construct when it is emitted to Intermediate Language (IL). It is not intended to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>The Visual Basic compiler uses this class internally when initializing static local members; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" /> class.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>Returns the state of the static local member's initialization flag (initialized or not).</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StringType">
      <summary>This class has been deprecated as of Visual Basic 2005.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromBoolean(System.Boolean)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified <see langword="Boolean" />.</summary>
      <param name="Value">Required. <see langword="Boolean" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromByte(System.Byte)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified <see langword="Byte" />.</summary>
      <param name="Value">Required. <see langword="Byte" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromChar(System.Char)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified <see langword="Char" />.</summary>
      <param name="Value">Required. <see langword="Char" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDate(System.DateTime)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified date.</summary>
      <param name="Value">Required. Date to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified <see langword="Decimal" />.</summary>
      <param name="Value">Required. <see langword="Decimal" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Decimal" /> and number format information.</summary>
      <param name="Value">Required. <see langword="Decimal" /> to convert to a <see langword="String" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Double" />.</summary>
      <param name="Value">Required. <see langword="Double" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Double" /> and number format information.</summary>
      <param name="Value">Required. <see langword="Double" /> to convert to a <see langword="String" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromInteger(System.Int32)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Integer" />.</summary>
      <param name="Value">Required. <see langword="Integer" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromLong(System.Int64)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Int64" /> (64-bit integer).</summary>
      <param name="Value">Required. <see langword="Int64" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromObject(System.Object)">
      <summary>Returns a <see langword="String" /> value that corresponds to the specified object.</summary>
      <param name="Value">Required. Object to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromShort(System.Int16)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Int16" /> (16-bit integer).</summary>
      <param name="Value">Required. <see langword="Int616" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Single" />.</summary>
      <param name="Value">Required. <see langword="Single" /> to convert to a <see langword="String" /> value.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>Returns a <see langword="String" /> value that corresponds to a specified <see langword="Single" /> and number format information.</summary>
      <param name="Value">Required. <see langword="Single" /> to convert to a <see langword="String" /> value.</param>
      <param name="NumberFormat">A <see cref="T:System.Globalization.NumberFormatInfo" /> object that defines how numeric values are formatted and displayed, depending on the culture.</param>
      <returns>The <see langword="String" /> value corresponding to <paramref name="Value" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.MidStmtStr(System.String@,System.Int32,System.Int32,System.String)">
      <summary>Overwrites the <paramref name="sDest" /> parameter with the contents of the <paramref name="sInsert" /> parameter.</summary>
      <param name="sDest">Required. String variable to modify.</param>
      <param name="StartPosition">Required. Location in the <paramref name="sDest" /> parameter to begin overwriting from. The index is 1-based.</param>
      <param name="MaxInsertLength">Required. Maximum number of characters from the <paramref name="sInsert" /> parameter to use, starting from the first character.</param>
      <param name="sInsert">Required. String value to overwrite the <paramref name="sDest" /> parameter with.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrCmp(System.String,System.String,System.Boolean)">
      <summary>Compares two strings.</summary>
      <param name="sLeft">Required. String to compare with <paramref name="sRight" />.</param>
      <param name="sRight">Required. String to compare with <paramref name="sLeft" />.</param>
      <param name="TextCompare">Required. <see langword="True" /> to perform a case-insensitive comparison; otherwise <see langword="False" />.</param>
      <returns>Value  

 Condition  

 zero  

 The two strings are equal.  

 less than zero  


               <paramref name="sLeft" /> is less than <paramref name="sRight" />.  

 greater than zero  


               <paramref name="sLeft" /> is greater than <paramref name="sRight" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLike(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Compares the parameters <paramref name="Source" /> and <paramref name="Pattern" /> and returns the same results as the <see langword="Like" /> operator.</summary>
      <param name="Source">Required. Any <see langword="String" /> expression.</param>
      <param name="Pattern">Any <see langword="String" /> expression conforming to the pattern-matching conventions described in Like Operator.</param>
      <param name="CompareOption">Specifies how to compare strings to patterns, according to the <see cref="T:Microsoft.VisualBasic.CompareMethod" />. Can be <see langword="vbBinaryCompare" /> for binary comparison or <see langword="vbTextCompare" /> for comparison based on a case-insensitive text sort order determined by your system's <see langword="LocaleID" /> value.</param>
      <returns>A <see langword="Boolean" /> value indicating whether or not the string satisfies the pattern. If the value in string satisfies the pattern contained in pattern, result is <see langword="True" />. If the string does not satisfy the pattern, result is <see langword="False" />. If both string and pattern are empty strings, the result is <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeBinary(System.String,System.String)">
      <summary>Compares the parameters <paramref name="Source" /> and <paramref name="Pattern" /> and returns the same results as the <see langword="Like" /> operator, using binary comparison.</summary>
      <param name="Source">Required. Any <see langword="String" /> expression.</param>
      <param name="Pattern">Required. Any <see langword="String" /> expression conforming to the pattern-matching conventions described in Like Operator.</param>
      <returns>A <see langword="Boolean" /> value indicating whether or not the string satisfies the pattern. If the value in string satisfies the pattern contained in pattern, result is <see langword="True" />. If the string does not satisfy the pattern, result is <see langword="False" />. If both string and pattern are empty strings, the result is <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">
      <summary>Compares the parameters <paramref name="Source" /> and <paramref name="Pattern" /> and returns the same results as the <see langword="Like" /> operator, using text comparison.</summary>
      <param name="Source">Required. Any <see langword="String" /> expression.</param>
      <param name="Pattern">Required. Any <see langword="String" /> expression conforming to the pattern-matching conventions described in Like Operator.</param>
      <returns>A <see langword="Boolean" /> value indicating whether or not the string satisfies the pattern. If the value in string satisfies the pattern contained in pattern, result is <see langword="True" />. If the string does not satisfy the pattern, result is <see langword="False" />. If both string and pattern are empty strings, the result is <see langword="True" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>Contains utilities that the Visual Basic compiler uses.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>Used by the Visual Basic compiler as a helper for <see langword="Redim" />.</summary>
      <param name="arySrc">The array to be copied.</param>
      <param name="aryDest">The destination array.</param>
      <returns>The copied array.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>The <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" /> module contains procedures used to interact with objects, applications, and systems.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>Executes a method on an object, or sets or returns a property on an object.</summary>
      <param name="Instance">Required. <see langword="Object" />. A pointer to the object exposing the property or method.</param>
      <param name="MethodName">Required. <see langword="String" />. A string expression containing the name of the property or method on the object.</param>
      <param name="UseCallType">Required. An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> representing the type of procedure being called. The value of <see langword="CallType" /> can be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />.</param>
      <param name="Arguments">Optional. <see langword="ParamArray" />. A parameter array containing the arguments to be passed to the property or method being called.</param>
      <returns>Executes a method on an object, or sets or returns a property on an object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression can be evaluated as a number.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a Boolean value indicating whether an expression can be evaluated as a number.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>Returns a string value containing the system data type name of a variable.</summary>
      <param name="VbName">Required. A string variable containing a Visual Basic type name.</param>
      <returns>Returns a string value containing the system data type name of a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>Returns a string value containing data type information about a variable.</summary>
      <param name="Expression">Required. <see langword="Object" /> variable. If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</param>
      <returns>Returns a string value containing data type information about a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>Returns a string value containing the Visual Basic data type name of a variable.</summary>
      <param name="SystemName">Required. String variable containing a type name used by the common language runtime.</param>
      <returns>Returns a string value containing the Visual Basic data type name of a variable.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>The <see langword="Constants" /> module contains miscellaneous constants. These constants can be used anywhere in your code.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbort">
      <summary>Indicates that the <see langword="Abort" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore">
      <summary>Indicates that the <see langword="Abort" />, <see langword="Retry" />, and <see langword="Ignore" /> buttons will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbApplicationModal">
      <summary>Indicates that the message box will be displayed as a modal dialog box when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArchive">
      <summary>Indicates that the file has changed since the last backup operation for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>Indicates that the type of a variant object is an array. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>Represents a backspace character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>Specifies that a binary comparison should be performed when comparison functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>Indicates that the type of a variant object is <see langword="Boolean" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>Indicates that the type of a variant object is <see langword="Byte" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCancel">
      <summary>Indicates that the <see langword="Cancel" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>Represents a carriage-return character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCritical">
      <summary>Indicates that the critical message icon will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>Represents a carriage-return character combined with a linefeed character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>Indicates that the type of a variant object is <see langword="Currency" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>Indicates that the type of a variant object is <see langword="Date" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>Indicates that the type of a variant object is <see langword="Decimal" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton1">
      <summary>Indicates that the leftmost button is selected as the default button when the message box appears.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton2">
      <summary>Indicates that the second button from the left is selected as the default button when the message box appears.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton3">
      <summary>Indicates that the third button from the left is selected as the default button when the message box appears.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDirectory">
      <summary>Indicates that the file is a directory or folder for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>Indicates that the type of a variant object is <see langword="Double" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>Indicates that the type of a variant object is <see langword="Empty" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbExclamation">
      <summary>Indicates that the exclamation icon will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>Indicates that a <see langword="Boolean" /> value of <see langword="False" /> should be used when number-formatting functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>Indicates that the first week of the year that has at least four days should be used when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>Indicates that the first full week of the year should be used when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>Indicates that the week of the year in which January 1 occurs should be used when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>Represents a form-feed character for print functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>Specifies that Friday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>Indicates that the general date format for the current culture should be used when the <see langword="FormatDateTime" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>Specifies that a property value should be retrieved when the <see langword="CallByName" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHidden">
      <summary>Indicates that the file is a hidden file for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHide">
      <summary>Indicates that the window style is hidden for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHiragana">
      <summary>Indicates Hiragana characters should be converted to Katakana characters when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbIgnore">
      <summary>Indicates that the <see langword="Ignore" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInformation">
      <summary>Indicates that the information icon will display when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>Indicates that the type of a variant object is <see langword="Integer" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbKatakana">
      <summary>Indicates that Katakana characters should be converted to Hiragana characters when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>Indicates that a property value should be set to an object instance when the <see langword="CallByName" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>Represents a linefeed character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLinguisticCasing">
      <summary>Indicates that characters should be converted to use linguistic rules for casing instead of file system rules for casing to when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>Indicates the type of a variant object is <see langword="Long" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>Indicates that the long date format for the current culture should be used when the <see langword="FormatDateTime" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>Indicates that the long time format for the current culture should be used when the <see langword="FormatDateTime" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLowerCase">
      <summary>Indicates that characters should be converted to lowercase when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus">
      <summary>Indicates that the window style is maximized with focus for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>Specifies that a method should be called when the <see langword="CallByName" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus">
      <summary>Indicates that the window style is minimized with focus for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus">
      <summary>Indicates that the window style is minimized without focus for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>Specifies that Monday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxHelp">
      <summary>Indicates that the <see langword="Help" /> button will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight">
      <summary>Indicates that text will be right-aligned when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading">
      <summary>Indicates that right-to-left reading text (Hebrew and Arabic systems) will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground">
      <summary>Indicates that the message box will display in the foreground when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNarrow">
      <summary>Indicates that wide (double-byte) characters should be converted to narrow (single-byte) characters when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>Represents a newline character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNo">
      <summary>Indicates that the <see langword="No" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormal">
      <summary>Indicates that the file is a normal file for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalFocus">
      <summary>Indicates that the window style is normal with focus for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus">
      <summary>Indicates that the window style is normal without focus for the invoked program when the <see langword="Shell" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>Indicates that the type of a variant object is <see langword="Nothing" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>Represents a null character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>Represents a zero-length string for print and display functions, and for calling external procedures.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>Indicates that the type of a variant object is <see langword="Object" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>Represents the object error number. User-defined error numbers should be greater than this value.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOK">
      <summary>Indicates that the <see langword="OK" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKCancel">
      <summary>Indicates that the <see langword="OK" /> and <see langword="Cancel" /> buttons will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKOnly">
      <summary>Indicates that only the <see langword="OK" /> button will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbProperCase">
      <summary>Indicates that the first letter of every word in a string should be converted to uppercase and the remaining characters to lowercase when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbQuestion">
      <summary>Indicates that the question icon will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbReadOnly">
      <summary>Indicates that the file is a read-only file for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetry">
      <summary>Indicates that the <see langword="Retry" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetryCancel">
      <summary>Indicates that the <see langword="Retry" /> and <see langword="Cancel" /> buttons will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>Specifies that Saturday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>Indicates that a property value should be set when the <see langword="CallByName" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>Indicates that the short-date format for the current culture should be used when the <see langword="FormatDateTime" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>Indicates that the short-time format for the current culture should be used when the <see langword="FormatDateTime" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSimplifiedChinese">
      <summary>Indicates that characters should be converted to Simplified Chinese when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>Indicates that the type of a variant object is <see langword="Single" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>Indicates that the type of a variant object is <see langword="String" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>Specifies that Sunday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystem">
      <summary>Indicates that the file is a system file for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystemModal">
      <summary>Indicates that the message box will be displayed as a modal dialog box when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>Represents a tab character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>Indicates that a text comparison should be performed when comparison functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>Specifies that Thursday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTraditionalChinese">
      <summary>Indicates that characters should be converted to Traditional Chinese when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>Indicates that a <see langword="Boolean" /> value of <see langword="True" /> should be used when number-formatting functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>Specifies that Tuesday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUpperCase">
      <summary>Indicates that characters should be converted to uppercase when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>Indicates that the default <see langword="Boolean" /> value should be used when number-formatting functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>Indicates that the type of a variant object is a user-defined type. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>Indicates that the week specified by your system as the first week of the year should be used when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>Indicates that the day specified by your system as the first day of the week should be used when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>Indicates that the type of a variant object is <see langword="Variant" />. Returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>Represents a carriage-return character for print functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVolume">
      <summary>Indicates the volume label file attribute for file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>Specifies that Wednesday should be used as the first day of the week when date-related functions are called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWide">
      <summary>Indicates that narrow (single-byte) characters should be converted to wide (double-byte) characters when the <see langword="StrConv" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYes">
      <summary>Indicates that the <see langword="Yes" /> button was clicked in a message box. Returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNo">
      <summary>Indicates that the <see langword="Yes" /> and <see langword="No" /> buttons will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNoCancel">
      <summary>Indicates that the <see langword="Yes" />, <see langword="No" />, and <see langword="Cancel" /> buttons will be displayed when the <see langword="MsgBox" /> function is called.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>The <see langword="ControlChars" /> module contains constants used as control characters. These constants can be used anywhere in your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.ControlChars" /> class.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>Represents a backspace character (<see langword="vbBack" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>Represents a carriage return character (<see langword="vbCr" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>Represents a carriage return/linefeed character combination (<see langword="vbCrLf" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>Represents a form feed character for print functions (<see langword="vbFormFeed" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>Represents a line feed character (<see langword="vbLf" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>Represents a new line character (<see langword="vbNewLine" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>Represents a null character (<see langword="vbNullChar" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>Represents a double-quote character.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>Represents a tab character (<see langword="vbTab" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>Represents a vertical tab character (<see langword="vbVerticalTab" />).</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
      <returns>An object whose type at run time is the requested target type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
      <summary>Converts an object to the specified generic type.</summary>
      <param name="Expression">The object to convert.</param>
      <typeparam name="TargetType">The type to which to convert the object.</typeparam>
      <returns>An object statically typed as the requested generic type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>Returns the error message that corresponds to a given error number.</summary>
      <returns>The error message that corresponds to the most recent run-time error.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> is out of range.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>Returns the error message that corresponds to a given error number.</summary>
      <param name="ErrorNumber">Optional. Any valid error number.</param>
      <returns>The error message that corresponds to a given error number.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> is out of range.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Decimal" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Double" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Short" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Integer" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Long" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Object" /> or any valid numeric expression. If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Single" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the hexadecimal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Decimal" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Double" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Short" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Integer" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Long" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Object" /> or any valid numeric expression. If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>Returns the integer portion of a number.</summary>
      <param name="Number">Required. A number of type <see langword="Single" /> or any valid numeric expression.</param>
      <returns>The integer portion of a number.</returns>
      <exception cref="T:System.ArgumentNullException">Number is not specified.</exception>
      <exception cref="T:System.ArgumentException">Number is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
      <summary>Returns a string representing the octal value of a number.</summary>
      <param name="Number">Required. Any valid numeric expression or <see langword="String" /> expression.</param>
      <returns>A string representing the octal value of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>Returns a <see langword="String" /> representation of a number.</summary>
      <param name="Number">Required. An <see langword="Object" /> containing any valid numeric expression.</param>
      <returns>A <see langword="String" /> representation of a number.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> is not specified.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Number" /> is not a numeric type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <param name="Expression">Required. Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value. If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The numbers contained in a string as a numeric value of appropriate type.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> is too large.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <param name="Expression">Required. Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value. If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The numbers contained in a string as a numeric value of appropriate type.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> is too large.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <param name="InputStr">Required. Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value. If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The numbers contained in a string as a numeric value of appropriate type.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> is too large.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>The <see langword="DateAndTime" /> module contains the procedures and properties used in date and time operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>Returns a value containing a date and time value to which a specified time interval has been added.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the time interval you want to add.</param>
      <param name="Number">Required. Floating-point expression representing the number of intervals you want to add. It can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.</param>
      <param name="DateValue">Required. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.</param>
      <returns>A value containing a date and time value to which a specified time interval has been added.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> is not coercible to <see langword="Date" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> is not valid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>Returns a value containing a date and time value to which a specified time interval has been added.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the time interval you want to add.</param>
      <param name="Number">Required. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.</param>
      <param name="DateValue">Required. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.</param>
      <returns>A value containing a date and time value to which a specified time interval has been added.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> is not coercible to <see langword="Date" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> is not valid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns a long value specifying the number of time intervals between two <see langword="Date" /> values.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.</param>
      <param name="Date1">Required. The first date/time value you want to use in the calculation.</param>
      <param name="Date2">Required. The second date/time value you want to use in the calculation.</param>
      <param name="DayOfWeek">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> enumeration that specifies the first week of the year. If not specified, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> is used.</param>
      <returns>A long value specifying the number of time intervals between two <see langword="Date" /> values.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />, <paramref name="Date2" />, or <paramref name="DayofWeek" /> is out of range.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> or <paramref name="Date2" /> is of an invalid type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns a long value specifying the number of time intervals between two <see langword="Date" /> values.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.</param>
      <param name="Date1">Required. The first date/time value you want to use in the calculation.</param>
      <param name="Date2">Required. The second date/time value you want to use in the calculation.</param>
      <param name="DayOfWeek">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> enumeration that specifies the first week of the year. If not specified, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> is used.</param>
      <returns>A long value specifying the number of time intervals between two <see langword="Date" /> values.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />, <paramref name="Date2" />, or <paramref name="DayofWeek" /> is out of range.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> or <paramref name="Date2" /> is of an invalid type.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns an integer value containing the specified component of a given <see langword="Date" /> value.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the part of the date/time value you want to return.</param>
      <param name="DateValue">Required. The <see langword="Date" /> value that you want to evaluate.</param>
      <param name="FirstDayOfWeekValue">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> is used.</param>
      <param name="FirstWeekOfYearValue">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> enumeration that specifies the first week of the year. If not specified, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> is used.</param>
      <returns>An integer value containing the specified component of a given <see langword="Date" /> value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> is not valid.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> is not coercible to <see langword="Date" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns an value containing the specified component of a given <see langword="Date" /> value.</summary>
      <param name="Interval">Required. A <see cref="T:Microsoft.VisualBasic.DateInterval" /> enumeration value or a string expression representing the part of the date/time value you want to return.</param>
      <param name="DateValue">Required. A <see langword="Date" /> value that you want to evaluate.</param>
      <param name="DayOfWeek">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> enumeration that specifies the first week of the year. If not specified, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> is used.</param>
      <returns>An integer value containing the specified component of a given <see langword="Date" /> value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> is invalid.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> is not coercible to <see langword="Date" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see langword="Date" /> value representing a specified year, month, and day, with the time information set to midnight (00:00:00).</summary>
      <param name="Year">Required. Integer expression from 1 through 9999. However, values below this range are also accepted. If <paramref name="Year" /> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the "Remarks" section below. If <paramref name="Year" /> is less than 1, it is subtracted from the current year.</param>
      <param name="Month">Required. Integer expression from 1 through 12. However, values outside this range are also accepted. The value of <paramref name="Month" /> is offset by 1 and applied to January of the calculated year. In other words, (<paramref name="Month" /> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:  
 If <paramref name="Month" /> is 1, the result is January of the calculated year.  
 If <paramref name="Month" /> is 0, the result is December of the previous year.  
 If <paramref name="Month" /> is -1, the result is November of the previous year.  
 If <paramref name="Month" /> is 13, the result is January of the following year.</param>
      <param name="Day">Required. Integer expression from 1 through 31. However, values outside this range are also accepted. The value of <paramref name="Day" /> is offset by 1 and applied to the first day of the calculated month. In other words, (<paramref name="Day" /> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:  
 If <paramref name="Day" /> is 1, the result is the first day of the calculated month.  
 If <paramref name="Day" /> is 0, the result is the last day of the previous month.  
 If <paramref name="Day" /> is -1, the result is the penultimate day of the previous month.  
 If <paramref name="Day" /> is past the end of the current month, the result is the appropriate day of the following month. For example, if <paramref name="Month" /> is 4 and <paramref name="Day" /> is 31, the result is May 1.</param>
      <returns>A <see langword="Date" /> value representing a specified year, month, and day, with the time information set to midnight (00:00:00).</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>Returns or sets a string value representing the current date according to your system.</summary>
      <returns>Returns or sets a string value representing the current date according to your system.</returns>
      <exception cref="T:System.InvalidCastException">Invalid format used to set the value of <see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>Returns a <see langword="Date" /> value containing the date information represented by a string, with the time information set to midnight (00:00:00).</summary>
      <param name="StringDate">Required. string expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.</param>
      <returns>A <see langword="Date" /> value containing the date information represented by a string, with the time information set to midnight (00:00:00).</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringDate" /> includes invalid time information.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>Returns an integer value from 1 through 31 representing the day of the month.</summary>
      <param name="DateValue">Required. A <see langword="Date" /> value from which you want to extract the day.</param>
      <returns>An integer value from 1 through 31 representing the day of the month.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>Returns an integer value from 0 through 23 representing the hour of the day.</summary>
      <param name="TimeValue">Required. A <see langword="Date" /> value from which you want to extract the hour.</param>
      <returns>An integer value from 0 through 23 representing the hour of the day.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>Returns an integer value from 0 through 59 representing the minute of the hour.</summary>
      <param name="TimeValue">Required. A <see langword="Date" /> value from which you want to extract the minute.</param>
      <returns>An integer value from 0 through 59 representing the minute of the hour.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>Returns an integer value from 1 through 12 representing the month of the year.</summary>
      <param name="DateValue">Required. A <see langword="Date" /> value from which you want to extract the month.</param>
      <returns>An integer value from 1 through 12 representing the month of the year.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>Returns a string value containing the name of the specified month.</summary>
      <param name="Month">Required. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <paramref name="Month" /> is 13, <c>MonthName</c> returns an empty string.</param>
      <param name="Abbreviate">Optional. <see langword="True" /> to abbreviate the month name; otherwise, <see langword="False" />. The default is <see langword="False" />.</param>
      <returns>A string value containing the name of the specified month.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Month" /> is less than 1 or greater than 13.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>Returns a value containing the current date and time according to your system.</summary>
      <returns>The current date and time according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>Returns an integer value from 0 through 59 representing the second of the minute.</summary>
      <param name="TimeValue">Required. A <see langword="Date" /> value from which you want to extract the second.</param>
      <returns>An integer value from 0 through 59 representing the second of the minute.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>Returns or sets a <see langword="Date" /> value containing the current time of day according to your system.</summary>
      <returns>Returns or sets a <see langword="Date" /> value containing the current time of day according to your system.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>Returns a <see cref="T:System.Double" /> value representing the number of seconds elapsed since midnight.</summary>
      <returns>A value representing the number of seconds elapsed since midnight.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see langword="Date" /> value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.</summary>
      <param name="Hour">Required. Integer expression from 0 through 23. However, values outside this range are also accepted.</param>
      <param name="Minute">Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Minute" /> is added to the calculated hour, so a negative value specifies minutes before that hour.</param>
      <param name="Second">Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Second" /> is added to the calculated minute, so a negative value specifies seconds before that minute.</param>
      <returns>A <see langword="Date" /> value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.</returns>
      <exception cref="T:System.ArgumentException">An argument is outside the range -2,147,483,648 through 2,147,483,647</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Calculated time is less than negative 24 hours.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>Returns or sets a string value representing the current time of day according to your system.</summary>
      <returns>Returns or sets a string value representing the current time of day according to your system.</returns>
      <exception cref="T:System.InvalidCastException">Invalid format used to set the value of <see langword="TimeString" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>Returns a <see langword="Date" /> value containing the time information represented by a string, with the date information set to January 1 of the year 1.</summary>
      <param name="StringTime">Required. A string expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.</param>
      <returns>A <see langword="Date" /> value containing the time information represented by a string, with the date information set to January 1 of the year 1.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringTime" /> includes invalid date information.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>Returns or sets a <see langword="Date" /> value containing the current date according to your system.</summary>
      <returns>Returns or sets a <see langword="Date" /> value containing the current date according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Returns an integer value containing a number representing the day of the week.</summary>
      <param name="DateValue">Required. A <see langword="Date" /> value for which you want to determine the day of the week.</param>
      <param name="DayOfWeek">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> is used.</param>
      <returns>An integer value containing a number representing the day of the week.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="DayOfWeek" /> is less than 0 or more than 7.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Returns a string value containing the name of the specified weekday.</summary>
      <param name="Weekday">Required. Integer. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <paramref name="FirstDayOfWeekValue" />.</param>
      <param name="Abbreviate">Optional. <see langword="Boolean" /> value that indicates if the weekday name is to be abbreviated. If omitted, the default is <see langword="False" />, which means the weekday name is not abbreviated.</param>
      <param name="FirstDayOfWeekValue">Optional. A value chosen from the <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> enumeration that specifies the first day of the week. If not specified, <see langword="FirstDayOfWeek.System" /> is used.</param>
      <returns>A string value containing the name of the specified weekday.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Weekday" /> is less than 1 or greater than 7, or <paramref name="FirstDayOfWeekValue" /> is less than 0 or greater than 7.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>Returns an integer value from 1 through 9999 representing the year.</summary>
      <param name="DateValue">Required. A <see langword="Date" /> value from which you want to extract the year.</param>
      <returns>An integer value from 1 through 9999 representing the year.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>Indicates how to display dates when calling the <see langword="FormatDateTime" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>For real numbers, displays a date and time. If the number has no fractional part, displays only a date. If the number has no integer part, displays time only. Date and time display is determined by your computer's regional settings. This member is equivalent to the Visual Basic constant <see langword="vbGeneralDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>Displays a date using the long-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant <see langword="vbLongDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>Displays a time using the long-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant <see langword="vbLongTime" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>Displays a date using the short-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant <see langword="vbShortDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>Displays a time using the short-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant <see langword="vbShortTime" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>Indicates how to determine and format date intervals when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>Day of month (1 through 31)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>Day of year (1 through 366)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>Hour (0 through 23)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>Minute (0 through 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>Month (1 through 12)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>Quarter of year (1 through 4)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>Second (0 through 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>Day of week (1 through 7)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>Week of year (1 through 53)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>Year</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DueDate">
      <summary>Indicates when payments are due when calling financial methods.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.BegOfPeriod">
      <summary>Falls at the beginning of the date interval</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.EndOfPeriod">
      <summary>Falls at the end of the date interval</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>The <see langword="ErrObject" /> module contains properties and procedures used to identify and handle run-time errors using the <see langword="Err" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>Clears all property settings of the <see langword="Err" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error. Read/write.</summary>
      <returns>Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error. Read/write.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>Gets an integer indicating the line number of the last executed statement.</summary>
      <returns>The line number of the last executed statement.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>Returns the exception representing the error that occurred.</summary>
      <returns>The exception representing the error that occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.LastDllError">
      <summary>Gets a system error code produced by a call to a dynamic-link library (DLL).</summary>
      <returns>A system error code produced by a call to a dynamic-link library (DLL).</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>Returns or sets a numeric value specifying an error. Read/write.</summary>
      <returns>Returns or sets a numeric value specifying an error. Read/write.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is greater than 65535.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)">
      <summary>Generates a run-time error; can be used instead of the <see langword="Error" /> statement.</summary>
      <param name="Number">Required. <see langword="Long" /> integer that identifies the nature of the error. Visual Basic errors are in the range 0-65535; the range 0-512 is reserved for system errors; the range 513-65535 is available for user-defined errors. When setting the <see langword="Number" /> property to your own error code in a class module, you add your error code number to the <see langword="vbObjectError" /> constant. For example, to generate the error number 513, assign <c>vbObjectError + 513</c> to the <see langword="Number" /> property.</param>
      <param name="Source">Optional. <see langword="String" /> expression naming the object or application that generated the error. When setting this property for an object, use the form <c>project</c>.<c>class</c>. If <paramref name="Source" /> is not specified, the process ID of the current Visual Basic project is used.</param>
      <param name="Description">Optional. <see langword="String" /> expression describing the error. If unspecified, the value in the <see langword="Number" /> property is examined. If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the <see langword="Error" /> function is used as the <see langword="Description" /> property. If there is no Visual Basic error corresponding to the <see langword="Number" /> property, the "Application-defined or object-defined error" message is used.</param>
      <param name="HelpFile">Optional. The fully qualified path to the Help file in which help on this error can be found. If unspecified, Visual Basic uses the fully qualified drive, path, and file name of the Visual Basic Help file.</param>
      <param name="HelpContext">Optional. The context ID identifying a topic within <paramref name="HelpFile" /> that provides help for the error. If omitted, the Visual Basic Help-file context ID for the error corresponding to the <see langword="Number" /> property is used, if it exists.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.FileAttribute">
      <summary>Indicates the file attributes to use when calling file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Archive">
      <summary>File has changed since last backup. This member is equivalent to the Visual Basic constant <see langword="vbArchive" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Directory">
      <summary>Directory or folder. This member is equivalent to the Visual Basic constant <see langword="vbDirectory" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Hidden">
      <summary>Hidden. This member is equivalent to the Visual Basic constant <see langword="vbHidden" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Normal">
      <summary>Normal (default for <see langword="Dir" /> and <see langword="SetAttr" />). No special characteristics apply to this file. This member is equivalent to the Visual Basic constant <see langword="vbNormal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.ReadOnly">
      <summary>Read only. This member is equivalent to the Visual Basic constant <see langword="vbReadOnly" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.System">
      <summary>System file. This member is equivalent to the Visual Basic constant <see langword="vbSystem" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Volume">
      <summary>Volume label. This attribute is not valid when used with <see langword="SetAttr" />. This member is equivalent to the Visual Basic constant <see langword="vbVolume" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption">
      <summary>Specifies what should be done when a directory that is to be deleted contains files or directories.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.DeleteAllContents">
      <summary>Delete the contents of the directory along with the directory. Default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.ThrowIfDirectoryNonEmpty">
      <summary>Throw an <see cref="T:System.IO.IOException" /> if the directory is not empty. The <see langword="Data" /> property of the exception lists the file(s) that could not be deleted.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FieldType">
      <summary>Indicates whether text fields are delimited or fixed width.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.Delimited">
      <summary>Indicates that the fields are delimited.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.FixedWidth">
      <summary>Indicates that the fields are fixed width.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FileSystem">
      <summary>Provides properties and methods for working with drives, files, and directories.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)">
      <summary>Combines two paths and returns a properly formatted path.</summary>
      <param name="baseDirectory">
        <see langword="String" />. First path to be combined.</param>
      <param name="relativePath">
        <see langword="String" />. Second path to be combined.</param>
      <returns>The combination of the specified paths.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseDirectory" /> or <paramref name="relativePath" /> are malformed paths.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)">
      <summary>Copies the contents of a directory to another directory.</summary>
      <param name="sourceDirectoryName">The directory to be copied.</param>
      <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> or <paramref name="sourceDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The source directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The source path and target path are the same.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A folder name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A destination file exists but cannot be accessed.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Copies the contents of a directory to another directory.</summary>
      <param name="sourceDirectoryName">The directory to be copied.</param>
      <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> or <paramref name="sourceDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The source directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The source path and target path are the same.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A folder name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A destination file exists but cannot be accessed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> is set to <see langword="UIOption.AllDialogs" /> and the user cancels the operation, or one or more files in the directory cannot be copied.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Copies the contents of a directory to another directory.</summary>
      <param name="sourceDirectoryName">The directory to be copied.</param>
      <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Specifies what should be done if the user clicks Cancel during the operation. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> or <paramref name="sourceDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The source directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The source path and target path are the same.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A folder name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A destination file exists but cannot be accessed.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> is set to <see langword="UIOption.AllDialogs" /> and the user cancels the operation, or one or more files in the directory cannot be copied.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
      <summary>Copies the contents of a directory to another directory.</summary>
      <param name="sourceDirectoryName">The directory to be copied.</param>
      <param name="destinationDirectoryName">The location to which the directory contents should be copied.</param>
      <param name="overwrite">
        <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> or <paramref name="sourceDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The source directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The source path and target path are the same.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A folder name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A destination file exists but cannot be accessed.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)">
      <summary>Copies a file to a new location.</summary>
      <param name="sourceFileName">The file to be copied.</param>
      <param name="destinationFileName">The location to which the file should be copied.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> contains path information.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> or <paramref name="sourceFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">A file in the target directory with the same name is in use.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Copies a file to a new location.</summary>
      <param name="sourceFileName">The file to be copied.</param>
      <param name="destinationFileName">The location to which the file should be copied.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> contains path information.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> or <paramref name="sourceFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The destination file exists and <paramref name="overwrite" /> is set to <see langword="False" />.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Copies a file to a new location.</summary>
      <param name="sourceFileName">The file to be copied.</param>
      <param name="destinationFileName">The location to which the file should be copied.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Specifies what should be done if the user clicks Cancel during the operation. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> contains path information.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> or <paramref name="sourceFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The destination file exists and <paramref name="overwrite" /> is set to <see langword="False" />.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="UICancelOption" /> is set to <see langword="ThrowException" />, and the user has canceled the operation or an unspecified I/O error occurs.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Copies a file to a new location.</summary>
      <param name="sourceFileName">The file to be copied.</param>
      <param name="destinationFileName">The location to which the file should be copied.</param>
      <param name="overwrite">
        <see langword="True" /> if existing files should be overwritten; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> contains path information.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> or <paramref name="sourceFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The destination file exists and <paramref name="overwrite" /> is set to <see langword="False" />.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)">
      <summary>Creates a directory.</summary>
      <param name="directory">Name and location of the directory.</param>
      <exception cref="T:System.ArgumentException">The directory name is malformed. For example, it contains illegal characters or is only white space.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The directory name is too long.</exception>
      <exception cref="T:System.NotSupportedException">The directory name is only a colon (:).</exception>
      <exception cref="T:System.IO.IOException">The parent directory of the directory to be created is read-only</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have permission to create the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory">
      <summary>Gets or sets the current directory.</summary>
      <returns>The current directory for file I/O operations.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is not valid.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)">
      <summary>Deletes a directory.</summary>
      <param name="directory">Directory to be deleted.</param>
      <param name="onDirectoryNotEmpty">Specifies what should be done when a directory that is to be deleted contains files or directories. Default is <see langword="DeleteDirectoryOption.DeleteAllContents" />.</param>
      <exception cref="T:System.ArgumentException">The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist or is a file.</exception>
      <exception cref="T:System.IO.IOException">A file in the directory or subdirectory is in use.</exception>
      <exception cref="T:System.NotSupportedException">The directory name contains a colon (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have required permissions.</exception>
      <exception cref="T:System.OperationCanceledException">The user cancels the operation or the directory cannot be deleted.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>Deletes a directory.</summary>
      <param name="directory">Directory to be deleted.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Specifies whether or not the deleted file should be sent to the Recycle Bin. Default is <see langword="RecycleOption.DeletePermanently" />.</param>
      <exception cref="T:System.ArgumentException">The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist or is a file.</exception>
      <exception cref="T:System.IO.IOException">A file in the directory or subdirectory is in use.</exception>
      <exception cref="T:System.NotSupportedException">The directory name contains a colon (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have required permissions.</exception>
      <exception cref="T:System.OperationCanceledException">The user cancels the operation or the directory cannot be deleted.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Deletes a directory.</summary>
      <param name="directory">Directory to be deleted.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Specifies whether or not the deleted file should be sent to the Recycle Bin. Default is <see langword="RecycleOption.DeletePermanently" />.</param>
      <param name="onUserCancel">Specifies whether to throw an exception if the user clicks Cancel.</param>
      <exception cref="T:System.ArgumentException">The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist or is a file.</exception>
      <exception cref="T:System.IO.IOException">A file in the directory or subdirectory is in use.</exception>
      <exception cref="T:System.NotSupportedException">The directory name contains a colon (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.Security.SecurityException">The user does not have required permissions.</exception>
      <exception cref="T:System.OperationCanceledException">The user cancels the operation or the directory cannot be deleted.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)">
      <summary>Deletes a file.</summary>
      <param name="file">Name and path of the file to be deleted.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.IOException">The file is in use.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have permission to delete the file or the file is read-only.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>Deletes a file.</summary>
      <param name="file">Name and path of the file to be deleted.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Whether or not the deleted file should be sent to the Recycle Bin. Default is <see langword="RecycleOption.DeletePermanently" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.IOException">The file is in use.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have permission to delete the file or the file is read-only.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Deletes a file.</summary>
      <param name="file">Name and path of the file to be deleted.</param>
      <param name="showUI">Whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Whether or not the deleted file should be sent to the Recycle Bin. Default is <see langword="RecycleOption.DeletePermanently" />.</param>
      <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.IO.IOException">The file is in use.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have permission to delete the file or the file is read-only.</exception>
      <exception cref="T:System.OperationCanceledException">The user cancelled the operation and <paramref name="onUserCancel" /> is set to <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)">
      <summary>Returns <see langword="True" /> if the specified directory exists.</summary>
      <param name="directory">Path of the directory.</param>
      <returns>
        <see langword="True" /> if the directory exists; otherwise <see langword="False" />. This method also returns <see langword="False" /> if the parameter represents the name and path of a file rather than a directory.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives">
      <summary>Returns a read-only collection of all available drive names.</summary>
      <returns>A read-only collection of all available drives as <see cref="T:System.IO.DriveInfo" /> objects.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)">
      <summary>Returns <see langword="True" /> if the specified file exists.</summary>
      <param name="file">Name and path of the file.</param>
      <returns>Returns <see langword="True" /> if the file exists; otherwise this method returns <see langword="False" />. This method also returns <see langword="False" /> if the parameter represents the path of a directory rather than a file.</returns>
      <exception cref="T:System.ArgumentException">The name of the file ends with a backslash (\).</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)">
      <summary>Returns a read-only collection of strings representing the names of files containing the specified text.</summary>
      <param name="directory">The directory to be searched.</param>
      <param name="containsText">The search text.</param>
      <param name="ignoreCase">
        <see langword="True" /> if the search should be case-sensitive; otherwise <see langword="False" />. Default is <see langword="True" />.</param>
      <param name="searchType">Whether to include subfolders. Default is <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <returns>Read-only collection of the names of files containing the specified text.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with <c>\.&lt;/code&gt;).</c></exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The specified directory points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">The specified directory path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Returns a read-only collection of strings representing the names of files containing the specified text.</summary>
      <param name="directory">The directory to be searched.</param>
      <param name="containsText">The search text.</param>
      <param name="ignoreCase">
        <see langword="True" /> if the search should be case-sensitive; otherwise <see langword="False" />. Default is <see langword="True" />.</param>
      <param name="searchType">Whether to include subfolders. Default is <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="fileWildcards">Pattern to be matched.</param>
      <returns>Read-only collection of the names of files containing the specified text.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with <c>\.&lt;/code&gt;).</c></exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The specified directory points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">The specified directory path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)">
      <summary>Returns a collection of strings representing the path names of subdirectories within a directory.</summary>
      <param name="directory">Name and path of directory.</param>
      <returns>Read-only collection of the path names of subdirectories within the specified directory.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The specified directory points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Returns a collection of strings representing the path names of subdirectories within a directory.</summary>
      <param name="directory">Name and path of directory.</param>
      <param name="searchType">Whether to include subfolders. Default is <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="wildcards">Pattern to match names.</param>
      <returns>Read-only collection of the path names of subdirectories within the specified directory.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the specified wildcard characters is <see langword="Nothing" />, an empty string, or contains only spaces.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The specified directory points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)">
      <summary>Returns a <see cref="T:System.IO.DirectoryInfo" /> object for the specified path.</summary>
      <param name="directory">
        <see langword="String" />. Path of directory.</param>
      <returns>
        <see cref="T:System.IO.DirectoryInfo" /> object for the specified path.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">The directory path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)">
      <summary>Returns a <see cref="T:System.IO.DriveInfo" /> object for the specified drive.</summary>
      <param name="drive">Drive to be examined.</param>
      <returns>
        <see cref="T:System.IO.DriveInfo" /> object for the specified drive.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="drive" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)">
      <summary>Returns a <see cref="T:System.IO.FileInfo" /> object for the specified file.</summary>
      <param name="file">Name and path of the file.</param>
      <returns>
        <see cref="T:System.IO.FileInfo" /> object for the specified file</returns>
      <exception cref="T:System.ArgumentException">The path name is malformed. For example, it contains invalid characters or is only white space. The file name has a trailing slash mark.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.NotSupportedException">The path contains a colon in the middle of the string.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path is too long.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks ACL (access control list) access to the file.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)">
      <summary>Returns a read-only collection of strings representing the names of files within a directory.</summary>
      <param name="directory">Directory to be searched.</param>
      <returns>Read-only collection of file names from the specified directory.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory to search does not exist.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Returns a read-only collection of strings representing the names of files within a directory.</summary>
      <param name="directory">Directory to be searched.</param>
      <param name="searchType">Whether to include subfolders. Default is <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="wildcards">Pattern to be matched.</param>
      <returns>Read-only collection of file names from the specified directory.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory to search does not exist.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> points to an existing file.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user lacks necessary permissions.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)">
      <summary>Parses the file name out of the path provided.</summary>
      <param name="path">Required. Path to be parsed. <see langword="String" />.</param>
      <returns>The file name from the specified path.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)">
      <summary>Returns the parent path of the provided path.</summary>
      <param name="path">Path to be examined.</param>
      <returns>The parent path of the provided path.</returns>
      <exception cref="T:System.ArgumentException">Path does not have a parent path because it is a root path.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName">
      <summary>Creates a uniquely named zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>
        <see langword="String" /> containing the full path of the temporary file.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)">
      <summary>Moves a directory from one location to another.</summary>
      <param name="sourceDirectoryName">Path of the directory to be moved.</param>
      <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> or <paramref name="destinationDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The source is a root directory or The source path and the target path are the same.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Moves a directory from one location to another.</summary>
      <param name="sourceDirectoryName">Path of the directory to be moved.</param>
      <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> or <paramref name="destinationDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The target directory already exists and <paramref name="overwrite" /> is set to <see langword="False" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Moves a directory from one location to another.</summary>
      <param name="sourceDirectoryName">Path of the directory to be moved.</param>
      <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> or <paramref name="destinationDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="onUserCancel" /> is set to <see langword="ThrowException" /> and a subdirectory of the file cannot be copied.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> is set to <see langword="ThrowException" />, and the user cancels the operation, or the operation cannot be completed.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)">
      <summary>Moves a directory from one location to another.</summary>
      <param name="sourceDirectoryName">Path of the directory to be moved.</param>
      <param name="destinationDirectoryName">Path of the directory to which the source directory is being moved.</param>
      <param name="overwrite">
        <see langword="True" /> if existing directories should be overwritten; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> or <paramref name="destinationDirectoryName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">The target directory already exists and <paramref name="overwrite" /> is set to <see langword="False" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.InvalidOperationException">The operation is cyclic.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)">
      <summary>Moves a file to a new location.</summary>
      <param name="sourceFileName">Path of the file to be moved.</param>
      <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Moves a file to a new location.</summary>
      <param name="sourceFileName">Path of the file to be moved.</param>
      <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Moves a file to a new location.</summary>
      <param name="sourceFileName">Path of the file to be moved.</param>
      <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
      <param name="showUI">Specifies whether to visually track the operation's progress. Default is <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Specifies whether or not an exception is thrown when the user cancels the operation. Default is <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> is set to <see langword="ThrowException" />, and either the user has cancelled the operation or an unspecified I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)">
      <summary>Moves a file to a new location.</summary>
      <param name="sourceFileName">Path of the file to be moved.</param>
      <param name="destinationFileName">Path of the directory into which the file should be moved.</param>
      <param name="overwrite">
        <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The source file is not valid or does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)">
      <summary>The <see langword="OpenTextFieldParser" /> method allows you to create a <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object,  which provides a way to easily and efficiently parse structured text files, such as logs. The <see langword="TextFieldParser" /> object can be used to read both delimited and fixed-width files.</summary>
      <param name="file">The file to be opened with the <see langword="TextFieldParser" />.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> to read the specified file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> property is assigned the text contained in the line.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
      <summary>The <see langword="OpenTextFieldParser" /> method allows you to create a <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object, which provides a way to easily and efficiently parse structured text files, such as logs. The <see langword="TextFieldParser" /> object can be used to read both delimited and fixed-width files.</summary>
      <param name="file">The file to be opened with the <see langword="TextFieldParser" />.</param>
      <param name="fieldWidths">Widths of the fields.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> to read the specified file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> property is assigned the text contained in the line.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])">
      <summary>The <see langword="OpenTextFieldParser" /> method allows you to create a <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object, which provides a way to easily and efficiently parse structured text files, such as logs. The <see langword="TextFieldParser" /> object can be used to read both delimited and fixed-width files.</summary>
      <param name="file">The file to be opened with the <see langword="TextFieldParser" />.</param>
      <param name="delimiters">Delimiters for the fields.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> to read the specified file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> property is assigned the text contained in the line.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)">
      <summary>Opens a <see cref="T:System.IO.StreamReader" /> object to read from a file.</summary>
      <param name="file">File to be read.</param>
      <returns>
        <see cref="T:System.IO.StreamReader" /> object to read from the file</returns>
      <exception cref="T:System.ArgumentException">The file name ends with a backslash (\).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to read from the file.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)">
      <summary>Opens a <see cref="T:System.IO.StreamReader" /> object to read from a file.</summary>
      <param name="file">File to be read.</param>
      <param name="encoding">The encoding to use for the file contents. Default is ASCII.</param>
      <returns>
        <see cref="T:System.IO.StreamReader" /> object to read from the file</returns>
      <exception cref="T:System.ArgumentException">The file name ends with a backslash (\).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to read from the file.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)">
      <summary>Opens a <see cref="T:System.IO.StreamWriter" /> object to write to the specified file.</summary>
      <param name="file">File to be written to.</param>
      <param name="append">
        <see langword="True" /> to append to the contents of the file; <see langword="False" /> to overwrite the contents of the file. Default is <see langword="False" />.</param>
      <returns>
        <see cref="T:System.IO.StreamWriter" /> object to write to the specified file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.ArgumentException">The file name ends with a trailing slash.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Opens a <see cref="T:System.IO.StreamWriter" /> to write to the specified file.</summary>
      <param name="file">File to be written to.</param>
      <param name="append">
        <see langword="True" /> to append to the contents in the file; <see langword="False" /> to overwrite the contents of the file. Default is <see langword="False" />.</param>
      <param name="encoding">Encoding to be used in writing to the file. Default is ASCII.</param>
      <returns>
        <see cref="T:System.IO.StreamWriter" /> object to write to the specified file.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.ArgumentException">The file name ends with a trailing slash.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)">
      <summary>Returns the contents of a file as a byte array.</summary>
      <param name="file">File to be read.</param>
      <returns>
        <see langword="Byte" /> array containing the contents of the file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)">
      <summary>Returns the contents of a text file as a <see langword="String" />.</summary>
      <param name="file">Name and path of the file to read.</param>
      <returns>
        <see langword="String" /> containing the contents of the file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)">
      <summary>Returns the contents of a text file as a <see langword="String" />.</summary>
      <param name="file">Name and path of the file to read.</param>
      <param name="encoding">Character encoding to use in reading the file. Default is UTF-8.</param>
      <returns>
        <see langword="String" /> containing the contents of the file.</returns>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)">
      <summary>Renames a directory.</summary>
      <param name="directory">Path and name of directory to be renamed.</param>
      <param name="newName">New name for directory.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> contains path information.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> is <see langword="Nothing" />.  
-or-  
<paramref name="newName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">There is an existing file or directory with the name specified in <paramref name="newName" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)">
      <summary>Renames a file.</summary>
      <param name="file">File to be renamed.</param>
      <param name="newName">New name of file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> contains path information or ends with a backslash (\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.  
-or-  
<paramref name="newName" /> is <see langword="Nothing" /> or an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory does not exist.</exception>
      <exception cref="T:System.IO.IOException">There is an existing file or directory with the name specified in <paramref name="newName" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The user does not have required permission.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
      <summary>Writes data to a binary file.</summary>
      <param name="file">Path and name of the file to be written to.</param>
      <param name="data">Data to be written to the file.</param>
      <param name="append">
        <see langword="True" /> to append to the file contents; <see langword="False" /> to overwrite the file contents. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)">
      <summary>Writes text to a file.</summary>
      <param name="file">File to be written to.</param>
      <param name="text">Text to be written to file.</param>
      <param name="append">
        <see langword="True" /> to append to the contents of the file; <see langword="False" /> to overwrite the contents of the file.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
      <summary>Writes text to a file.</summary>
      <param name="file">File to be written to.</param>
      <param name="text">Text to be written to file.</param>
      <param name="append">
        <see langword="True" /> to append to the contents of the file; <see langword="False" /> to overwrite the contents of the file.</param>
      <param name="encoding">What encoding to use when writing to file.</param>
      <exception cref="T:System.ArgumentException">The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\.\); it ends with a trailing slash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
      <exception cref="T:System.IO.IOException">The file is in use by another process, or an I/O error occurs.</exception>
      <exception cref="T:System.IO.PathTooLongException">The path exceeds the system-defined maximum length.</exception>
      <exception cref="T:System.NotSupportedException">A file or directory name in the path contains a colon (:) or is in an invalid format.</exception>
      <exception cref="T:System.OutOfMemoryException">There is not enough memory to write the string to buffer.</exception>
      <exception cref="T:System.Security.SecurityException">The user lacks necessary permissions to view the path.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
      <summary>The exception that is thrown when the <see cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" /> method cannot parse a row using the specified format.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> describing the error.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> object that is the cause of the current exception. If the <see cref="P:System.Exception.InnerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class with a specified error message and a line number.</summary>
      <param name="message">The message for the exception.</param>
      <param name="lineNumber">The line number of the malformed line.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> class with a specified error message, a line number, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message for the exception.</param>
      <param name="lineNumber">The line number of the malformed line.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that is the cause of the current exception. If the <see cref="P:System.Exception.InnerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.MalformedLineException.LineNumber">
      <summary>Gets the line number of the malformed line.</summary>
      <returns>The line number of the malformed line.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.RecycleOption">
      <summary>Specifies whether a file should be deleted permanently or placed in the Recycle Bin.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently">
      <summary>Delete the file or directory permanently. Default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin">
      <summary>Send the file or directory to the Recycle Bin.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SearchOption">
      <summary>Specifies whether to search all or only top-level directories.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories">
      <summary>Search the specified directory and all subdirectories within it. Default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchTopLevelOnly">
      <summary>Search only the specified directory and exclude subdirectories.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SpecialDirectories">
      <summary>Provides properties for accessing commonly referenced directories.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.SpecialDirectories.#ctor">
      <summary>Returns an instance of the <see cref="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.AllUsersApplicationData">
      <summary>Gets a path name pointing to the Application Data directory for the all users.</summary>
      <returns>The path to the Application Data directory for the all users.</returns>
      <exception cref="T:System.Security.Permissions.EnvironmentPermission">Controls access to system and user environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.CurrentUserApplicationData">
      <summary>Gets a path name pointing to the Application Data directory for the current user.</summary>
      <returns>The path to the Application Data directory for the current user.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Desktop">
      <summary>Gets a path name pointing to the Desktop directory.</summary>
      <returns>The path to the Desktop directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyDocuments">
      <summary>Gets a path name pointing to the My Documents directory.</summary>
      <returns>The path to the My Documents directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyMusic">
      <summary>Gets a path name pointing to the My Music directory.</summary>
      <returns>The path to the My Music directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyPictures">
      <summary>Gets a path name pointing to the My Pictures directory.</summary>
      <returns>The path to the My Pictures directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.ProgramFiles">
      <summary>Gets a path pointing to the Program Files directory.</summary>
      <returns>The path to the Program Files directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Programs">
      <summary>Gets a path name pointing to the Programs directory.</summary>
      <returns>The path to the Programs directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Temp">
      <summary>Gets a path name pointing to the Temp directory.</summary>
      <returns>The path to the Temp directory.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">The path is empty, usually because the operating system does not support the directory.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
      <summary>Provides methods and properties for parsing structured text files.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. The stream to be parsed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> cannot be read from.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. The stream to be parsed.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. The character encoding to use if encoding is not determined from file. Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> cannot be read from.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. The stream to be parsed.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. The character encoding to use if encoding is not determined from file. Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Indicates whether to look for byte order marks at the beginning of the file. Default is <see langword="True" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> cannot be read from.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. The stream to be parsed.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. The character encoding to use if encoding is not determined from file. Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Indicates whether to look for byte order marks at the beginning of the file. Default is <see langword="True" />.</param>
      <param name="leaveOpen">
        <see langword="Boolean" />. Indicates whether to leave <paramref name="stream" /> open when the <see langword="TextFieldParser" /> object is closed. Default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> cannot be read from.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />. The <see cref="T:System.IO.TextReader" /> stream to be parsed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="path">
        <see langword="String" />. The complete path of the file to be parsed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is an empty string.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="path">
        <see langword="String" />. The complete path of the file to be parsed.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. The character encoding to use if encoding is not determined from file. Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see langword="TextFieldParser" /> class.</summary>
      <param name="path">
        <see langword="String" />. The complete path of the file to be parsed.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. The character encoding to use if encoding is not determined from file. Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Indicates whether to look for byte order marks at the beginning of the file. Default is <see langword="True" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
      <summary>Closes the current <see langword="TextFieldParser" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
      <summary>Defines comment tokens. A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</summary>
      <returns>A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</returns>
      <exception cref="T:System.ArgumentException">A comment token includes white space.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
      <summary>Defines the delimiters for a text file.</summary>
      <returns>A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</returns>
      <exception cref="T:System.ArgumentException">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
      <summary>Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</summary>
      <param name="disposing">Boolean. <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
      <summary>Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</summary>
      <returns>
        <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
      <summary>Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</summary>
      <returns>The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
      <summary>Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</summary>
      <returns>The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
      <summary>Denotes the width of each column in the text file being parsed.</summary>
      <returns>An integer array that contains the width of each column in the text file that is being parsed.</returns>
      <exception cref="T:System.ArgumentException">A width value in any location other than the last entry of the array is less than or equal to zero.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize">
      <summary>Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
      <summary>Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</summary>
      <returns>
        <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
      <summary>Returns the current line number, or returns -1 if no more characters are available in the stream.</summary>
      <returns>The current line number.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
      <summary>Reads the specified number of characters without advancing the cursor.</summary>
      <param name="numberOfChars">
        <see langword="Int32" />. Number of characters to read. Required.</param>
      <returns>A string that contains the specified number of characters read.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfChars" /> is less than 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
      <summary>Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</summary>
      <returns>An array of strings that contains field values for the current line.</returns>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">A field cannot be parsed by using the specified format.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
      <summary>Returns the current line as a string and advances the cursor to the next line.</summary>
      <returns>The current line from the file or stream.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
      <summary>Reads the remainder of the text file and returns it as a string.</summary>
      <returns>The remaining text from the file or stream.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
      <summary>Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</summary>
      <param name="delimiters">Array of type <see langword="String" />.</param>
      <exception cref="T:System.ArgumentException">A delimiter is zero-length.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
      <summary>Sets the delimiters for the reader to the specified values.</summary>
      <param name="fieldWidths">Array of <see langword="Integer" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose">
      <summary>Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
      <summary>Indicates whether the file to be parsed is delimited or fixed-width.</summary>
      <returns>A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
      <summary>Indicates whether leading and trailing white space should be trimmed from field values.</summary>
      <returns>
        <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UICancelOption">
      <summary>Specifies whether an exception is thrown if the user clicks Cancel during an operation.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.DoNothing">
      <summary>Do nothing when the user clicks Cancel.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException">
      <summary>Throw an exception when the user clicks Cancel.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UIOption">
      <summary>Specifies which dialog boxes to show when copying, deleting, or moving files or directories.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.AllDialogs">
      <summary>Show progress dialog box and any error dialog boxes.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs">
      <summary>Only show error dialog boxes and hide progress dialog boxes. Default.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileSystem">
      <summary>The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)">
      <summary>Changes the current directory or folder. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function. For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</summary>
      <param name="Path">Required. A string expression that identifies which directory or folder becomes the new default directory or folder. <paramref name="Path" /> may include the drive. If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> is empty.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Invalid drive is specified, or drive is unavailable.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)">
      <summary>Changes the current drive.</summary>
      <param name="Drive">Required. String expression that specifies an existing drive. If you supply a zero-length string (""), the current drive does not change. If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</param>
      <exception cref="T:System.IO.IOException">Invalid drive is specified, or drive is unavailable.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)">
      <summary>Changes the current drive.</summary>
      <param name="Drive">Required. String expression that specifies an existing drive. If you supply a zero-length string (""), the current drive does not change. If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</param>
      <exception cref="T:System.IO.IOException">Invalid drive is specified, or drive is unavailable.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir">
      <summary>Returns a string representing the current path. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />. For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
      <returns>A string representing the current path.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)">
      <summary>Returns a string representing the current path. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />. For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
      <param name="Drive">Optional. <see langword="Char" /> expression that specifies an existing drive. If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</param>
      <returns>A string representing the current path.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir">
      <summary>Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function. See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</summary>
      <returns>A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function. See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</summary>
      <param name="PathName">Optional. A string expression that specifies a file name, directory or folder name, or drive volume label. A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</param>
      <param name="Attributes">Optional. Enumeration or numeric expression whose value specifies file attributes. If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</param>
      <returns>A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)">
      <summary>Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</summary>
      <param name="FileNumber">Required. An <see langword="Integer" /> that contains any valid file number.</param>
      <returns>A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</returns>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)">
      <summary>Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function. See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</summary>
      <param name="FileNumber">Required. <see langword="Integer" />. Any valid file number.</param>
      <returns>The following enumeration values indicate the file access mode:  
  Value  

  Mode  

  1  

 <see langword="OpenMode.Input" /> 2  

 <see langword="OpenMode.Output" /> 4  

 <see langword="OpenMode.Random" /> 8  

 <see langword="OpenMode.Append" /> 32  

 <see langword="OpenMode.Binary" /></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])">
      <summary>Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function. <see langword="My" /> gives you better productivity and performance in file I/O operations. See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</summary>
      <param name="FileNumbers">Optional. Parameter array of 0 or more channels to be closed.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)">
      <summary>Copies a file. The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />. See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</summary>
      <param name="Source">Required. A string expression that specifies the name of the file to be copied. <paramref name="Source" /> may include the directory or folder, and drive, of the source file.</param>
      <param name="Destination">Required. A string expression that specifies the destination file name. <paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</exception>
      <exception cref="T:System.IO.IOException">File is already open.</exception>
      <exception cref="T:System.IO.FileNotFoundException">File does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)">
      <summary>Returns a <see langword="Date" /> value that indicates the date and time a file was written to. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />. For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></summary>
      <param name="PathName">Required. A string expression that specifies a file name. <paramref name="PathName" /> may include the directory or folder, and the drive.</param>
      <returns>
        <see langword="Date" /> value that indicates the date and time a file was created or last modified.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="PathName" /> is invalid or contains wildcards.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Target file does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <param name="ArrayIsDynamic">Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</param>
      <param name="StringIsFixedLength">Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <param name="StringIsFixedLength">Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
      <summary>Reads data from an open disk file into a variable. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
      <summary>Reads data from an open disk file into a variable.  The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name into which data is read.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)">
      <summary>Returns a value that specifies the length of a file in bytes. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />. For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</summary>
      <param name="PathName">Required. A string expression that specifies a file. <paramref name="PathName" /> may include the directory or folder, and the drive.</param>
      <returns>The length of a file in bytes.</returns>
      <exception cref="T:System.IO.FileNotFoundException">File does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
      <summary>Opens a file for input or output. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number. Use the <see langword="FreeFile" /> function to obtain the next available file number.</param>
      <param name="FileName">Required. A string expression that specifies a file name - may include directory or folder, and drive.</param>
      <param name="Mode">Required. Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />. For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</param>
      <param name="Access">Optional. Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />. Defaults to <see langword="ReadWrite" />. For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</param>
      <param name="Share">Optional. Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />. Defaults to <see langword="Lock Read Write" />. For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</param>
      <param name="RecordLength">Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.</param>
      <exception cref="T:System.ArgumentException">Record length is negative (and not equal to -1).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <param name="ArrayIsDynamic">Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</param>
      <param name="StringIsFixedLength">Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <param name="StringIsFixedLength">Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)">
      <summary>Writes data from a variable to a disk file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</exception>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
      <summary>Writes data from a variable to a disk file.  The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Valid variable name that contains data written to disk.</param>
      <param name="RecordNumber">Optional. Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)">
      <summary>Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="RecordWidth">Required. Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started. If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line. The default value for <paramref name="RecordWidth" /> is 0.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FreeFile">
      <summary>Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</summary>
      <returns>An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</returns>
      <exception cref="T:System.IO.IOException">More than 255 files are in use.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)">
      <summary>Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="PathName">Required. A string expression that specifies a file, directory, or folder name. <paramref name="PathName" /> can include the directory or folder, and the drive.</param>
      <returns>A bitwise combination of the enumeration values.</returns>
      <exception cref="T:System.IO.IOException">
        <paramref name="Pathname" /> is invalid or contains wildcards.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Target file does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)">
      <summary>Reads data from an open sequential file and assigns the data to variables.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Value">Required. Variable that is assigned the values read from the file - cannot be an array or object variable.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)">
      <summary>Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="CharCount">Required. Any valid numeric expression specifying the number of characters to read.</param>
      <returns>A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</returns>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> does not exist.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCount" /> &lt; 0 or &gt; 214.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)">
      <summary>Deletes files from a disk. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</summary>
      <param name="PathName">Required. A string expression that specifies one or more file names to be deleted. <paramref name="PathName" /> can include the directory or folder, and the drive.</param>
      <exception cref="T:System.IO.IOException">Target file(s) open.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Target file(s) not found.</exception>
      <exception cref="T:System.Security.SecurityException">Permission denied.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)">
      <summary>Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <returns>Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</returns>
      <exception cref="T:System.IO.EndOfStreamException">End of file reached.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)">
      <summary>Returns a value that specifies the current read/write position in an open file.</summary>
      <param name="FileNumber">Required. Any valid <see langword="Integer" /> file number.</param>
      <returns>The current read/write position in an open file.</returns>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Record">Optional. Number of the only record or byte to lock or unlock.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="FromRecord">Optional. Number of the first record or byte to lock or unlock.</param>
      <param name="ToRecord">Optional. Number of the last record or byte to lock or unlock.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)">
      <summary>Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. An integer that contains a valid file number.</param>
      <returns>The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</returns>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)">
      <summary>Creates a new directory. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />. For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</summary>
      <param name="Path">Required. A string expression that identifies the directory to be created. The <paramref name="Path" /> may include the drive. If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> is not specified or is empty.</exception>
      <exception cref="T:System.Security.SecurityException">Permission denied.</exception>
      <exception cref="T:System.IO.IOException">Directory already exists.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])">
      <summary>Writes display-formatted data to a sequential file.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Output">Optional. Zero or more comma-delimited expressions to write to a file.  
 The <paramref name="Output" /> argument settings are:  
 <see langword="T:System.IO.IOException" />: File mode is invalid.  
 <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])">
      <summary>Writes display-formatted data to a sequential file.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Output">Optional. Zero or more comma-delimited expressions to write to a file.  
 The <paramref name="Output" /> argument settings are:  
 <see langword="T:System.IO.IOException" />: File mode is invalid.  
 <see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)">
      <summary>Renames a disk file or directory. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="OldPath">Required. A string expression that specifies the existing file name and location. <paramref name="OldPath" /> may include the directory, and drive, of the file.</param>
      <param name="NewPath">Required. A string expression that specifies the new file name and location. <paramref name="NewPath" /> may include directory and drive of the destination location. The file name specified by <paramref name="NewPath" /> cannot already exist.</param>
      <exception cref="T:System.ArgumentException">Path is invalid.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="OldPath" /> file does not exist.</exception>
      <exception cref="T:System.IO.IOException">Cannot rename to different device.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Reset">
      <summary>Closes all disk files opened by using the <see langword="FileOpen" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)">
      <summary>Removes an existing directory. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />. For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</summary>
      <param name="Path">Required. A string expression that identifies the directory or folder to be removed. <paramref name="Path" /> can include the drive. If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> is not specified or is empty.</exception>
      <exception cref="T:System.IO.IOException">Target directory contains files.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Directory does not exist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)">
      <summary>Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. An <see langword="Integer" /> that contains a valid file number.</param>
      <returns>A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</returns>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)">
      <summary>Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. An <see langword="Integer" /> that contains a valid file number.</param>
      <param name="Position">Required. Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>Sets attribute information for a file. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="PathName">Required. A string expression that specifies a file name. <paramref name="PathName" /> can include directory or folder, and drive.</param>
      <param name="Attributes">Required. Constant or numeric expression, whose sum specifies file attributes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Attribute" /> type is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)">
      <summary>Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</summary>
      <param name="Count">Required. The number of spaces to insert before displaying or printing the next expression in a list.</param>
      <returns>Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB">
      <summary>Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</summary>
      <returns>Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)">
      <summary>Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</summary>
      <param name="Column">Optional. The column number moved to before displaying or printing the next expression in a list. If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</param>
      <returns>Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="Record">Optional. Number of the only record or byte to lock or unlock</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
      <summary>Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function. The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />. For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Required. Any valid file number.</param>
      <param name="FromRecord">Optional. Number of the first record or byte to lock or unlock.</param>
      <param name="ToRecord">Optional. Number of the last record or byte to lock or unlock.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])">
      <summary>Writes data to a sequential file. Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</summary>
      <param name="FileNumber">Required. An <see langword="Integer" /> expression that contains any valid file number.</param>
      <param name="Output">Optional. One or more comma-delimited expressions to write to a file.</param>
      <exception cref="T:System.IO.IOException">File mode is invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])">
      <summary>Writes data to a sequential file. Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</summary>
      <param name="FileNumber">Required. An <see langword="Integer" /> expression that contains any valid file number.</param>
      <param name="Output">Optional. One or more comma-delimited expressions to write to a file.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Financial">
      <summary>The <see langword="Financial" /> module contains procedures used to perform financial operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Returns a value specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.</summary>
      <param name="Cost">Required. The initial cost of the asset.</param>
      <param name="Salvage">Required. The value of the asset at the end of its useful life.</param>
      <param name="Life">Required. The length of useful life of the asset.</param>
      <param name="Period">Required. The period for which asset depreciation is calculated.</param>
      <param name="Factor">Optional. The rate at which the balance declines. If omitted, 2 (double-declining method) is assumed.</param>
      <returns>The depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, or <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.</param>
      <param name="Pmt">Required. The payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.</param>
      <param name="PV">Optional. The present value (or lump sum) of a series of future payments. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <see langword="DueDate.EndOfPeriod" /> if payments are due at the end of the payment period, or <see langword="DueDate.BegOfPeriod" /> if payments are due at the beginning of the period. If omitted, <see langword="DueDate.EndOfPeriod" /> is assumed.</param>
      <returns>The future value of an annuity based on periodic, fixed payments and a fixed interest rate.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="Per">Required. The payment period in the range 1 through <paramref name="NPer" />.</param>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.</param>
      <param name="PV">Required. The present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.</param>
      <param name="FV">Optional. The future value or cash balance you want after you've made the final payment. For example, the future value of a loan is $0 because that's its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <returns>The interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" /> &lt;= 0 or <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)">
      <summary>Returns a value specifying the internal rate of return for a series of periodic cash flows (payments and receipts).</summary>
      <param name="ValueArray">Required. Array of <see langword="Double" /> specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).</param>
      <param name="Guess">Optional. Object specifying value you estimate will be returned by <see langword="IRR" />. If omitted, <paramref name="Guess" /> is 0.1 (10 percent).</param>
      <returns>The internal rate of return for a series of periodic cash flows (payments and receipts).</returns>
      <exception cref="T:System.ArgumentException">Array argument values are invalid or <paramref name="Guess" /> &lt;= -1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
      <summary>Returns a value specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).</summary>
      <param name="ValueArray">Required. Array of <see langword="Double" /> specifying cash-flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).</param>
      <param name="FinanceRate">Required. The interest rate paid as the cost of financing.</param>
      <param name="ReinvestRate">Required. The interest rate received on gains from cash reinvestment.</param>
      <returns>The modified internal rate of return for a series of periodic cash flows (payments and receipts).</returns>
      <exception cref="T:System.ArgumentException">Rank of <paramref name="ValueArray" /> does not equal 1, <paramref name="FinanceRate" /> = -1, or <paramref name="ReinvestRate" /> = -1</exception>
      <exception cref="T:System.DivideByZeroException">Division by zero has occurred.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="Pmt">Required. The payment to be made each period. Payments usually contain principal and interest that does not change over the life of the annuity.</param>
      <param name="PV">Required. The present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.</param>
      <param name="FV">Optional. The future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <returns>The number of periods for an annuity based on periodic fixed payments and a fixed interest rate.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Rate" /> = 0 and <paramref name="Pmt" /> = 0</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)">
      <summary>Returns a value specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.</summary>
      <param name="Rate">Required. The discount rate over the length of the period, expressed as a decimal.</param>
      <param name="ValueArray">Required. Array of <see langword="Double" /> specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).</param>
      <returns>The net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" /> is <see langword="Nothing" />, rank of <paramref name="ValueArray" /> &lt;&gt; 1, or <paramref name="Rate" /> = -1</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.</param>
      <param name="PV">Required. The present value (or lump sum) that a series of payments to be paid in the future is worth now. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.</param>
      <param name="FV">Optional. The future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <returns>The payment for an annuity based on periodic, fixed payments and a fixed interest rate.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> = 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="Per">Required. The payment period in the range 1 through <paramref name="NPer" />.</param>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.</param>
      <param name="PV">Required. The current value of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.</param>
      <param name="FV">Optional. The future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <returns>The principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" /> &lt;=0 or <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Returns a value specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.</summary>
      <param name="Rate">Required. The interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.</param>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.</param>
      <param name="Pmt">Required. The payment to be made each period. Payments usually contain principal and interest that does not change during the life of the annuity.</param>
      <param name="FV">Optional. The future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <returns>The present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
      <summary>Returns a value specifying the interest rate per period for an annuity.</summary>
      <param name="NPer">Required. The total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.</param>
      <param name="Pmt">Required. The payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.</param>
      <param name="PV">Required. The present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.</param>
      <param name="FV">Optional. The future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.</param>
      <param name="Due">Optional. Object of type <see cref="T:Microsoft.VisualBasic.DueDate" /> that specifies when payments are due. This argument must be either <c>DueDate.EndOfPeriod</c> if payments are due at the end of the payment period, or <c>DueDate.BegOfPeriod</c> if payments are due at the beginning of the period. If omitted, <c>DueDate.EndOfPeriod</c> is assumed.</param>
      <param name="Guess">Optional. The value you estimate is returned by <see langword="Rate" />. If omitted, <paramref name="Guess" /> is 0.1 (10 percent).</param>
      <returns>The interest rate per period for an annuity.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> &lt;= 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)">
      <summary>Returns a value specifying the straight-line depreciation of an asset for a single period.</summary>
      <param name="Cost">Required. The initial cost of the asset.</param>
      <param name="Salvage">Required. The value of the asset at the end of its useful life.</param>
      <param name="Life">Required. The length of the useful life of the asset.</param>
      <returns>The straight-line depreciation of an asset for a single period.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Life" /> = 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
      <summary>Returns a value specifying the sum-of-years digits depreciation of an asset for a specified period.</summary>
      <param name="Cost">Required. The initial cost of the asset.</param>
      <param name="Salvage">Required. The value of the asset at the end of its useful life.</param>
      <param name="Life">Required. The length of the useful life of the asset.</param>
      <param name="Period">Required. The period for which asset depreciation is calculated.</param>
      <returns>The sum-of-years digits depreciation of an asset for a specified period.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, or <paramref name="Period" /> &lt;=0.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>Friday This member is equivalent to the Visual Basic constant <see langword="vbFriday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>Monday This member is equivalent to the Visual Basic constant <see langword="vbMonday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>Saturday This member is equivalent to the Visual Basic constant <see langword="vbSaturday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>Sunday (default) This member is equivalent to the Visual Basic constant <see langword="vbSunday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>The first day of the week as specified in your system settings This member is equivalent to the Visual Basic constant <see langword="vbUseSystemDayOfWeek" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>Thursday This member is equivalent to the Visual Basic constant <see langword="vbThursday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>Tuesday This member is equivalent to the Visual Basic constant <see langword="vbTuesday" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>Wednesday This member is equivalent to the Visual Basic constant <see langword="vbWednesday" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>The first week that has at least four days in the new year. This member is equivalent to the Visual Basic constant <see langword="vbFirstFourDays" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>The first full week of the year. This member is equivalent to the Visual Basic constant <see langword="vbFirstFullWeek" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>The week in which January 1 occurs (default). This member is equivalent to the Visual Basic constant <see langword="vbFirstJan1" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>The week specified in your system settings as the first week of the year. This member is equivalent to the Visual Basic constant <see langword="vbUseSystem" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>The <see langword="HideModuleNameAttribute" /> attribute, when applied to a module, allows the module members to be accessed using only the qualification needed for the module.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" /> attribute.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>Contains information about run-time errors.</summary>
      <returns>Contains information about run-time errors.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</summary>
      <param name="VarName">Required. <see langword="Object" /> variable.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</summary>
      <param name="Expression">Required. <see langword="Object" /> expression.</param>
      <returns>Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>Returns the lowest available subscript for the indicated dimension of an array.</summary>
      <param name="Array">Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.</param>
      <param name="Rank">Optional. <see langword="Integer" />. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.</param>
      <returns>
        <see langword="Integer" />. The lowest value the subscript for the specified dimension can contain. <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string. If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
      <summary>Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</summary>
      <param name="Color">Required. A whole number in the range 0-15.</param>
      <returns>Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Color" /> is outside of range 0 to 15, inclusive.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
      <summary>Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</summary>
      <param name="Red">Required. <see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</param>
      <param name="Green">Required. <see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</param>
      <param name="Blue">Required. <see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</param>
      <returns>Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
      <summary>Returns a <see langword="String" /> value containing the system data type name of a variable.</summary>
      <param name="VbName">Required. A <see langword="String" /> variable containing a Visual Basic type name.</param>
      <returns>Returns a <see langword="String" /> value containing the system data type name of a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
      <summary>Returns a <see langword="String" /> value containing data-type information about a variable.</summary>
      <param name="VarName">Required. <see langword="Object" /> variable. If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</param>
      <returns>Returns a <see langword="String" /> value containing data-type information about a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>Returns the highest available subscript for the indicated dimension of an array.</summary>
      <param name="Array">Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.</param>
      <param name="Rank">Optional. <see langword="Integer" />. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.</param>
      <returns>
        <see langword="Integer" />. The highest value the subscript for the specified dimension can contain. If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0. If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> is <see langword="Nothing" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>Returns an <see langword="Integer" /> value containing the data type classification of a variable.</summary>
      <param name="VarName">Required. <see langword="Object" /> variable. If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</param>
      <returns>Returns an <see langword="Integer" /> value containing the data type classification of a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
      <summary>Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</summary>
      <param name="UrtName">Required. <see langword="String" /> variable containing a type name used by the common language runtime.</param>
      <returns>Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>The <see langword="Interaction" /> module contains procedures used to interact with objects, applications, and systems.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Beep">
      <summary>Sounds a tone through the computer's speaker.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>Executes a method on an object, or sets or returns a property on an object.</summary>
      <param name="ObjectRef">Required. <see langword="Object" />. A pointer to the object exposing the property or method.</param>
      <param name="ProcName">Required. <see langword="String" />. A string expression containing the name of the property or method on the object.</param>
      <param name="UseCallType">Required. An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> representing the type of procedure being called. The value of <see langword="CallType" /> can be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />.</param>
      <param name="Args">Optional. <see langword="ParamArray" />. A parameter array containing the arguments to be passed to the property or method being called.</param>
      <returns>Executes a method on an object, or sets or returns a property on an object.</returns>
      <exception cref="T:System.ArgumentException">Invalid <paramref name="UseCallType" /> value; must be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)">
      <summary>Creates and returns a reference to a COM object. <see langword="CreateObject" /> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</summary>
      <param name="ProgId">Required. <see langword="String" />. The program ID of the object to create.</param>
      <param name="ServerName">Optional. <see langword="String" />. The name of the network server where the object will be created. If <paramref name="ServerName" /> is an empty string (""), the local computer is used.</param>
      <returns>Creates and returns a reference to a COM object. <see langword="CreateObject" /> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</returns>
      <exception cref="T:System.Exception">Server is unavailable</exception>
      <exception cref="T:System.IO.FileNotFoundException">No object of the specified type exists</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>Returns one of two objects, depending on the evaluation of an expression.</summary>
      <param name="Expression">Required. <see langword="Boolean" />. The expression you want to evaluate.</param>
      <param name="TruePart">Required. <see langword="Object" />. Returned if <paramref name="Expression" /> evaluates to <see langword="True" />.</param>
      <param name="FalsePart">Required. <see langword="Object" />. Returned if <paramref name="Expression" /> evaluates to <see langword="False" />.</param>
      <returns>Returns one of two objects, depending on the evaluation of an expression.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxResult">
      <summary>Indicates which button was pressed on a message box, returned by the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Abort">
      <summary>Abort button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbAbort" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Cancel">
      <summary>Cancel button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ignore">
      <summary>Ignore button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbIgnore" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.No">
      <summary>No button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbNo" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ok">
      <summary>OK button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbOK" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Retry">
      <summary>Retry button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbRetry" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Yes">
      <summary>Yes button was pressed. This member is equivalent to the Visual Basic constant <see langword="vbYes" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxStyle">
      <summary>Indicates which buttons to display when calling the <see langword="MsgBox" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.AbortRetryIgnore">
      <summary>Abort, Retry, and Ignore buttons. This member is equivalent to the Visual Basic constant <see langword="vbAbortRetryIgnore" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal">
      <summary>Application modal message box. This member is equivalent to the Visual Basic constant <see langword="vbApplicationModal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Critical">
      <summary>Critical message. This member is equivalent to the Visual Basic constant <see langword="vbCritical" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton1">
      <summary>First button is default. This member is equivalent to the Visual Basic constant <see langword="vbDefaultButton1" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton2">
      <summary>Second button is default. This member is equivalent to the Visual Basic constant <see langword="vbDefaultButton2" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton3">
      <summary>Third button is default. This member is equivalent to the Visual Basic constant <see langword="vbDefaultButton3" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation">
      <summary>Warning message. This member is equivalent to the Visual Basic constant <see langword="vbExclamation" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Information">
      <summary>Information message. This member is equivalent to the Visual Basic constant <see langword="vbInformation" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxHelp">
      <summary>Help text. This member is equivalent to the Visual Basic constant <see langword="vbMsgBoxHelp" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRight">
      <summary>Right-aligned text. This member is equivalent to the Visual Basic constant <see langword="vbMsgBoxRight" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRtlReading">
      <summary>Right-to-left reading text (Hebrew and Arabic systems). This member is equivalent to the Visual Basic constant <see langword="vbMsgBoxRtlReading" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxSetForeground">
      <summary>Foreground message box window. This member is equivalent to the Visual Basic constant <see langword="vbMsgBoxSetForeground" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkCancel">
      <summary>OK and Cancel buttons. This member is equivalent to the Visual Basic constant <see langword="vbOKCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkOnly">
      <summary>OK button only (default). This member is equivalent to the Visual Basic constant <see langword="vbOKOnly" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Question">
      <summary>Warning query. This member is equivalent to the Visual Basic constant <see langword="vbQuestion" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.RetryCancel">
      <summary>Retry and Cancel buttons. This member is equivalent to the Visual Basic constant <see langword="vbRetryCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.SystemModal">
      <summary>System modal message box. This member is equivalent to the Visual Basic constant <see langword="vbSystemModal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNo">
      <summary>Yes and No buttons. This member is equivalent to the Visual Basic constant <see langword="vbYesNo" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNoCancel">
      <summary>Yes, No, and Cancel buttons. This member is equivalent to the Visual Basic constant <see langword="vbYesNoCancel" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>This attribute supports <see langword="My.Forms" /> and <see langword="My.WebServices" /> in Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>This attribute supports <see langword="My.Forms" /> and <see langword="My.WebServices" /> in Visual Basic.</summary>
      <param name="typeToCollect">
        <see langword="String" />. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> property. The compiler generates accessor properties for classes that derive from this type.</param>
      <param name="createInstanceMethodName">
        <see langword="String" />. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" /> property. Specifies the method in the class that creates the type's instances.</param>
      <param name="disposeInstanceMethodName">
        <see langword="String" />. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" /> property. Specifies the method in the class that disposes of the type's instances.</param>
      <param name="defaultInstanceAlias">
        <see langword="String" />. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" /> property. Specifies the name of the property that returns the default instance of the class.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>This property supports <see langword="My" /> in Visual Basic.</summary>
      <returns>Specifies the method in the class that creates the type's instances.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>This property supports <see langword="My" /> in Visual Basic.</summary>
      <returns>Specifies the name of the property that returns the default instance of the class.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>This property supports <see langword="My" /> in Visual Basic.</summary>
      <returns>Specifies the method in the class that disposes of the type's instances.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>This property supports <see langword="My" /> in Visual Basic.</summary>
      <returns>Specifies the name of the type for which the compiler generates accessor properties.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenAccess">
      <summary>Indicates how to open a file when calling file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Default">
      <summary>Read and write access permitted. This is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Read">
      <summary>Read access permitted.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.ReadWrite">
      <summary>Read and write access permitted.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Write">
      <summary>Write access permitted.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenMode">
      <summary>Indicates how to open a file when calling file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Append">
      <summary>File opened to append to it. Default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Binary">
      <summary>File opened for binary access.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Input">
      <summary>File opened for read access.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Output">
      <summary>File opened for write access.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Random">
      <summary>File opened for random access.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenShare">
      <summary>Indicates how to open a file when calling file-access functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Default">
      <summary>
        <see langword="LockReadWrite" />. This is the default.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockRead">
      <summary>Other processes cannot read the file.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockReadWrite">
      <summary>Other processes cannot read or write to the file.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockWrite">
      <summary>Other processes cannot write to the file.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Shared">
      <summary>Any process can read or write to the file.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.SpcInfo">
      <summary>This class supports the Visual Basic <see langword="Print" /> and <see langword="PrintLine" /> functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.SpcInfo.Count">
      <summary>This field supports the Visual Basic <see langword="Print" /> and <see langword="PrintLine" /> functions.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
      <summary>Returns an integer value representing the character code corresponding to a character.</summary>
      <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input. If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The character code corresponding to a character.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
      <summary>Returns an integer value representing the character code corresponding to a character.</summary>
      <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input. If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The character code corresponding to a character.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>Returns an integer value representing the character code corresponding to a character.</summary>
      <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input. If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The character code corresponding to a character.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>Returns an integer value representing the character code corresponding to a character.</summary>
      <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <paramref name="String" /> is a <see langword="String" /> expression, only the first character of the string is used for input. If <paramref name="String" /> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
      <returns>The character code corresponding to a character.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
      <summary>Returns the character associated with the specified character code.</summary>
      <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
      <returns>The character associated with the specified character code.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>Returns the character associated with the specified character code.</summary>
      <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
      <returns>The character associated with the specified character code.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      <param name="Source">Required. One-dimensional array of strings to be searched.</param>
      <param name="Match">Required. String to search for.</param>
      <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
      <returns>A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      <param name="Source">Required. One-dimensional array of strings to be searched.</param>
      <param name="Match">Required. String to search for.</param>
      <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
      <returns>A zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
      <param name="Expression">Required. Any valid expression.</param>
      <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
      <returns>A string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is -1, which indicates that the computer's regional settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
      <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
      <returns>An expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
      <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
      <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>Returns a string expression representing a date/time value.</summary>
      <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
      <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
      <returns>A string expression representing a date/time value.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="NamedFormat" /> setting is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a number.</summary>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is -1, which indicates that the computer's regional settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
      <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
      <returns>An expression formatted as a number.</returns>
      <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the locale settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
      <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
      <returns>An expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
      <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
      <param name="str">Required. Any valid <see langword="String" /> expression.</param>
      <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <paramref name="str" /> to be returned.</param>
      <returns>
        <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
      <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
      <param name="String1">Required. <see langword="String" /> expression being searched.</param>
      <param name="String2">Required. <see langword="String" /> expression sought.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
      <returns>If  

 InStr returns  


               <paramref name="String1" /> is zero length or <see langword="Nothing" /> 0  


               <paramref name="String2" /> is zero length or <see langword="Nothing" /><paramref name="start" /><paramref name="String2" /> is not found  

 0  


               <paramref name="String2" /> is found within <paramref name="String1" /> Position where match begins  


               <paramref name="Start" /> &gt; length of <paramref name="String1" /> 0</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
      <param name="String1">Required. <see langword="String" /> expression being searched.</param>
      <param name="String2">Required. <see langword="String" /> expression sought.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
      <returns>If  

 InStr returns  


               <paramref name="String1" /> is zero length or <see langword="Nothing" /> 0  


               <paramref name="String2" /> is zero length or <see langword="Nothing" /> The starting position for the search, which defaults to the first character position.  


               <paramref name="String2" /> is not found  

 0  


               <paramref name="String2" /> is found within <paramref name="String1" /> Position where match begins</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
      <param name="StringCheck">Required. String expression being searched.</param>
      <param name="StringMatch">Required. String expression being searched for.</param>
      <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <paramref name="Start" /> is omitted then -1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
      <returns>If  

 InStrRev returns  


               <paramref name="StringCheck" /> is zero-length  

 0  


               <paramref name="StringMatch" /> is zero-length  


               <paramref name="Start" /><paramref name="StringMatch" /> is not found  

 0  


               <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /> Position at which the first match is found, starting with the right side of the string.  


               <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /> 0</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
      <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
      <returns>A string created by joining a number of substrings contained in an array.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> is not one dimensional.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
      <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
      <returns>A string created by joining a number of substrings contained in an array.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> is not one dimensional.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>Returns a string or character converted to lowercase.</summary>
      <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
      <returns>A string or character converted to lowercase.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>Returns a string or character converted to lowercase.</summary>
      <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
      <returns>A string or character converted to lowercase.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
      <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
      <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</param>
      <returns>A string containing a specified number of characters from the left side of a string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <paramref name="Expression" /> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
      <returns>An integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
      <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
      <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
      <returns>A left-aligned string containing the specified string adjusted to the specified length.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
      <param name="str">Required. Any valid <see langword="String" /> expression.</param>
      <returns>A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
      <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
      <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string (""). <paramref name="Start" /> is one-based.</param>
      <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
      <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
      <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the <see langword="Mid" /> function returns a zero-length string (""). <paramref name="Start" /> is one based.</param>
      <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.</param>
      <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
      <param name="Expression">Required. String expression containing substring to replace.</param>
      <param name="Find">Required. Substring being searched for.</param>
      <param name="Replacement">Required. Replacement substring.</param>
      <param name="Start">Optional. Position within <paramref name="Expression" /> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <paramref name="Start" />, with appropriate substitutions. If omitted, 1 is assumed.</param>
      <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is -1, which means "make all possible substitutions."</param>
      <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
      <returns>
        <see langword="Replace" /> returns the following values.  
 If  

 Replace returns  

<paramref name="Find" /> is zero-length or <see langword="Nothing" /> Copy of <paramref name="Expression" /><paramref name="Replace" /> is zero-length  

 Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /><see langword="Nothing" /><paramref name="Count" /> is 0  

 Copy of <paramref name="Expression" /></returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
      <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
      <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</param>
      <returns>A string containing a specified number of characters from the right side of a string.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
      <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
      <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
      <returns>A right-aligned string containing the specified string adjusted to the specified length.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
      <param name="str">Required. Any valid <see langword="String" /> expression.</param>
      <returns>A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>Returns a string consisting of the specified number of spaces.</summary>
      <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
      <returns>A string consisting of the specified number of spaces.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
      <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
      <param name="Delimiter">Optional. Any single character used to identify substring limits. If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.</param>
      <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, -1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.</param>
      <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
      <returns>
        <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
      <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
      <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
      <returns>The <see langword="StrComp" /> function has the following return values.  
  If  

  StrComp returns  

 <paramref name="String1" /> sorts ahead of <paramref name="String2" /> -1  

 <paramref name="String1" /> is equal to <paramref name="String2" /> 0  

 <paramref name="String1" /> sorts after <paramref name="String2" /> 1</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Compare" /> value is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
      <summary>Returns a string converted as specified.</summary>
      <param name="str">Required. <see langword="String" /> expression to be converted.</param>
      <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
      <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
      <returns>A string converted as specified.</returns>
      <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
      <returns>A string or object consisting of the specified character repeated the specified number of times.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
      <returns>A string or object consisting of the specified character repeated the specified number of times.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
      <returns>A string or object consisting of the specified character repeated the specified number of times.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> is <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>Returns a string in which the character order of a specified string is reversed.</summary>
      <param name="Expression">Required. String expression whose characters are to be reversed. If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.</param>
      <returns>A string in which the character order of a specified string is reversed.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
      <param name="str">Required. Any valid <see langword="String" /> expression.</param>
      <returns>A string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
      <returns>A string or character containing the specified string converted to uppercase.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
      <returns>A string or character containing the specified string converted to uppercase.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.TabInfo">
      <summary>This class supports the Visual Basic <see langword="Print" /> and <see langword="PrintLine" /> functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TabInfo.Column">
      <summary>This field supports the Visual Basic <see langword="Print" /> and <see langword="PrintLine" /> functions.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>Indicates a Boolean value or whether the default should be used when calling number-formatting functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>False. The numeric value of this member is 0.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>True. The numeric value of this member is -1.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>Default setting. The numeric value of this member is -2.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>Indicates the type of a variant object, returned by the <see langword="VarType" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>Array. This member is equivalent to the Visual Basic constant <see langword="vbArray" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>
        <see langword="Boolean" />. (<see langword="True" /> or <see langword="False" />.) This member is equivalent to the Visual Basic constant <see langword="vbBoolean" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>
        <see langword="Byte" />. (0 through 255.) This member is equivalent to the Visual Basic constant <see langword="vbByte" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>
        <see langword="Char" />. (0 through 65535.) This member is equivalent to the Visual Basic constant <see langword="vbChar" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>Currency. This member is equivalent to the Visual Basic constant <see langword="vbCurrency" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>DataObject.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>
        <see langword="Date" />. (0:00:00 on January 1, 0001 through 11:59:59 PM on December 31, 9999.) This member is equivalent to the Visual Basic constant <see langword="vbDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>
        <see langword="Decimal" />. (0 through +/-79,228,162,514,264,337,593,543,950,335 with no decimal point; 0 through +/-7.9228162514264337593543950335 with 28 places to the right of the decimal; smallest non-zero number is +/-0.0000000000000000000000000001.) This member is equivalent to the Visual Basic constant <see langword="vbDecimal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>
        <see langword="Double" />. (-1.79769313486231E+308 through -4.94065645841247E-324 for negative values; 4.94065645841247E-324 through 1.79769313486231E+308 for positive values.) This member is equivalent to the Visual Basic constant <see langword="vbDouble" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>Null reference. This member is equivalent to the Visual Basic constant <see langword="vbEmpty" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>
        <see langword="Integer" />. (-2,147,483,648 through 2,147,483,647.) This member is equivalent to the Visual Basic constant <see langword="vbInteger" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>
        <see langword="Long" />. (-9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.) This member is equivalent to the Visual Basic constant <see langword="vbLong" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>Null object. This member is equivalent to the Visual Basic constant <see langword="vbNull" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>Any type can be stored in a variable of type <see langword="Object" />. This member is equivalent to the Visual Basic constant <see langword="vbObject" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>
        <see langword="Short" />. (-32,768 through 32,767.)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>
        <see langword="Single" />. (-3.402823E+38 through -1.401298E-45 for negative values; 1.401298E-45 through 3.402823E+38 for positive values.) This member is equivalent to the Visual Basic constant <see langword="vbSingle" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>
        <see langword="String" />. (0 to approximately 2 billion Unicode characters.) This member is equivalent to the Visual Basic constant <see langword="vbString" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>User-defined type. Each member of the structure has a range determined by its data type and independent of the ranges of the other members. This member is equivalent to the Visual Basic constant <see langword="vbUserDefinedType" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>
        <see langword="Variant" />. This member is equivalent to the Visual Basic constant <see langword="vbVariant" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedArrayAttribute">
      <summary>Indicates that an array in a structure or non-local variable should be treated as a fixed-length array.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32)">
      <summary>Initializes the value of the <see langword="Bounds" /> property.</summary>
      <param name="UpperBound1">Initializes the value of upper field, which represents the size of the first dimension of the array.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes the value of the <see langword="Bounds" /> property.</summary>
      <param name="UpperBound1">Initializes the value of upper field, which represents the size of the first dimension of the array.</param>
      <param name="UpperBound2">Initializes the value of upper field, which represents the size of the second dimension of the array.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Bounds">
      <summary>Returns the bounds of the array.</summary>
      <returns>Contains an integer array that represents the bounds of the array.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Length">
      <summary>Returns the size of the array.</summary>
      <returns>Contains an integer that represents the number of elements in the array.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedStringAttribute">
      <summary>Indicates that a string should be treated as if it were fixed length.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedStringAttribute.#ctor(System.Int32)">
      <summary>Initializes the value of the <see langword="SizeConst" /> field.</summary>
      <param name="Length">The length of the fixed string.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedStringAttribute.Length">
      <summary>Gets the length of the string.</summary>
      <returns>The length of the string.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>The <see langword="VbMath" /> module contains procedures used to perform mathematical operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>Initializes the random-number generator.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>Initializes the random-number generator.</summary>
      <param name="Number">Optional. An <see langword="Object" /> or any valid numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>Returns a random number of type <see langword="Single" />.</summary>
      <returns>The next random number in the sequence.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>Returns a random number of type <see langword="Single" />.</summary>
      <param name="Number">Optional. A <see langword="Single" /> value or any valid <see langword="Single" /> expression.</param>
      <returns>If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VbStrConv">
      <summary>Indicates which type of conversion to perform when calling the <see langword="StrConv" /> function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Hiragana">
      <summary>Converts Katakana characters in the string to Hiragana characters. Applies to Japanese locale only. This member is equivalent to the Visual Basic constant <see langword="vbHiragana" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Katakana">
      <summary>Converts Hiragana characters in the string to Katakana characters. Applies to Japanese locale only. This member is equivalent to the Visual Basic constant <see langword="vbKatakana" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.LinguisticCasing">
      <summary>Converts the string from file system rules for casing to linguistic rules. This member is equivalent to the Visual Basic constant <see langword="vbLinguisticCasing" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Lowercase">
      <summary>Converts the string to lowercase characters. This member is equivalent to the Visual Basic constant <see langword="vbLowerCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Narrow">
      <summary>Converts wide (double-byte) characters in the string to narrow (single-byte) characters. Applies to Asian locales. This member is equivalent to the Visual Basic constant <see langword="vbNarrow" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.None">
      <summary>Performs no conversion.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.ProperCase">
      <summary>Converts the first letter of every word in the string to uppercase. This member is equivalent to the Visual Basic constant <see langword="vbProperCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.SimplifiedChinese">
      <summary>Converts the string to Simplified Chinese characters. This member is equivalent to the Visual Basic constant <see langword="vbSimplifiedChinese" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.TraditionalChinese">
      <summary>Converts the string to Traditional Chinese characters. This member is equivalent to the Visual Basic constant <see langword="vbTraditionalChinese" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Uppercase">
      <summary>Converts the string to uppercase characters. This member is equivalent to the Visual Basic constant <see langword="vbUpperCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Wide">
      <summary>Converts narrow (single-byte) characters in the string to wide (double-byte) characters. Applies to Asian locales. This member is equivalent to the Visual Basic constant <see langword="vbWide" />. The conversion may use Normalization Form C even if an input character is already full-width. For example, the string "は゛" (which is already full-width) is normalized to "ば". See Unicode normalization forms.</summary>
    </member>
  </members>
</doc>