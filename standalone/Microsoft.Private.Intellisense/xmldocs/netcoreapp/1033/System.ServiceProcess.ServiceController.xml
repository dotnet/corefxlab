<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceProcess.ServiceController</name>
  </assembly>
  <members>
    <member name="T:System.ServiceProcess.PowerBroadcastStatus">
      <summary>Indicates the system's power status.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.BatteryLow">
      <summary>Battery power is low.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.OemEvent">
      <summary>An Advanced Power Management (APM) BIOS signaled an APM OEM event.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.PowerStatusChange">
      <summary>A change in the power status of the computer is detected, such as a switch from battery power to A/C. The system also broadcasts this event when remaining battery power slips below the threshold specified by the user or if the battery power changes by a specified percentage.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.QuerySuspend">
      <summary>The system has requested permission to suspend the computer. An application that grants permission should carry out preparations for the suspension before returning.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.QuerySuspendFailed">
      <summary>The system was denied permission to suspend the computer. This status is broadcast if any application or driver denied a previous <see langword="QuerySuspend" /> status.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeAutomatic">
      <summary>The computer has woken up automatically to handle an event. If the system detects any user activity after broadcasting <see langword="ResumeAutomatic" />, it broadcasts a <see langword="ResumeSuspend" /> event to let applications know they can resume full interaction with the user.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeCritical">
      <summary>The system has resumed operation after a critical suspension caused by a failing battery. Because a critical suspension occurs without prior notification, resources and data previously available may not be present when the application receives this event. The application should attempt to restore its state to the best of its ability.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeSuspend">
      <summary>The system has resumed operation after being suspended.</summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.Suspend">
      <summary>The computer is about to enter a suspended state. This event is typically broadcast when all applications and installable drivers have returned <see langword="true" /> to a previous <see langword="QuerySuspend" /> state.</summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceBase">
      <summary>Provides a base class for a service that will exist as part of a service application. <see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.AutoLog">
      <summary>Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</summary>
      <returns>
        <see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
      <summary>Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</summary>
      <returns>
        <see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This property is modified after the service was started.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent">
      <summary>Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</summary>
      <returns>
        <see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">This property is modified after the service was started.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
      <summary>Gets or sets a value indicating whether the service can be paused and resumed.</summary>
      <returns>
        <see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">The service has already been started. The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanShutdown">
      <summary>Gets or sets a value indicating whether the service should be notified when the system is shutting down.</summary>
      <returns>
        <see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.  The default is <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">The service has already been started. The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanStop">
      <summary>Gets or sets a value indicating whether the service can be stopped once it has started.</summary>
      <returns>
        <see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">The service has already been started. The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)">
      <summary>Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.EventLog">
      <summary>Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</summary>
      <returns>An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.ExitCode">
      <summary>Gets or sets the exit code for the service.</summary>
      <returns>The exit code for the service.</returns>
    </member>
    <member name="F:System.ServiceProcess.ServiceBase.MaxNameLength">
      <summary>Indicates the maximum size for a service name.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnContinue">
      <summary>When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service resumes normal functioning after being paused.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
      <summary>When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service. Specifies actions to take when a command with the specified parameter value occurs.</summary>
      <param name="command">The command message sent to the service.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnPause">
      <summary>When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service pauses.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
      <summary>When implemented in a derived class, executes when the computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</summary>
      <param name="powerStatus">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</param>
      <returns>When implemented in a derived class, the needs of your application determine what value to return. For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)">
      <summary>Executes when a change event is received from a Terminal Server session.</summary>
      <param name="changeDescription">A structure that identifies the change type.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnShutdown">
      <summary>When implemented in a derived class, executes when the system is shutting down. Specifies what should occur immediately prior to the system shutting down.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
      <summary>When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.</summary>
      <param name="args">Data passed by the start command.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnStop">
      <summary>When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)">
      <summary>Requests additional time for a pending operation.</summary>
      <param name="milliseconds">The requested time in milliseconds.</param>
      <exception cref="T:System.InvalidOperationException">The service is not in a pending state.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
      <summary>Registers the executable for a service with the Service Control Manager (SCM).</summary>
      <param name="service">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="service" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
      <summary>Registers the executable for multiple services with the Service Control Manager (SCM).</summary>
      <param name="services">An array of ServiceBase instances, which indicate services to start.</param>
      <exception cref="T:System.ArgumentException">You did not supply a service to start. The array might be <see langword="null" /> or empty.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.ServiceHandle">
      <summary>Gets the service control handle for the service.</summary>
      <returns>An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)">
      <summary>Registers the command handler and starts the service.</summary>
      <param name="argCount">The number of arguments in the argument array.</param>
      <param name="argPointer">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.ServiceName">
      <summary>Gets or sets the short name used to identify the service to the system.</summary>
      <returns>The name of the service.</returns>
      <exception cref="T:System.InvalidOperationException">The service has already been started. The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</exception>
      <exception cref="T:System.ArgumentException">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Stop">
      <summary>Stops the executing service.</summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceController">
      <summary>Represents a Windows service and allows you to connect to a running or stopped service, manipulate it, or get information about it.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is not associated with a specific service.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is associated with an existing service on the local computer.</summary>
      <param name="name">The name that identifies the service to the system. This can also be the display name for the service.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is associated with an existing service on the specified computer.</summary>
      <param name="name">The name that identifies the service to the system. This can also be the display name for the service.</param>
      <param name="machineName">The computer on which the service resides.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.
-or-
<paramref name="machineName" /> is invalid.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanPauseAndContinue">
      <summary>Gets a value indicating whether the service can be paused and resumed.</summary>
      <returns>
        <see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanShutdown">
      <summary>Gets a value indicating whether the service should be notified when the system is shutting down.</summary>
      <returns>
        <see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanStop">
      <summary>Gets a value indicating whether the service can be stopped after it has started.</summary>
      <returns>
        <see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Close">
      <summary>Disconnects this <see cref="T:System.ServiceProcess.ServiceController" /> instance from the service and frees all the resources that the instance allocated.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Continue">
      <summary>Continues a service after it has been paused.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.DependentServices">
      <summary>Gets the set of services that depends on the service associated with this <see cref="T:System.ServiceProcess.ServiceController" /> instance.</summary>
      <returns>An array of <see cref="T:System.ServiceProcess.ServiceController" /> instances, each of which is associated with a service that depends on this service.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.DisplayName">
      <summary>Gets or sets a friendly name for the service.</summary>
      <returns>The friendly name of the service, which can be used to identify the service.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.ServiceProcess.ServiceController.DisplayName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ServiceProcess.ServiceController" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)">
      <summary>Executes a custom command on the service.</summary>
      <param name="command">An application-defined command flag that indicates which custom command to execute. The value must be between 128 and 256, inclusive.</param>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetDevices">
      <summary>Retrieves the device driver services on the local computer.</summary>
      <returns>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated with a device driver service on the local computer.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetDevices(System.String)">
      <summary>Retrieves the device driver services on the specified computer.</summary>
      <param name="machineName">The computer from which to retrieve the device driver services.</param>
      <returns>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated with a device driver service on the specified computer.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter has invalid syntax.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetServices">
      <summary>Retrieves all the services on the local computer, except for the device driver services.</summary>
      <returns>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated with a service on the local computer.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetServices(System.String)">
      <summary>Retrieves all the services on the specified computer, except for the device driver services.</summary>
      <param name="machineName">The computer from which to retrieve the services.</param>
      <returns>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated with a service on the specified computer.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter has invalid syntax.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.MachineName">
      <summary>Gets or sets the name of the computer on which this service resides.</summary>
      <returns>The name of the computer that is running the service associated with this <see cref="T:System.ServiceProcess.ServiceController" /> instance. The default is the local computer (".").</returns>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.ServiceProcess.ServiceController.MachineName" /> syntax is invalid.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Pause">
      <summary>Suspends a service's operation.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Refresh">
      <summary>Refreshes property values by resetting the properties to their current values.</summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServiceHandle">
      <summary>Gets the handle for the service.</summary>
      <returns>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that contains the handle for the service.</returns>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServiceName">
      <summary>Gets or sets the name that identifies the service that this instance references.</summary>
      <returns>The name that identifies the service that this <see cref="T:System.ServiceProcess.ServiceController" /> instance references. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The syntax of the <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> property is invalid.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServicesDependedOn">
      <summary>The set of services that this service depends on.</summary>
      <returns>An array of <see cref="T:System.ServiceProcess.ServiceController" /> instances, each of which is associated with a service that must be running for this service to run.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServiceType">
      <summary>Gets the type of service that this object references.</summary>
      <returns>One of the <see cref="T:System.ServiceProcess.ServiceType" /> values, used to indicate the network service type.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Start">
      <summary>Starts the service, passing no arguments.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Start(System.String[])">
      <summary>Starts a service, passing the specified arguments.</summary>
      <param name="args">An array of arguments to pass to the service when it starts.</param>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service cannot be started.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is <see langword="null" />.
-or-
A member of the array is <see langword="null" />.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.StartType">
      <summary>Gets a value that indicates how the service represented by the <see cref="T:System.ServiceProcess.ServiceController" /> object starts.</summary>
      <returns>A value that indicates how the service starts.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.Status">
      <summary>Gets the status of the service that is referenced by this instance.</summary>
      <returns>One of the <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> values that indicates whether the service is running, stopped, or paused, or whether a start, stop, pause, or continue command is pending.</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Stop">
      <summary>Stops this service and any services that are dependent on this service.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when accessing a system API.</exception>
      <exception cref="T:System.InvalidOperationException">The service was not found.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)">
      <summary>Infinitely waits for the service to reach the specified status.</summary>
      <param name="desiredStatus">The status to wait for.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="desiredStatus" /> parameter is not any of the values defined in the <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> enumeration.</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)">
      <summary>Waits for the service to reach the specified status or for the specified time-out to expire.</summary>
      <param name="desiredStatus">The status to wait for.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> object specifying the amount of time to wait for the service to reach the specified status.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="desiredStatus" /> parameter is not any of the values defined in the <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> enumeration.</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">The value specified for the <paramref name="timeout" /> parameter expires.</exception>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerStatus">
      <summary>Indicates the current state of the service.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.ContinuePending">
      <summary>The service continue is pending. This corresponds to the Win32 <see langword="SERVICE_CONTINUE_PENDING" /> constant, which is defined as 0x00000005.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Paused">
      <summary>The service is paused. This corresponds to the Win32 <see langword="SERVICE_PAUSED" /> constant, which is defined as 0x00000007.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.PausePending">
      <summary>The service pause is pending. This corresponds to the Win32 <see langword="SERVICE_PAUSE_PENDING" /> constant, which is defined as 0x00000006.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Running">
      <summary>The service is running. This corresponds to the Win32 <see langword="SERVICE_RUNNING" /> constant, which is defined as 0x00000004.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.StartPending">
      <summary>The service is starting. This corresponds to the Win32 <see langword="SERVICE_START_PENDING" /> constant, which is defined as 0x00000002.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Stopped">
      <summary>The service is not running. This corresponds to the Win32 <see langword="SERVICE_STOPPED" /> constant, which is defined as 0x00000001.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.StopPending">
      <summary>The service is stopping. This corresponds to the Win32 <see langword="SERVICE_STOP_PENDING" /> constant, which is defined as 0x00000003.</summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceProcessDescriptionAttribute">
      <summary>Specifies a description for a property or event.</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceProcessDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" /> class, using the specified description.</summary>
      <param name="description">The application-defined description text.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessDescriptionAttribute.Description">
      <summary>Gets description text associated with the service process.</summary>
      <returns>An application-defined description.</returns>
    </member>
    <member name="T:System.ServiceProcess.ServiceStartMode">
      <summary>Indicates the start mode of the service.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Automatic">
      <summary>Indicates that the service is to be started (or was started) by the operating system, at system start-up. If an automatically started service depends on a manually started service, the manually started service is also started automatically at system startup.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Boot">
      <summary>Indicates that the service is a device driver started by the system loader. This value is valid only for device drivers.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Disabled">
      <summary>Indicates that the service is disabled, so that it cannot be started by a user or application.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Manual">
      <summary>Indicates that the service is started only manually, by a user (using the Service Control Manager) or by an application.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.System">
      <summary>Indicates that the service is a device driver started by the <see langword="IOInitSystem" /> function. This value is valid only for device drivers.</summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceType">
      <summary>Represents the type of the service.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Adapter">
      <summary>A service for a hardware device that requires its own driver.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.FileSystemDriver">
      <summary>A file system driver, which is also a Kernel device driver.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.InteractiveProcess">
      <summary>A service that can communicate with the desktop.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.KernelDriver">
      <summary>A Kernel device driver such as a hard disk or other low-level hardware device driver.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.RecognizerDriver">
      <summary>A file system driver used during startup to determine the file systems present on the system.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Win32OwnProcess">
      <summary>A Win32 program that can be started by the Service Controller and that obeys the service control protocol. This type of Win32 service runs in a process by itself.</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Win32ShareProcess">
      <summary>A Win32 service that can share a process with other Win32 services.</summary>
    </member>
    <member name="T:System.ServiceProcess.SessionChangeDescription">
      <summary>Identifies the reason for a Terminal Services session change.</summary>
    </member>
    <member name="M:System.ServiceProcess.SessionChangeDescription.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current session change description.</summary>
      <param name="obj">The object to compare to the current <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is equal to the current <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ServiceProcess.SessionChangeDescription.Equals(System.ServiceProcess.SessionChangeDescription)">
      <summary>Determines whether the specified session change description is equal to the current session change description.</summary>
      <param name="changeDescription">The <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure to compare to the current <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <returns>
        <see langword="true" /> if <paramref name="changeDescription" /> is equal to the current <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ServiceProcess.SessionChangeDescription.GetHashCode">
      <summary>Gets a hash code for the current session change description.</summary>
      <returns>A hash code for the current session change description.</returns>
    </member>
    <member name="M:System.ServiceProcess.SessionChangeDescription.op_Equality(System.ServiceProcess.SessionChangeDescription,System.ServiceProcess.SessionChangeDescription)">
      <summary>Returns a value indicating whether two <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structures are equal.</summary>
      <param name="a">A <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <param name="b">A <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ServiceProcess.SessionChangeDescription.op_Inequality(System.ServiceProcess.SessionChangeDescription,System.ServiceProcess.SessionChangeDescription)">
      <summary>Returns a value indicating whether two <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structures are not equal.</summary>
      <param name="a">A <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <param name="b">A <see cref="T:System.ServiceProcess.SessionChangeDescription" /> structure.</param>
      <returns>
        <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ServiceProcess.SessionChangeDescription.Reason">
      <summary>Gets the reason for the session change.</summary>
      <returns>One of the <see cref="T:System.ServiceProcess.SessionChangeReason" /> values.</returns>
    </member>
    <member name="P:System.ServiceProcess.SessionChangeDescription.SessionId">
      <summary>Gets the session ID for the associated session.</summary>
      <returns>The session ID for the associated session.</returns>
    </member>
    <member name="T:System.ServiceProcess.SessionChangeReason">
      <summary>Specifies the reason for a Terminal Services session change notice.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.ConsoleConnect">
      <summary>A console session has connected.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.ConsoleDisconnect">
      <summary>A console session has disconnected.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.RemoteConnect">
      <summary>A remote session has connected.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.RemoteDisconnect">
      <summary>A remote session has disconnected.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.SessionLock">
      <summary>A session has been locked.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.SessionLogoff">
      <summary>A user has logged off from a session.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.SessionLogon">
      <summary>A user has logged on to a session.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.SessionRemoteControl">
      <summary>The remote control status of a session has changed.</summary>
    </member>
    <member name="F:System.ServiceProcess.SessionChangeReason.SessionUnlock">
      <summary>A session has been unlocked.</summary>
    </member>
    <member name="T:System.ServiceProcess.TimeoutException">
      <summary>The exception that is thrown when a specified timeout has expired.</summary>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with no message text.</summary>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with the specified serialization information and context.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with the specified message text.</summary>
      <param name="message">Text that describes the type or source of the exception.</param>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with the specified message text and inner exception.</summary>
      <param name="message">Text that describes the type or source of the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
  </members>
</doc>