<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>Provides a safe handle that represents a memory-mapped file for sequential access.</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.IsInvalid" />
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>Provides a safe handle that represents a view of a block of unmanaged memory for random access.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> class.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> class.</summary>
      <param name="handle">The pre-existing handle to use. Using <see cref="F:System.IntPtr.Zero" /> returns an invalid handle.</param>
      <param name="parentHandle">The parent handle of this <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parentHandle" /> is closed.  
-or-  
<paramref name="parentHandle" /> is invalid.</exception>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>Releases a handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>
        <see langword="true" /> if the handle is released successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>Releases a native handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>
        <see langword="true" /> if the handle is released successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>Provides a safe handle that represents a key (NCRYPT_KEY_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> class.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
      <summary>Instantiates a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> class.</summary>
      <param name="handle">The pre-existing handle to use. Using <see cref="F:System.IntPtr.Zero" /> returns an invalid handle.</param>
      <param name="parentHandle">The parent handle of this <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parentHandle" /> is closed.  
-or-  
<paramref name="parentHandle" /> is invalid.</exception>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>Provides a safe handle that represents a key storage provider (NCRYPT_PROV_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>Represents a wrapper class for a pipe handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> class.</summary>
      <param name="preexistingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">
        <see langword="true" /> to reliably release the handle during the finalization phase; <see langword="false" /> to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafePipeHandle.IsInvalid" />
    <member name="T:System.Action`10">
      <summary>Encapsulates a method that has 10 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>Encapsulates a method that has 11 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>Encapsulates a method that has 12 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>Encapsulates a method that has 13 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>Encapsulates a method that has 14 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>Encapsulates a method that has 15 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>Encapsulates a method that has 16 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>Encapsulates a method that has nine parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Represents a set of values.</summary>
      <typeparam name="T">The type of elements in the hash set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the default equality comparer for the set type.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the specified equality comparer for the set type.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty, but has reserved space for <paramref name="capacity" /> items and uses the default equality comparer for the set type.</summary>
      <param name="capacity">The initial size of the <see cref="T:System.Collections.Generic.HashSet`1" /></param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate <paramref name="capacity" /> elements.</summary>
      <param name="capacity">The initial size of the <see cref="T:System.Collections.Generic.HashSet`1" /></param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation for the set type.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Adds the specified element to a set.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>
        <see langword="true" /> if the element is added to the <see cref="T:System.Collections.Generic.HashSet`1" /> object; <see langword="false" /> if the element is already present.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Removes all elements from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element.</summary>
      <param name="item">The element to locate in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copies the specified number of elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy to <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.  
-or-  
<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.  
-or-  
<paramref name="count" /> is greater than the available space from the <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Gets the number of elements that are contained in a set.</summary>
      <returns>The number of elements that are contained in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>Returns an <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for equality testing of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for deep equality testing of the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary>Ensures that this hash set can hold the specified number of elements without growing.</summary>
      <param name="capacity">The minimum capacity to ensure.</param>
      <returns>The new capacity of this instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.HashSet`1" /> collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Releases all resources used by a <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="other">The collection of items to remove from the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object for the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present in that object and in the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.HashSet`1" /> object is invalid.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current <see cref="T:System.Collections.Generic.HashSet`1" /> object and a specified collection share common elements.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Removes the specified element from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="item">The element to remove.</param>
      <returns>
        <see langword="true" /> if the element is successfully found and removed; otherwise, <see langword="false" />.  This method returns <see langword="false" /> if <paramref name="item" /> is not found in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is equal to <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present either in that object or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to an <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether a collection is read-only.</summary>
      <returns>
        <see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Sets the capacity of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The value from the set that the search found, or the default value of T when the search yielded no match.</param>
      <returns>A value indicating whether the search was successful.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain all elements that are present in itself, the specified collection, or both.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The binary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <param name="errorSuggestion">The binding result if the binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>The binary operation kind.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> object representing the kind of binary operation.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Represents a set of binding restrictions on the <see cref="T:System.Dynamic.DynamicMetaObject" /> under which the dynamic binding is valid.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Combines binding restrictions from the list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances into one set of restrictions.</summary>
      <param name="contributingObjects">The list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances from which to combine restrictions.</param>
      <returns>The new set of binding restrictions.</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Represents an empty set of binding restrictions. This field is read only.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Creates the binding restriction that checks the expression for arbitrary immutable properties.</summary>
      <param name="expression">The expression representing the restrictions.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Creates the binding restriction that checks the expression for object instance identity.</summary>
      <param name="expression">The expression to test.</param>
      <param name="instance">The exact object instance to test.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates the binding restriction that check the expression for runtime type identity.</summary>
      <param name="expression">The expression to test.</param>
      <param name="type">The exact type to test.</param>
      <returns>The new binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Merges the set of binding restrictions with the current binding restrictions.</summary>
      <param name="restrictions">The set of restrictions with which to merge the current binding restrictions.</param>
      <returns>The new set of binding restrictions.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Creates the <see cref="T:System.Linq.Expressions.Expression" /> representing the binding restrictions.</summary>
      <returns>The expression tree representing the restrictions.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Describes arguments in the dynamic binding process.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new CallInfo that represents arguments in the dynamic binding process.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Creates a new <c>PositionalArgumentInfo</c>.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>The number of arguments.</summary>
      <returns>The number of arguments.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>The argument names.</summary>
      <returns>The read-only collection of argument names.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Determines whether the specified CallInfo instance is considered equal to the current.</summary>
      <param name="obj">The instance of <see cref="T:System.Dynamic.CallInfo" /> to compare with the current instance.</param>
      <returns>true if the specified instance is equal to the current one otherwise, false.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">The type to convert to.</param>
      <param name="explicit">Is true if the conversion should consider explicit conversions; otherwise, false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic convert operation.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="args">An array of arguments of the dynamic convert operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Gets the value indicating if the conversion should consider explicit conversions.</summary>
      <returns>
        <see langword="true" /> if there is an explicit conversion; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>The type to convert to.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the type to convert to.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">An array of arguments of the dynamic create operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="args">An array of arguments of the dynamic delete index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">The name of the member to delete.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="args">An array of arguments of the dynamic delete member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>
        <see langword="true" /> if the string comparison should ignore case; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Gets the name of the member to delete.</summary>
      <returns>The name of the member to delete.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
      <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> that represents the details of the dynamic operation.</param>
      <param name="arg">An instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the right hand side of the binary operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Performs the binding of the dynamic conversion operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.ConvertBinder" /> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create instance operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.CreateInstanceBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the create instance operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the delete index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteMemberBinder" /> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the get index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetMemberBinder" /> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke member operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the set index operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set index operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set member operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.UnaryOperationBinder" /> that represents the details of the dynamic operation.</param>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Creates a meta-object for the specified object.</summary>
      <param name="value">The object to get a meta-object for.</param>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <returns>If the given object implements <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />. Otherwise a plain new meta-object with no restrictions is created and returned.</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Represents an empty array of type <see cref="T:System.Dynamic.DynamicMetaObject" />. This field is read only.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</summary>
      <returns>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>The list of dynamic member names.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Gets a value indicating whether the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Gets the limit type of the <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> if runtime value is available, a type of the <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> otherwise.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>The set of binding restrictions under which the binding is valid.</summary>
      <returns>The set of binding restrictions.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Gets the <see cref="T:System.Type" /> of the runtime value or null if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has no value associated with it.</summary>
      <returns>The <see cref="T:System.Type" /> of the runtime value or null.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>The dynamic call site binder that participates in the <see cref="T:System.Dynamic.DynamicMetaObject" /> binding protocol.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> class.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>When overridden in the derived class, performs the binding of the dynamic operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the resulting expression; any type is allowed.</param>
      <returns>The update expression.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</summary>
      <param name="parameter">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</param>
      <returns>An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</summary>
      <param name="binder">Provides information about the binary operation. The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</param>
      <param name="arg">The right operand for the binary operation. For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</param>
      <param name="result">The result of the binary operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</summary>
      <param name="binder">Provides information about the conversion operation. The <c>binder.Type</c> property provides the type to which the object must be converted. For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type. The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs. It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</param>
      <param name="result">The result of the type conversion operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the initialization operation.</param>
      <param name="args">The arguments that are passed to the object during initialization. For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</param>
      <param name="result">The result of the initialization.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the deletion.</param>
      <param name="indexes">The indexes to be deleted.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</summary>
      <param name="binder">Provides information about the deletion.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed. For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</summary>
      <param name="binder">Provides information about the invoke operation.</param>
      <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</param>
      <param name="result">The result of the object invocation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</summary>
      <param name="binder">Provides information about the dynamic operation. The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member to which the value is being assigned. For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Provides implementation for unary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</summary>
      <param name="binder">Provides information about the unary operation. The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</param>
      <param name="result">The result of the unary operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Represents an object whose members can be dynamically added and removed at run time.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initializes a new <see langword="ExpandoObject" /> that does not have members.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</summary>
      <param name="parameter">The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</param>
      <returns>The object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="args">An array of arguments of the dynamic get index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="args">An array of arguments of the dynamic get member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>
        <see langword="true" /> if case is ignored; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Represents a dynamic object, that can have its operations bound at runtime.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.</summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.</summary>
      <returns>
        <see langword="true" /> if this get member operation should invoke properties when they perform the get operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">An array of arguments of the dynamic invoke operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">An array of arguments of the dynamic invoke member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>
        <see langword="true" /> if case is ignored; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Gets the name of the member to invoke.</summary>
      <returns>The name of the member to invoke.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="args">An array of arguments of the dynamic set index operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="args">An array of arguments of the dynamic set member operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>
        <see langword="true" /> if case is ignored; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The unary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic unary operation.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <param name="target">The target of the dynamic unary operation.</param>
      <param name="errorSuggestion">The binding result in case the binding fails, or null.</param>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>The unary operation kind.</summary>
      <returns>The object of the <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents the unary operation kind.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Func`10">
      <summary>Encapsulates a method that has nine parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`11">
      <summary>Encapsulates a method that has 10 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`12">
      <summary>Encapsulates a method that has 11 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`13">
      <summary>Encapsulates a method that has 12 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`14">
      <summary>Encapsulates a method that has 13 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`15">
      <summary>Encapsulates a method that has 14 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`16">
      <summary>Encapsulates a method that has 15 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.Func`17">
      <summary>Encapsulates a method that has 16 parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
      <returns>The return value of the method that this delegate encapsulates.</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>Specifies whether the underlying handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Specifies that the handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Specifies that the handle is not inheritable by child processes.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>Represents a memory-mapped file.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)">
      <summary>Creates a memory-mapped file from an existing file with the specified access mode, name, inheritability, and capacity.</summary>
      <param name="fileStream">The file stream of the existing file.</param>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of <c>filestream</c>.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file.  
 This parameter can't be set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <param name="leaveOpen">A value that indicates whether to close the source file stream when the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> is disposed.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is <see langword="null" /> or an empty string.  
-or-  
<paramref name="capacity" /> and the length of the file are zero.  
-or-  
<paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value, which is not allowed.  
-or-  
<paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> and <paramref name="capacity" /> is larger than the length of <see langword="filestream" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.  
-or-  
<paramref name="capacity" /> is less than the file size.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.  
-or-  
<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>Creates a memory-mapped file from a file on disk.</summary>
      <param name="path">The path to file to map.</param>
      <returns>A memory-mapped file.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method.  
-or-  
<paramref name="path" /> refers to an invalid device.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>Creates a memory-mapped file that has the specified access mode from a file on disk.</summary>
      <param name="path">The path to the file to map.</param>
      <param name="mode">Access mode; must be <see cref="F:System.IO.FileMode.Open" />.</param>
      <returns>A memory-mapped file that has the specified access mode.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method.  
-or-  
<paramref name="path" /> refers to an invalid device.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.OpenOrCreate" /> and the file on disk does not exist.  
-or-  
An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>Creates a memory-mapped file that has the specified access mode and name from a file on disk.</summary>
      <param name="path">The path to the file to map.</param>
      <param name="mode">Access mode; must be <see cref="F:System.IO.FileMode.Open" />.</param>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <returns>A memory-mapped file that has the specified name and access mode.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method.  
-or-  
<paramref name="path" /> refers to an invalid device.  
-or-  
<paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.OpenOrCreate" /> and the file on disk does not exist.  
-or-  
An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, and capacity from a file on disk.</summary>
      <param name="path">The path to the file to map.</param>
      <param name="mode">Access mode; can be any of the <see cref="T:System.IO.FileMode" /> enumeration values except <see cref="F:System.IO.FileMode.Append" />.</param>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method.  
-or-  
<paramref name="path" /> refers to an invalid device.  
-or-  
<paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.  
-or-  
<paramref name="capacity" /> is less than zero.  
-or-  
<paramref name="capacity" /> is less than the file size (but not zero).  
-or-  
<paramref name="capacity" /> is zero, and the size of the file on disk is also zero.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, capacity, and access type from a file on disk.</summary>
      <param name="path">The path to the file to map.</param>
      <param name="mode">Access mode; can be any of the <see cref="T:System.IO.FileMode" /> enumeration values except <see cref="F:System.IO.FileMode.Append" />.</param>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="access" /> is not an allowed value.  
-or-  
<paramref name="path" /> specifies an empty file.  
-or-  
<paramref name="access" /> is specified as <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> and capacity is greater than the size of the file indicated by <paramref name="path" />.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.  
-or-  
<paramref name="capacity" /> is less than zero.  
-or-  
<paramref name="capacity" /> is less than the file size (but not zero).  
-or-  
<paramref name="capacity" /> is zero, and the size of the file on disk is also zero.  
-or-  
<paramref name="access" /> is not a defined <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> value.  
-or-  
The size of the file indicated by <paramref name="path" /> is greater than <paramref name="capacity" />.</exception>
      <exception cref="T:System.IO.IOException">-or-  
 An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified capacity in system memory.</summary>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <returns>A memory-mapped file that has the specified name and capacity.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: Calls to the <c>CreateNew</c> method with a named memory mapped file (that is, a non-null <paramref name="mapName" />) are supported on Windows operating systems only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified capacity and access type in system memory.</summary>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: Calls to the <c>CreateNew</c> method with a named memory mapped file (that is, a non-null <paramref name="mapName" />) are supported on Windows operating systems only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>Creates a memory-mapped file that has the specified name, capacity, access type, memory allocation options and inheritability.</summary>
      <param name="mapName">A name to assign to the memory-mapped file, or <see langword="null" /> for a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> that you do not intend to share across processes.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <param name="options">A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</param>
      <param name="inheritability">A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.  
-or-  
<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core only: Calls to the <c>CreateNew</c> method with a named memory mapped file (that is, a non-null <paramref name="mapName" />) are supported on Windows operating systems only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>Creates or opens a memory-mapped file that has the specified name and capacity in system memory.</summary>
      <param name="mapName">The name of the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <returns>A memory-mapped file that has the specified name and size.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.  
-or-  
<paramref name="capacity" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates or opens a memory-mapped file that has the specified name, capacity and access type in system memory.</summary>
      <param name="mapName">The name of the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.  
-or-  
<paramref name="capacity" /> is less than or equal to zero.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified access to the file; for example, access is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>Creates a new empty memory mapped file or opens an existing memory mapped file if one exists with the same name. If opening an existing file, the capacity, options, and memory arguments will be ignored.</summary>
      <param name="mapName">The name of the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <param name="options">A bitwise combination of values that indicate the memory allocation options to apply to the file.</param>
      <param name="inheritability">A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.  
-or-  
<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.  
-or-  
<paramref name="capacity" /> is less than or equal to zero.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.  
-or-  
<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified access to the file; for example, access is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends approximately at the end of the memory-mapped file.</param>
      <returns>A randomly accessible block of memory.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.  
-or-  
<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset, size, and access restrictions.</summary>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends approximately at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <returns>A randomly accessible block of memory.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.  
-or-  
<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>Creates a stream that maps to a view of the memory-mapped file.</summary>
      <returns>A stream of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends approximately at the end of the memory-mapped file.</param>
      <returns>A stream of memory that has the specified offset and size.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.  
-or-  
<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset, size, and access type.</summary>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends approximately at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <returns>A stream of memory that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.  
-or-  
<paramref name="size" /> is greater than the logical address space.  
-or-  
<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.  
-or-  
<paramref name="access" /> is invalid for the memory-mapped file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>Opens an existing memory-mapped file that has the specified name in system memory.</summary>
      <param name="mapName">The name of the memory-mapped file.</param>
      <returns>A memory-mapped file that has the specified name.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>Opens an existing memory-mapped file that has the specified name and access rights in system memory.</summary>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>Opens an existing memory-mapped file that has the specified name, access rights, and inheritability in system memory.</summary>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.  
-or-  
<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The requested access is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>Gets the file handle of a memory-mapped file.</summary>
      <returns>The handle to the memory-mapped file.</returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>Specifies access capabilities and restrictions for a memory-mapped file or view.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>Read and write access to the file, with the restriction that any write operations will not be seen by other processes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>Read-only access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>Read access to the file that can store and run executable code.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>Read and write access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>Read and write access to the file that can store and run executable code.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>Write-only access to file.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>Provides memory allocation options for memory-mapped files.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>Memory allocation is delayed until a view is created with either the <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> or <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> method.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>No memory allocation options are applied.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>Specifies access rights to a memory-mapped file that is not associated with a file on disk.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>The right to get or set permissions on a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>The right to change the security and audit rules associated with a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>The right to read and write to a file with the restriction that write operations will not be seen by other processes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>The right to delete a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>The right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>The right to exert full control over a file, and to modify access control and audit rules. This value represents the right to do anything with a file and is the combination of all rights in this enumeration.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>The right to open and copy a file as read-only.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>The right to open and copy a folder or file as read-only, and to run application files. This right includes the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> right and the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> right.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>The right to open and copy access and audit rules from a file. This does not include the right to read data, file system attributes, or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>The right to open and copy a file, and the right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>The right to open and copy a file, the right to add data to a file or remove data from a file, and the right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>The right to change the owner of a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>The right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>Represents a randomly accessed view of a memory-mapped file.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>Clears all buffers for this view and causes any buffered data to be written to the underlying file.</summary>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the accessor was closed.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset">
      <summary>Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.</summary>
      <returns>The number of bytes between the starting position of this view and the beginning of the memory-mapped file.</returns>
      <exception cref="T:System.InvalidOperationException">The object from which this instance was created is <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file.</returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>Represents a view of a memory-mapped file as a sequentially accessed stream.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying file.</summary>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.PointerOffset">
      <summary>Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file.</summary>
      <returns>The number of bytes between the starting position of this view and the beginning of the memory-mapped file.</returns>
      <exception cref="T:System.InvalidOperationException">The object from which this instance was created is <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file.</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class from the specified handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.  
 -or-  
 The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified pipe direction and a string representation of the pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeHandleAsString" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeHandleAsString" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified string representation of the pipe handle.</summary>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> is not a valid pipe handle.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</summary>
      <returns>The <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported.</exception>
      <exception cref="T:System.NotSupportedException">The transmission mode is <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>The <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> supported by the current pipe.</returns>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class from the specified pipe handles.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="serverSafePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object will encapsulate.</param>
      <param name="clientSafePipeHandle">A safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.  
 -or-  
 The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction and inheritability mode.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction, inheritability mode, and buffer size.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.  
 Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than or equal to 0.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.  
-or-  
<paramref name="bufferSize" /> is less than 0.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>Gets the safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</summary>
      <returns>A handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>Closes the local copy of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>Gets the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle as a string.</summary>
      <returns>A string that represents the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object. For anonymous pipes, transmission mode must be <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</summary>
      <returns>The reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported.</exception>
      <exception cref="T:System.NotSupportedException">The property is set to <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, which is not supported for anonymous pipes.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>Gets the pipe transmission mode that is supported by the current pipe.</summary>
      <returns>The <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> that is supported by the current pipe.</returns>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class for the specified pipe handle with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">
        <see langword="true" /> to indicate that the handle was opened asynchronously; otherwise, <see langword="false" />.</param>
      <param name="isConnected">
        <see langword="true" /> to indicate that the pipe is connected; otherwise, <see langword="false" />.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.IO.IOException">The stream has been closed.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction and pipe options.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, and security impersonation level.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.  
-or-  
<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, security impersonation level, and inheritability mode.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle will be inheritable by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.  
-or-  
<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.  
-or-  
<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>Connects to a waiting server with an infinite time-out value.</summary>
      <exception cref="T:System.InvalidOperationException">The client is already connected.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>Connects to a waiting server within the specified time-out period.</summary>
      <param name="timeout">The number of milliseconds to wait for the server to respond before the connection times out.</param>
      <exception cref="T:System.TimeoutException">Could not connect to the server within the specified <paramref name="timeout" /> period.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than 0 and not set to <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <exception cref="T:System.InvalidOperationException">The client is already connected.</exception>
      <exception cref="T:System.IO.IOException">The server is connected to another client and the time-out period has expired.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync">
      <summary>Asynchronously connects to a waiting server with an infinite timeout period.</summary>
      <returns>A task that represents the asynchronous connect operation.</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32)">
      <summary>Asynchronously connects to a waiting server within the specified timeout period.</summary>
      <param name="timeout">The number of milliseconds to wait for the server to respond before the connection times out.</param>
      <returns>A task that represents the asynchronous connect operation.</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously connects to a waiting server within the specified timeout period and monitors cancellation requests.</summary>
      <param name="timeout">The number of milliseconds to wait for the server to respond before the connection times out.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous connect operation.</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously connects to a waiting server and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous connect operation.</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>Gets the number of server instances that share the same pipe name.</summary>
      <returns>The number of server instances that share the same pipe name.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.  
 -or-  
 The current <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object has not yet connected to a <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying pipe handle is closed.</exception>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, supporting both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class from the specified pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">
        <see langword="true" /> to indicate that the handle was opened asynchronously; otherwise, <see langword="false" />.</param>
      <param name="isConnected">
        <see langword="true" /> to indicate that the pipe is connected; otherwise, <see langword="false" />.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> is not a valid pipe handle.  
-or-  
The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name and pipe direction.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, and maximum number of server instances.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name. You can pass <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> for this value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
A non-negative number is required.  
-or-  
<paramref name="maxNumberofServerInstances" /> is less than -1 or greater than 254 (-1 indicates <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)  
-or-  
<see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" /> is required.  
-or-  
Access rights is limited to the <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" /> , <see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> , and <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" /> flags.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, and transmission mode.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name. You can pass <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> for this value.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="maxNumberofServerInstances" /> is less than -1 or greater than 254 (-1 indicates <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, and pipe options.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name. You can pass <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> for this value.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="maxNumberofServerInstances" /> is less than -1 or greater than 254 (-1 indicates <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)  
-or-  
<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, and recommended in and out buffer sizes.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name. You can pass <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> for this value.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".  
-or-  
<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="maxNumberofServerInstances" /> is less than -1 or greater than 254 (-1 indicates <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)  
-or-  
<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.  
-or-  
<paramref name="inBufferSize" /> is negative.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> contains a colon (":").</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to wait for a client to connect.</summary>
      <param name="callback">The method to call when a client connects to the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
      <returns>An object that references the asynchronous request.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.  
 -or-  
 A pipe connection has already been established.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>Disconnects the current connection.</summary>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.  
 -or-  
 The connected pipe has already disconnected.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to wait for a client to connect.</summary>
      <param name="asyncResult">The pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Finalize">
      <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> instance is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>Gets the user name of the client on the other end of the pipe.</summary>
      <returns>The user name of the client on the other end of the pipe.</returns>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.  
 -or-  
 The connected pipe has already disconnected.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.  
 -or-  
 The user name of the client is longer than 19 characters.</exception>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>Represents the maximum number of server instances that the system resources allow.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>Calls a delegate while impersonating the client.</summary>
      <param name="impersonationWorker">The delegate that specifies a method to call.</param>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.  
 -or-  
 The connected pipe has already disconnected.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.  
 -or-  
 An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>Waits for a client to connect to this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">A pipe connection has already been established.  
 -or-  
 The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync">
      <summary>Asynchronously waits for a client to connect to this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</summary>
      <returns>A task that represents the asynchronous wait operation.</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync(System.Threading.CancellationToken)">
      <summary>Asynchronously waits for a client to connect to this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object and monitors cancellation requests.</summary>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous wait operation.</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>Specifies the direction of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>Specifies that the pipe direction is in.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>Specifies that the pipe direction is two-way.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>Specifies that the pipe direction is out.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>Provides options for creating a <see cref="T:System.IO.Pipes.PipeStream" /> object. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>Indicates that the pipe can be used for asynchronous reading and writing.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.CurrentUserOnly" />
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>Indicates that there are no additional parameters.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>Indicates that the system should write through any intermediate cache and go directly to the pipe.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> object around a pipe, which supports both anonymous and named pipes.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" /> value and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" />, <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="transmissionMode">One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode of the pipe object.</param>
      <param name="outBufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.  
-or-  
<paramref name="transmissionMode" /> is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.  
-or-  
<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation.</summary>
      <param name="buffer">The buffer to read data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">The method to call when the asynchronous read operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous read.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.  
-or-  
<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation.</summary>
      <param name="buffer">The buffer that contains the data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">The method to call when the asynchronous write operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.  
-or-  
<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports read operations.</summary>
      <returns>
        <see langword="true" /> if the stream supports read operations; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seek operations.</summary>
      <returns>
        <see langword="false" /> in all cases.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports write operations.</summary>
      <returns>
        <see langword="true" /> if the stream supports write operations; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>Verifies that the pipe is in a proper state for getting or setting properties.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>Verifies that the pipe is in a connected state for read operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>Verifies that the pipe is in a connected state for write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Pipes.PipeStream" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read request.</summary>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <returns>The number of bytes that were read. A return value of 0 indicates the end of the stream (the pipe has been closed).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>Ends a pending asynchronous write request.</summary>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>Gets the size, in bytes, of the inbound buffer for a pipe.</summary>
      <returns>An integer value that represents the inbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unreadable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>Initializes a <see cref="T:System.IO.Pipes.PipeStream" /> object from the specified <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object.</summary>
      <param name="handle">The <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object of the pipe to initialize.</param>
      <param name="isExposed">
        <see langword="true" /> to expose the handle; otherwise, <see langword="false" />.</param>
      <param name="isAsync">
        <see langword="true" /> to indicate that the handle was opened asynchronously; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.IO.IOException">A handle cannot be bound to the pipe.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>Gets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously or synchronously.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>Gets or sets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object is connected.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.IO.Pipes.PipeStream" /> object is connected; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>Gets a value indicating whether a handle to a <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed.</summary>
      <returns>
        <see langword="true" /> if a handle to the <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</summary>
      <returns>
        <see langword="true" /> if there are no more characters to read in the message; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe is not connected.  
 -or-  
 The pipe handle has not been set.  
 -or-  
 The pipe's <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> property value is not <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>Gets the length of a stream, in bytes.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>Gets the size, in bytes, of the outbound buffer for a pipe.</summary>
      <returns>The outbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unwriteable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>Gets or sets the current position of the current stream.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from a stream and writes the data to a specified buffer starting at a specified position for a specified length.</summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The byte offset in the <paramref name="buffer" /> array at which the bytes that are read will be placed.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>The total number of bytes that are read into <paramref name="buffer" />. This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.  
-or-  
<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Span{System.Byte})">
      <summary>Reads a sequence of bytes from the current stream, writes them to a byte array, and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source.</param>
      <returns>The total number of bytes read into the <paramref name="buffer" />. This can be less than the number of bytes allocated in <paramref name="buffer" /> if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <exception cref="T:System.ArgumentNullException">The number of bytes read was longer than the buffer length.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or-
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream to a byte array starting at a specified position for a specified number of bytes, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous read operation. The value of its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or-
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously reads a sequence of bytes from the current stream, writes them to a byte memory range, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</summary>
      <param name="buffer">The region of memory to write the data into.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous read operation. The value of its <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or it can be 0 (zero) if the end of the stream has been reached.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or- 
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>Reads a byte from a pipe.</summary>
      <returns>The byte, cast to <see cref="T:System.Int32" />, or -1 indicates the end of the stream (the pipe has been closed).</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>Gets or sets the reading mode for a <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates how the <see cref="T:System.IO.Pipes.PipeStream" /> object reads from the pipe.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The supplied value is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.</exception>
      <exception cref="T:System.NotSupportedException">The supplied value is not a supported <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value for this pipe stream.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.  
 -or-  
 The pipe is waiting to connect with a named client.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred with a named client.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>Gets the safe handle for the local end of the pipe that the current <see cref="T:System.IO.Pipes.PipeStream" /> object encapsulates.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object for the pipe that is encapsulated by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the specified value.</summary>
      <param name="offset">The point, relative to <paramref name="origin" />, to begin seeking from.</param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>The new position in the stream.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode supported by the current pipe.</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.  
 -or-  
 The pipe is waiting to connect in an anonymous client/server operation or with a named client.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>Waits for the other end of the pipe to read all sent bytes.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The buffer that contains data to write to the pipe.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write to the current stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.  
-or-  
<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">A region of memory. This method copies the contents of this region to the current stream.</param>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="">The pipe is broken.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or-
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Asynchronously writes a specified number of bytes from a byte array starting at a specified position, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> is negative.
-or-
The <paramref name="count" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" />.Length - <paramref name="offset" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.NotSupportedException">Stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="">The pipe is broken.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or-
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary>
      <param name="buffer">The region of memory to write data from.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
      <exception cref="T:System.NotSupportedException">Stream does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Cannot access a closed pipe.</exception>
      <exception cref="">The pipe is broken.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe hasn't been connected yet.
-or-
The pipe is in a disconnected state.
-or-
The pipe handle has not been set.  (Did your <see cref="T:System.IO.Pipes.PipeStream" /> implementation call <see cref="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)" />?</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream.</summary>
      <param name="value">The byte to write to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>Represents the method to call as the client.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>Specifies the transmission mode of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of bytes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of messages.</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Appends a value to the end of the sequence.</summary>
      <param name="source">A sequence of values.</param>
      <param name="element">The value to append to <paramref name="source" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A new sequence that ends with <paramref name="element" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</summary>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <paramref name="TResult" />.</param>
      <typeparam name="TResult">The type to cast the elements of <paramref name="source" /> to.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified sequence satisfy a condition.</summary>
      <param name="source">A sequence that contains elements to be tested and counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The element at the specified position in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</summary>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in the specified sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value at the last position in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the maximum value in a generic sequence.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the minimum value in a generic sequence.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</summary>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Adds a value to the beginning of the sequence.</summary>
      <param name="source">A sequence of values.</param>
      <param name="element">The value to prepend to <paramref name="source" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A new sequence that begins with <paramref name="element" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a sequence of integral numbers within a specified range.</summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <returns>An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.  
-or-  
<paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a sequence that contains one repeated value.</summary>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>
        <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>
        <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.  
 -or-  
 The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 More than one element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An array that contains the elements from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.  
-or-  
<paramref name="keySelector" /> produces a key that is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.  
-or-  
<paramref name="keySelector" /> produces a key that is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.  
-or-  
<paramref name="keySelector" /> produces a key that is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.  
-or-  
<paramref name="keySelector" /> produces a key that is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</summary>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>Produces a sequence of tuples with elements from the two specified sequences.</summary>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <returns>A sequence of tuples with elements taken from the first and second sequences, in that order.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</summary>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
      <typeparam name="T">The data type of the value that results from executing the expression tree.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor`1" /> class.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Represents an <see cref="T:System.Collections.IEnumerable" /> as an <see cref="T:System.Linq.EnumerableQuery" /> data source.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection as an <see cref="T:System.Linq.IQueryable`1" /> data source.</summary>
      <typeparam name="T">The type of the data in the collection.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates it with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="enumerable">A collection to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates the instance with an expression tree.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Gets the type of the data in the collection that this instance represents.</summary>
      <returns>The type of the data in the collection that this instance represents.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Gets the expression tree that is associated with or that represents this instance.</summary>
      <returns>The expression tree that is associated with or that represents this instance.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Gets the query provider that is associated with this instance.</summary>
      <returns>The query provider that is associated with this instance.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</summary>
      <param name="expression">An expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</param>
      <returns>An <see cref="T:System.Linq.EnumerableQuery`1" /> object that is associated with <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable`1" /> collection of data.</summary>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
      <returns>An EnumerableQuery object that is associated with <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <param name="expression">An expression tree to execute.</param>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</summary>
      <returns>A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Represents an expression that has a binary operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>
        <see langword="true" /> if the expression tree node can be reduced; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Gets the type conversion function that is used by a coalescing or compound assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>
        <see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>
        <see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Gets the left operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Gets the implementing method for the binary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Gets the right operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="left">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</param>
      <param name="conversion">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</param>
      <param name="right">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Represents a block that contains a sequence of expressions where variables can be defined.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Gets the expressions in this block.</summary>
      <returns>The read-only collection containing all the expressions in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Gets the last expression in this block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the last expression in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.BlockExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variables">The <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> property of the result.</param>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> property of the result.</param>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Gets the variables defined in this block.</summary>
      <returns>The read-only collection containing all the variables defined in this block.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Represents a catch statement in a try block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Gets the body of the catch block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the catch body.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Gets the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Gets the type of <see cref="T:System.Exception" /> this handler catches.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of <see cref="T:System.Exception" /> this handler catches.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variable">The <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> property of the result.</param>
      <param name="filter">The <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Gets a reference to the <see cref="T:System.Exception" /> object caught by this handler.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ParameterExpression" /> object representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Represents an expression that has a conditional operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Gets the expression to execute if the test evaluates to <see langword="false" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Gets the expression to execute if the test evaluates to <see langword="true" />.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is <see langword="true" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Gets the test of the conditional operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the test of the conditional operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression</summary>
      <param name="test">The <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property of the result.</param>
      <param name="ifTrue">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property of the result.</param>
      <param name="ifFalse">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property of the result.</param>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Represents an expression that has a constant value.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConstantExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Gets the value of the constant expression.</summary>
      <returns>An <see cref="T:System.Object" /> equal to the value of the represented expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Gets the <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Gets the end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Gets the end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Gets the value to indicate if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Gets the start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Gets the start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Represents the default value of a type or an empty expression.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DefaultExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Represents a dynamic operation.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Gets the arguments to the dynamic operation.</summary>
      <returns>The read-only collections containing the arguments to the dynamic operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the run-time behavior of the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the run-time behavior of the dynamic site.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Gets the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />,  and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />,  and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Rewrite this node replacing the dynamic expression's arguments with the provided values. The number of <paramref name="args" /> needs to match the number of the current expression. You should not use this type. It is only public due to assembly refactoring, and it is used internally for performance optimizations. This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</summary>
      <param name="args">The arguments.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />, the rewritten expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DynamicExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Compares the value sent to the parameter, <paramref name="arguments" />, to the <see langword="Arguments" /> property of the current instance of <see langword="DynamicExpression" />. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new <see langword="DynamicExpression" /> instance is returned that is identical to the current instance except that the <see langword="Arguments" /> property is set to the value of parameter <paramref name="arguments" />.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Represents a visitor or rewriter for dynamic expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments for a method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit" /> object.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit" /> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types. This is an <see langword="abstract" /> class.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</summary>
      <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
 -or-  
 <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
-or-  
<paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</summary>
      <param name="array">An expression that represents the multidimensional array.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</summary>
      <param name="array">An expression representing the array to index.</param>
      <param name="indexes">An array that contains expressions used to index the array.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</summary>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.  
-or-  
The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</summary>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.  
-or-  
<paramref name="array" />.Type represents an array type whose rank is not 1.  
-or-  
<paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</summary>
      <param name="array">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</param>
      <param name="indexes">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.  
-or-  
The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</summary>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.  
-or-  
The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.  
-or-  
<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.  
-or-  
The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.  
-or-  
<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</summary>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <param name="arg4">The fifth expression in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.  
-or-  
<paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.  
-or-  
<paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.  
-or-  
The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.  
-or-  
One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.  
-or-  
<paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.  
-or-  
<paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.  
-or-  
The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.  
-or-  
One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</summary>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.  
 -or-  
 More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</summary>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arguments">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <param name="arg4">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.  
 -or-  
 One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</summary>
      <param name="type">The type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.  
 -or-  
 More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
      <returns>
        <see langword="true" /> if the node can be reduced; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</summary>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</summary>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.  
-or-  
<paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.  
-or-  
<paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</summary>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</summary>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.  
 -or-  
 <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.  
 -or-  
 The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.  
 -or-  
 <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.  
 -or-  
 <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.  
 -or-  
 The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.  
 -or-  
 <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</summary>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
      <param name="startLine">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="startColumn">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="endLine">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater or equal than the start line.</param>
      <param name="endColumn">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</summary>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</summary>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).  
 -or-  
 The method that <paramref name="addMethod" /> represents is not an instance method.  
 -or-  
 <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</summary>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The method that addMethod represents is not named "Add" (case insensitive).  
 -or-  
 The method that addMethod represents is not an instance method.  
 -or-  
 arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Creates an empty expression that has <see cref="T:System.Void" /> type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <paramref name="expression" /> must be <see langword="null" />.</param>
      <param name="field">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is <see langword="null" />.  
-or-  
The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />. This can be null for static fields.</param>
      <param name="fieldName">The name of a field to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <param name="expression">The containing object of the field. This can be null for static fields.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</param>
      <param name="fieldName">The field to be accessed.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</summary>
      <param name="typeArgs">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</param>
      <returns>The type of a <c>System.Action</c> delegate that has the specified type arguments.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains more than sixteen elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</summary>
      <param name="typeArgs">The type arguments of the delegate.</param>
      <returns>The delegate type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <param name="typeArgs">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</param>
      <returns>The type of a <c>System.Func</c> delegate that has the specified type arguments.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison. The implementing method can be specified.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values. The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</summary>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
      <param name="defaultValue">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</summary>
      <param name="name">The name of the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</summary>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</summary>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <param name="name">The name of the label.</param>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="parameters" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains more than sixteen elements.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with an enumerable collection of parameter expressions.</summary>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.  
-or-  
One or more elements in <paramref name="parameters" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.  
-or-  
<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.  
-or-  
<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with an array of parameter expressions.</summary>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.  
-or-  
One or more elements in <paramref name="parameters" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.  
-or-  
<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.  
-or-  
<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.</summary>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with an enumerable collection of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.  
-or-  
One or more elements in <paramref name="parameters" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.  
-or-  
<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.  
-or-  
<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with an array of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is <see langword="null" />.  
-or-  
One or more elements in <paramref name="parameters" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.  
-or-  
<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.  
-or-  
<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.  
-or-  
The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging info.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.</summary>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.  
-or-  
The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.  
-or-  
The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.  
-or-  
The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</summary>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.  
-or-  
The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.  
 -or-  
 The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.  
 -or-  
 The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.  
 -or-  
 More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.  
 -or-  
 The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.  
 -or-  
 The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.  
 -or-  
 More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.  
-or-  
<paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.  
-or-  
<paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
One or more elements of <paramref name="initializers" /> are <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.  
-or-  
<paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.  
-or-  
<paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <param name="body">The body of the loop.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</summary>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <param name="continue">The continue target used by the loop body.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function. This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment.</param>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</summary>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />. The value passed to the label upon jumping can also be specified.</summary>
      <param name="kind">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</summary>
      <param name="instance">The object to which the property belongs. It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</param>
      <param name="indexer">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</param>
      <param name="arguments">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to. This can be null for static members.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</param>
      <returns>The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</summary>
      <param name="type">The result type of the try expression. If null, body and all handlers must have identical type.</param>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
      <param name="fault">The body of the fault block. Pass null if the try block has no fault block associated with it.</param>
      <param name="handlers">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</summary>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</param>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</summary>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.  
-or-  
The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.  
-or-  
The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.  
-or-  
The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.  
-or-  
The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.  
-or-  
<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.  
-or-  
<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The constructor that <paramref name="constructor" /> represents has at least one parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is <see langword="null" />.  
-or-  
An element of <paramref name="arguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is <see langword="null" />.  
-or-  
An element of <paramref name="arguments" /> is <see langword="null" />.  
-or-  
An element of <paramref name="members" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.  
 -or-  
 An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is <see langword="null" />.  
-or-  
An element of <paramref name="arguments" /> is <see langword="null" />.  
-or-  
An element of <paramref name="members" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.  
 -or-  
 An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is <see langword="null" />.  
-or-  
An element of <paramref name="arguments" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.  
 -or-  
 The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</summary>
      <param name="type">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The type that <paramref name="type" /> represents does not have a constructor without parameters.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.  
-or-  
An element of <paramref name="bounds" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.  
-or-  
An element of <paramref name="bounds" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
An element of <paramref name="initializers" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.  
-or-  
An element of <paramref name="initializers" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The unary not operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation. The implementing method can be specified.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.  
-or-  
<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">
        <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Returns the expression representing the ones complement.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns the expression representing the ones complement.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
 -or-  
 <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
-or-  
<paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
 -or-  
 <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.  
-or-  
<paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is <see langword="null" />.  
-or-  
The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.  
-or-  
The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="property">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is <see langword="null" />.  
-or-  
The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />. This can be <see langword="null" /> for static properties.</param>
      <param name="propertyName">The name of a property to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="propertyName">The name of the indexer.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</summary>
      <param name="expression">The containing object of the property. This can be null for static properties.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</param>
      <param name="propertyName">The property to be accessed.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />. This can be null for static members.</param>
      <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</summary>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</summary>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</summary>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</summary>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</summary>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</summary>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
      <param name="documentType">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</summary>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</summary>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
      <param name="body">The body of the try block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</summary>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</summary>
      <param name="body">The body of the try block.</param>
      <param name="fault">The body of the fault block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</summary>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
      <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
      <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The unary plus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.  
-or-  
<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</summary>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
      <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
      <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</summary>
      <typeparam name="TDelegate">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</summary>
      <param name="preferInterpretation">
        <see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</param>
      <returns>A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
      <returns>A delegate containing the compiled version of the lambda.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="body">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</param>
      <param name="parameters">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Describes the node types for the nodes of an expression tree.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>An addition operation, such as <c>a + b</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>An addition compound assignment operation, such as <c>(a += b)</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>An addition compound assignment operation, such as <c>(a += b)</c>, with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>An addition operation, such as <c>(a + b)</c>, with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>A bitwise or logical <see langword="AND" /> operation, such as <c>(a &amp; b)</c> in C# and <c>(a And b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>A conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />. It corresponds to <c>(a &amp;&amp; b)</c> in C# and <c>(a AndAlso b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>A bitwise or logical <see langword="AND" /> compound assignment operation, such as <c>(a &amp;= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>An indexing operation in a one-dimensional array, such as <c>array[index]</c> in C# or <c>array(index)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>An operation that obtains the length of a one-dimensional array, such as <c>array.Length</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>An assignment operation, such as <c>(a = b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>A block of expressions.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>A method call, such as in the <c>obj.sampleMethod()</c> expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>A node that represents a null coalescing operation, such as <c>(a ?? b)</c> in C# or <c>If(a, b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>A conditional operation, such as <c>a &gt; b ? a : b</c> in C# or <c>If(a &gt; b, a, b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>A constant value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>A cast or conversion operation, such as <c>(SampleType)obj</c> in C#or <c>CType(obj, SampleType)</c> in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>A cast or conversion operation, such as <c>(SampleType)obj</c> in C#or <c>CType(obj, SampleType)</c> in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debugging information.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>A unary decrement operation, such as <c>(a - 1)</c> in C# and Visual Basic. The object <c>a</c> should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>A default value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>A division operation, such as <c>(a / b)</c>, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>An division compound assignment operation, such as <c>(a /= b)</c>, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>A dynamic operation.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>A node that represents an equality comparison, such as <c>(a == b)</c> in C# or <c>(a = b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>A bitwise or logical <see langword="XOR" /> operation, such as <c>(a ^ b)</c> in C# or <c>(a Xor b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>A bitwise or logical <see langword="XOR" /> compound assignment operation, such as <c>(a ^= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>An extension expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>A "go to" expression, such as <c>goto Label</c> in C# or <c>GoTo Label</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>A "greater than" comparison, such as <c>(a &gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>A "greater than or equal to" comparison, such as <c>(a &gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>A unary increment operation, such as <c>(a + 1)</c> in C# and Visual Basic. The object <c>a</c> should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>An index operation or an operation that accesses a property that takes arguments.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>An operation that invokes a delegate or lambda expression, such as <c>sampleDelegate.Invoke()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>A <see langword="false" /> condition value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>A <see langword="true" /> condition value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>A label.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>A lambda expression, such as <c>a =&gt; a + a</c> in C# or <c>Function(a) a + a</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>A bitwise left-shift operation, such as <c>(a &lt;&lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>A bitwise left-shift compound assignment, such as <c>(a &lt;&lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>A "less than" comparison, such as <c>(a &lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>A "less than or equal to" comparison, such as <c>(a &lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>An operation that creates a new <see cref="T:System.Collections.IEnumerable" /> object and initializes it from a list of elements, such as <c>new List&lt;SampleType&gt;(){ a, b, c }</c> in C# or <c>Dim sampleList = { a, b, c }</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>A loop, such as <c>for</c> or <c>while</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>An operation that reads from a field or property, such as <c>obj.SampleProperty</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>An operation that creates a new object and initializes one or more of its members, such as <c>new Point { X = 1, Y = 2 }</c> in C# or <c>New Point With {.X = 1, .Y = 2}</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>An arithmetic remainder operation, such as <c>(a % b)</c> in C# or <c>(a Mod b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>An arithmetic remainder compound assignment operation, such as <c>(a %= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>A multiplication operation, such as <c>(a * b)</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>A multiplication compound assignment operation, such as <c>(a *= b)</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>A multiplication compound assignment operation, such as <c>(a *= b)</c>, that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>An multiplication operation, such as <c>(a * b)</c>, that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>An arithmetic negation operation, such as <c>(-a)</c>. The object <c>a</c> should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>An arithmetic negation operation, such as <c>(-a)</c>, that has overflow checking. The object <c>a</c> should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>An operation that calls a constructor to create a new object, such as <c>new SampleType()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>An operation that creates a new array, in which the bounds for each dimension are specified, such as <c>new SampleType[dim1, dim2]</c> in C# or <c>New SampleType(dim1, dim2)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <c>new SampleType[]{a, b, c}</c> in C# or <c>New SampleType(){a, b, c}</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>A bitwise complement or logical negation operation. In C#, it is equivalent to <c>(~a)</c> for integral types and to <c>(!a)</c> for Boolean values. In Visual Basic, it is equivalent to <c>(Not a)</c>. The object <c>a</c> should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>An inequality comparison, such as <c>(a != b)</c> in C# or <c>(a &lt;&gt; b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>A ones complement operation, such as <c>(~a)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>A bitwise or logical <see langword="OR" /> operation, such as <c>(a | b)</c> in C# or <c>(a Or b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>A bitwise or logical <see langword="OR" /> compound assignment, such as <c>(a |= b)</c> in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>A short-circuiting conditional <see langword="OR" /> operation, such as <c>(a || b)</c> in C# or <c>(a OrElse b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>A unary postfix decrement, such as <c>(a--)</c>. The object <c>a</c> should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>A unary postfix increment, such as <c>(a++)</c>. The object <c>a</c> should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>A mathematical operation that raises a number to a power, such as <c>(a ^ b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>A compound assignment operation that raises a number to a power, such as <c>(a ^= b)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>A unary prefix decrement, such as <c>(--a)</c>. The object <c>a</c> should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>A unary prefix increment, such as <c>(++a)</c>. The object <c>a</c> should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters that are defined in the context of the expression it represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>A bitwise right-shift operation, such as <c>(a &gt;&gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>A bitwise right-shift compound assignment operation, such as <c>(a &gt;&gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>A list of run-time variables. For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>A subtraction operation, such as <c>(a - b)</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>A subtraction compound assignment operation, such as <c>(a -= b)</c>, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>A subtraction compound assignment operation, such as <c>(a -= b)</c>, that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>An arithmetic subtraction operation, such as <c>(a - b)</c>, that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>A switch operation, such as <see langword="switch" /> in C# or <see langword="Select Case" /> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>An operation that throws an exception, such as <c>throw new Exception()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>A <see langword="try-catch" /> expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>An explicit reference or boxing conversion in which <see langword="null" /> is supplied if the conversion fails, such as <c>(obj as SampleType)</c> in C# or <c>TryCast(obj, SampleType)</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>An exact type test.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>A type test, such as <c>obj is SampleType</c> in C# or <c>TypeOf obj is SampleType</c> in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>A unary plus operation, such as <c>(+a)</c>. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>An unbox value type operation, such as <see langword="unbox" /> and <see langword="unbox.any" /> instructions in MSIL.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Represents a visitor or rewriter for expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Dispatches the list of expressions to one of the more specialized visit methods in this class.</summary>
      <param name="nodes">The expressions to visit.</param>
      <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visits all nodes in the collection using a specified element visitor.</summary>
      <param name="nodes">The nodes to visit.</param>
      <param name="elementVisitor">A delegate that visits a single element, optionally replacing it with a new element.</param>
      <typeparam name="T">The type of the nodes.</typeparam>
      <returns>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <param name="node">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visits all expressions in the collection, casting the results back to the original expression type.</summary>
      <param name="nodes">The expressions to visit.</param>
      <param name="callerName">The name of the calling method; used to report a better error message.</param>
      <typeparam name="T">The type of the expressions.</typeparam>
      <returns>The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.</returns>
      <exception cref="T:System.InvalidOperationException">The visit method for one of the expressions returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visits the children of the extension expression.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <param name="node">The expression to visit.</param>
      <typeparam name="T">The type of the delegate.</typeparam>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <param name="node">The expression to visit.</param>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>The kind of the "go to" expression. Serves information purposes only.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> object representing the kind of the "go to" expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>The target label where this node jumps to.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing the target label for this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.GotoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="target">The <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property of the result.</param>
      <param name="value">The <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>The value passed to the target, or null if the target is of type System.Void.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the value passed to the target or null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifies what kind of jump this <see cref="T:System.Linq.Expressions.GotoExpression" /> represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a break statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a continue statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a jump to some location.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a return statement.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).  This API is for internal use only.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node. This API is for internal use only.</summary>
      <returns>The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>Returns the argument at <paramref name="index" />, throwing if <paramref name="index" /> is out of bounds. This API is for internal use only.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The CallSite for the DynamicExpression's polymorphic inline cache.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression's polymorphic inline cache.</summary>
      <returns>The delegate type used by the CallSite.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Rewrites this node replacing the dynamic expression's arguments with the provided values.  The number of <paramref name="args" /> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</summary>
      <param name="args">The arguments used to replace this node.</param>
      <returns>The rewritten node, but if no changes were made, then returns the same node.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Represents indexing a property or array.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Gets the arguments that will be used to index the property or array.</summary>
      <returns>The read-only collection containing the arguments that will be used to index the property or array.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Gets the <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, returns null otherwise.</summary>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, otherwise null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>An object to index.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the object to index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.IndexExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="object">The <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Gets the arguments that the delegate or lambda expression is applied to.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments that the delegate is applied to.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Gets the delegate or lambda expression to be applied.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate to be applied.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index, throwing if index is out of bounds, as <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.InvocationExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Represents a label, which can be put in any <see cref="T:System.Linq.Expressions.Expression" /> context. If it is jumped to, it will get the value provided by the corresponding <see cref="T:System.Linq.Expressions.GotoExpression" />. Otherwise, it receives the value in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />. If the <see cref="T:System.Type" /> equals System.Void, no value should be provided.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>The value of the <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow (for example, is not jumped to).</summary>
      <returns>The Expression object representing the value of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LabelExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="target">The <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> property of the result.</param>
      <param name="defaultValue">The <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> property of the result</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Used to represent the target of a <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Gets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>The type of value that is passed when jumping to the label (or <see cref="T:System.Void" /> if no value should be passed).</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the value that is passed when jumping to the label or <see cref="T:System.Void" /> if no value should be passed</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A <see cref="T:System.Delegate" /> that contains the compiled version of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>Produces an interpreted or compiled delegate that represents the lambda expression.</summary>
      <param name="preferInterpretation">
        <see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, <see langword="false" />.</param>
      <returns>A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.LambdaExpression" /> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
      <returns>A delegate containing the compiled version of the lambda.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Gets the name of the lambda expression.</summary>
      <returns>The name of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Gets the return type of the lambda expression.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</summary>
      <returns>
        <see langword="true" /> if the lambda expression will be compiled with the tail call optimization; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Represents a constructor call that has a collection initializer.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>
        <see langword="true" /> if the node can be reduced; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Gets the element initializers that are used to initialize a collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects which represent the elements that are used to initialize the collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Gets the expression that contains a call to the constructor of a collection type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the call to the constructor of a collection type.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ListInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property of the result.</param>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Represents an infinite loop. It can be exited with "break".</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="breakLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> property of the result.</param>
      <param name="continueLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Represents assignment operation for a field or property of an object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Gets the expression to assign to the field or property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that represents the value to assign to the field or property.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding" /> class.</summary>
      <param name="type">The <see cref="T:System.Linq.Expressions.MemberBindingType" /> that discriminates the type of binding that is represented.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to be initialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Gets the type of binding that is represented.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Gets the field or property to be initialized.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be initialized.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression" /> objects.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>A binding that represents initializing a member with the value of an expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>A binding that represents initializing a member of type <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> from a list of elements.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>A binding that represents recursively initializing members of a member.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Represents accessing a field or property.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Gets the containing object of the field or property.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the containing object of the field or property.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Gets the field or property to be accessed.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be accessed.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Returns the node type of this <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Represents calling a constructor and initializing one or more members of the new object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of the newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects which describe how to initialize the members.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>
        <see langword="true" /> if the node can be reduced; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Gets the expression that represents the constructor call.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the constructor call.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduces the <see cref="T:System.Linq.Expressions.MemberInitExpression" /> to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property of the result.</param>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Represents initializing the elements of a collection member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Gets the element initializers for initializing a collection member of a newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection member with.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Represents initializing members of a member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of a member.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects that describe how to initialize the members of the member.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Represents a call to either static or an instance method.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Gets a collection of expressions that represent arguments of the called method.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments to the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the method to be called.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that represents the instance for instance method calls or null for static method calls.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the receiving object of the method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <returns>The number of arguments to the expression tree node as  <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</summary>
      <param name="index">The index of the argument.</param>
      <returns>Returns <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="object">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent either the bounds of the array or the initialization values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Represents a constructor call.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Gets the arguments to the constructor.</summary>
      <returns>A collection of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Gets the called constructor.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> that represents the called constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</summary>
      <returns>A collection of <see cref="T:System.Reflection.MemberInfo" /> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Gets the number of arguments to the expression tree node.</summary>
      <returns>The number of arguments to the expression tree node.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Returns the argument at index, throwing if index is out of bounds.</summary>
      <param name="index">The index of the argument.</param>
      <returns>The argument at index, throwing if index is out of bounds.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Represents a named parameter expression.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">The visitor to visit this node with.</param>
      <returns>The result of visiting this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indicates that this <c>ParameterExpression</c> is to be treated as a <see langword="ByRef" /> parameter.</summary>
      <returns>
        <see langword="true" /> if this <c>ParameterExpression</c> is a <see langword="ByRef" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Gets the name of the parameter or variable.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the parameter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ParameterExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>An expression that provides runtime read/write permission for variables.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="variables">The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>The variables or parameters to which to provide runtime access.</summary>
      <returns>The read-only collection containing parameters that will be provided the runtime access.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Represents one case of a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Gets the body of this case.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object that represents the body of the case block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Gets the values of this case. This case is selected for execution when the <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> matches any of these values.</summary>
      <returns>The read-only collection of the values for this case block.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="testValues">The <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Represents a control expression that handles multiple selections by passing control to <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects for the switch.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Gets the equality comparison method, if any.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object representing the equality comparison method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.SwitchExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="switchValue">The <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> property of the result.</param>
      <param name="cases">The <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> property of the result.</param>
      <param name="defaultBody">The <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</summary>
      <returns>The document type's unique identifier.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>The source file name.</summary>
      <returns>The string representing the source file name.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Returns the language's unique identifier, if any.</summary>
      <returns>The language's unique identifier</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Returns the language vendor's unique identifier, if any.</summary>
      <returns>The language vendor's unique identifier.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Represents a try/catch/finally/fault block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="body">The <see cref="P:System.Linq.Expressions.TryExpression.Body" /> property of the result.</param>
      <param name="handlers">The <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> property of the result.</param>
      <param name="finally">The <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> property of the result.</param>
      <param name="fault">The <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Represents an operation between an expression and a type.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Gets the expression operand of a type test operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression operand of a type test operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Gets the type operand of a type test operation.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type operand of a type test operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="expression">The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Represents an expression that has a unary operator.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>
        <see langword="true" /> if a node can be reduced; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>
        <see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>
        <see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Gets the implementing method for the unary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Gets the operand of the unary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduces the expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <param name="operand">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property of the result.</param>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Represents a collection of objects that have a common key.</summary>
      <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>The key of the <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences of values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <param name="key">The key to search for in the <see cref="T:System.Linq.ILookup`2" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="key" /> is in the <see cref="T:System.Linq.ILookup`2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by a specified key.</summary>
      <param name="key">The key of the desired sequence of values.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by the specified key.</returns>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Represents a sorted sequence.</summary>
      <typeparam name="TElement">The type of the elements of the sequence.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</summary>
      <param name="keySelector">The <see cref="T:System.Func`2" /> used to extract the key for each element.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</param>
      <param name="descending">
        <see langword="true" /> to sort the elements in descending order; <see langword="false" /> to sort the elements in ascending order.</param>
      <typeparam name="TKey">The type of the key produced by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Represents the result of a sorting operation.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Represents the result of a sorting operation.</summary>
      <typeparam name="T">The type of the content of the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Gets the query provider that is associated with this data source.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</summary>
      <typeparam name="T">The type of the data in the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Executes the query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>The value that results from executing the specified query.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
      <returns>The value that results from executing the specified query.</returns>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Represents a collection of keys each mapped to one or more values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Applies a transform function to each key and its associated values and returns the results.</summary>
      <param name="resultSelector">A function to project a result value from each key and its associated values.</param>
      <typeparam name="TResult">The type of the result values produced by <paramref name="resultSelector" />.</typeparam>
      <returns>A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <param name="key">The key to find in the <see cref="T:System.Linq.Lookup`2" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Gets the collection of values indexed by the specified key.</summary>
      <param name="key">The key of the desired collection of values.</param>
      <returns>The collection of values indexed by the specified key.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />. This class cannot be inherited.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Represents a sorted, parallel sequence.</summary>
      <typeparam name="TSource">The type of elements in the source collection.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Applies in parallel an accumulator function over a sequence.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition.</param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded accumulator result from each partition.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seedFactory">A function that returns the initial accumulator value.</param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition.</param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded accumulator result from each partition.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="seedFactory" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether all elements of a sequence satisfy a condition.</summary>
      <param name="source">A sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Determines whether a parallel sequence contains any elements.</summary>
      <param name="source">The sequence to check for emptiness.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether any element of a sequence satisfies a condition.</summary>
      <param name="source">A sequence to whose elements the predicate will be applied.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <param name="source">The sequence to cast as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on non-generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <param name="source">The input sequence.</param>
      <returns>The source sequence which will maintain the original ordering in the subsequent query operators.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">thrown if <paramref name="source" /> contains no elements  
 -or-  
 if AsOrdered is called midway through a query. It is allowed to be called immediately after <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> or <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The source sequence which will maintain the original ordering in the subsequent query operators.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="source" /> contains no elements  
 -or-  
 if <paramref name="source" /> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Enables parallelization of a query.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery" />.</param>
      <returns>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Enables parallelization of a query, as sourced by a custom partitioner that is responsible for splitting the input sequence into partitions.</summary>
      <param name="source">A partitioner over the input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The <paramref name="source" /> as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enables parallelization of a query.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The source as a <see cref="T:System.Linq.ParallelQuery`1" /> to bind to ParallelEnumerable extension methods.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <param name="source">A <see cref="T:System.Linq.ParallelQuery`1" /> to convert to an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The source as an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to bind to sequential extension methods.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Allows an intermediate query to be treated as if no ordering is implied among the elements.</summary>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The source sequence with arbitrary order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">The source sequence.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">A sequence of values that are used to calculate an average.The average of the sequence of values.<paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">(Thrown as inner exception in an <see cref="T:System.AggregateException" />). The <paramref name="selector" /> function returns a value greater than MaxValue for the element type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Converts the elements of a ParallelQuery to the specified type.</summary>
      <param name="source">The sequence that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <returns>A sequence that contains each element of the source sequence converted to the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidCastException">The type of the source sequence could not be converted to <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Concat overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatenates two parallel sequences.</summary>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the concatenated elements of the two input sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</summary>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines in parallel whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the number of elements in a parallel sequence.</summary>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="F:System.Int32.MaxValue" />. (In this case the InnerException is <see cref="T:System.OverflowException" />) -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</summary>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="F:System.Int32.MaxValue" />. (In this case the InnerException is <see cref="T:System.OverflowException" />) -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains default(TSource) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains defaultValue if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</summary>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a parallel sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence.</summary>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The element at the specified position in the source sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</summary>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Returns an empty ParallelQuery{TResult} that has the specified type argument.</summary>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic sequence.</typeparam>
      <returns>An empty sequence whose type argument is <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Except overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Except overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</summary>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two parallel sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence.</summary>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in the specified sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a parallel sequence that satisfies a specified condition.</summary>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>default(TSource) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>default(TSource) if <paramref name="source" /> is empty or if no element passes the test specified by predicate; otherwise, the first element in <paramref name="source" /> that passes the test specified by predicate.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Invokes in parallel the specified action for each element in the <paramref name="source" />.</summary>
      <param name="source">The <see cref="T:System.Linq.ParallelQuery`1" /> whose elements will be processed by <paramref name="action" />.</param>
      <param name="action">An Action to invoke on each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function.</summary>
      <param name="source">An OrderedParallelQuery{TSource}that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A sequence of groups that are sorted descending according to <paramref name="TKey" />.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <param name="source">An <see cref="T:System.Linq.OrderedParallelQuery`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />&gt;.</typeparam>
      <returns>A sequence of groups that are sorted descending according to <paramref name="TKey" />.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Linq.OrderedParallelQuery`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>A sequence of groups that are sorted descending according to <paramref name="TKey" />.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <param name="source">An OrderedParallelQuery{TSource}that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping.</param>
      <param name="comparer">An IComparer{TSource} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the IGrouping</typeparam>
      <returns>A sequence of groups that are sorted descending according to <paramref name="TKey" />.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A sequence of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A sequence of groups.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A sequence of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping{Key, TElement}.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>A sequence of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates in parallel the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>A sequence that has elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>A sequence that has elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Intersect overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Intersect overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</summary>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</summary>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>This Join overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This Join overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>A sequence that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>A sequence that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence.</summary>
      <param name="source">The sequence to return the last element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value at the last position in the source sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a specified condition.</summary>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">The sequence to return an element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>default() if the source sequence is empty; otherwise, the last element in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</summary>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns an Int64 that represents the total number of elements in a parallel sequence.</summary>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.OverflowException">The computed result is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</summary>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.OverflowException">The computed result is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and <paramref name="TSource" /> is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filters the elements of a ParallelQuery based on a specified type.</summary>
      <param name="source">The sequence with elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <returns>A sequence that contains elements from the input sequence filtered by type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in descending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="KeySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a parallel sequence of integral numbers within a specified range.</summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0 -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a parallel sequence that contains one repeated value.</summary>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <returns>A sequence that contains a repeated value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Inverts the order of the elements in a parallel sequence.</summary>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Projects in parallel each element of a sequence into a new form.</summary>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements returned by selector.</typeparam>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</summary>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements returned by selector.</typeparam>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />, based on the index supplied to <paramref name="selector" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query. This condition might occur in streaming scenarios.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements in the result sequence.</typeparam>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> based on the index supplied to <paramref name="collectionSelector" />, and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements to return.</typeparam>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> based on the index supplied to <paramref name="collectionSelector" />, and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <param name="first">A sequence to compare to second.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</summary>
      <param name="first">A sequence to compare to <paramref name="second" />.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element. -or- The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />. -or- More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence, or default() if the sequence contains no elements.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is empty or multiple elements are returned.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains the elements that occur after the specified index in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Count is greater than <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Double.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Double.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Single.MaxValue" />. -or-  One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Single.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Double.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Double.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Single.MaxValue" />. -or-  One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values in the sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="F:System.Single.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a parallel sequence.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by this query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A sequence whose elements are sorted descending according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A sequence whose elements are sorted descending according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates an array from a <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <param name="source">A sequence to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An array that contains the elements from the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function.</summary>
      <param name="source">A sequence to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function and key comparer.</summary>
      <param name="source">A sequence to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to specified key selector and element selector functions.</summary>
      <param name="source">A sequence to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function, a comparer, and an element selector function.</summary>
      <param name="source">A sequence to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <param name="source">A sequence to create a <see cref="T:System.Collections.Generic.List`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates an <see cref="T:System.Linq.ILookup`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function.</summary>
      <param name="source">The sequence to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an <see cref="T:System.Linq.ILookup`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function and key comparer.</summary>
      <param name="source">The sequence to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates an <see cref="T:System.Linq.ILookup`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to specified key selector and element selector functions.</summary>
      <param name="source">The sequence to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an <see cref="T:System.Linq.ILookup`2" /> from a <see cref="T:System.Linq.ParallelQuery`1" /> according to a specified key selector function, a comparer and an element selector function.</summary>
      <param name="source">The sequence to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</returns>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Union overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Union overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set union of two parallel sequences by using the default equality comparer.</summary>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</summary>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate.</summary>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">More than <see cref="F:System.Int32.MaxValue" /> elements are enumerated by the query.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to associate with the query.</summary>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="cancellationToken">A cancellation token.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>ParallelQuery representing the same query as source, but with the registered cancellation token.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</summary>
      <param name="source">A ParallelQuery on which to set the limit on the degrees of parallelism.</param>
      <param name="degreeOfParallelism">The degree of parallelism for the query. The default value is Math.Min(<see cref="P:System.Environment.ProcessorCount" />, <see langword="MAX_SUPPORTED_DOP" />) where <see langword="MAX_SUPPORTED_DOP" /> is 512.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> is less than 1 or greater than 511.</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Sets the execution mode of the query.</summary>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="executionMode">The mode in which to execute the query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>ParallelQuery representing the same query as source, but with the registered execution mode.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> is not a valid <see cref="T:System.Linq.ParallelExecutionMode" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Sets the merge options for this query, which specify how the query will buffer output.</summary>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="mergeOptions">The merge options to set for this query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <returns>ParallelQuery representing the same query as source, but with the registered merge options.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> is not a valid <see cref="T:System.Linq.ParallelMergeOptions" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>This Zip overload should never be called. This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TFirst">This type parameter is not used.</typeparam>
      <typeparam name="TSecond">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Merges in parallel two sequences by using the specified predicate function.</summary>
      <param name="first">The first sequence to zip.</param>
      <param name="second">The second sequence to zip.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TFirst">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TResult">The type of the return elements.</typeparam>
      <returns>A sequence that has elements of type <paramref name="TResult" /> that are obtained by performing <paramref name="resultSelector" /> pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">The query was canceled with the token passed in through <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>The query execution mode is a hint that specifies how the system should handle performance trade-offs when parallelizing queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>This is the default setting. PLINQ will examine the query's structure and will only parallelize the query if will likely result in speedup. If the query structure indicates that speedup is not likely to be obtained, then PLINQ will execute the query as an ordinary LINQ to Objects query.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallelize the entire query, even if that means using high-overhead algorithms. Use this flag in cases where you know that parallel execution of the query will result in speedup, but PLINQ in the Default mode would execute it as sequential.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Specifies the preferred type of output merge to use in a query. In other words, it indicates how PLINQ should merge the results from the various partitions back into a single result sequence. This is a hint only, and may not be respected by the system when parallelizing all queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Use a merge with output buffers of a size chosen by the system. Results will accumulate into an output buffer before they are available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Use the default merge type, which is AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Use a merge with full output buffers. The system will accumulate all of the results before making any of them available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Use a merge without output buffers. As soon as result elements have been computed, make that element available to the consumer of the query.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Represents a parallel sequence.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Represents a parallel sequence.</summary>
      <typeparam name="TSource">The type of element in the source sequence.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <returns>The final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <param name="selector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <returns>The transformed final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether all the elements of a sequence satisfy a condition.</summary>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <param name="source">A sequence to check for being empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" />
      <param name="element" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source">A sequence to convert.</param>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source">A sequence to convert.</param>
      <typeparam name="TElement">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values, or <see langword="null" /> if the <paramref name="source" /> sequence is empty or contains only <see langword="null" /> values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <param name="source1">The first sequence to concatenate.</param>
      <param name="source2">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the input sequence contains an element that has the specified value; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> if the input sequence contains an element that has the specified value; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the number of elements in the specified sequence that satisfies a condition.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The element at the specified position in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <returns>An <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <returns>An <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>An <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>An <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>An <c>T:System.Linq.IQueryable`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>An <c>T:System.Linq.IQueryable`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>An <c>T:System.Linq.IQueryable`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <returns>An <c>T:System.Linq.IQueryable`1</c> that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">A comparer to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <param name="source1">A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>A sequence that contains the set intersection of the two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The value at the last position in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.</summary>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>The maximum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.</summary>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>The minimum value in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <returns>A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" />
      <param name="element" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</summary>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by using the default equality comparer to compare elements.</summary>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>
        <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.</summary>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>
        <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 More than one element satisfies the condition in <paramref name="predicate" />.  
 -or-  
 The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence, or <c>default</c>(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or <c>default</c>(<paramref name="TSource" />) if no such element is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>The sum of the values in the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The sum of the projected values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key that is returned by the <paramref name="keySelector" /> function.</typeparam>
      <returns>A collection whose elements are sorted in descending order according to a key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>Produces a sequence of tuples with elements from the two specified sequences.</summary>
      <param name="source1">The first sequence to merge.</param>
      <param name="source2">The second sequence to merge.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <returns>A sequence of tuples with elements taken from the first and second sequences, in that order.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <param name="source1">The first sequence to merge.</param>
      <param name="source2">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains merged elements of two input sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Class responsible for binding dynamic operations on the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> object responsible for binding dynamic operations.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates a call site with the given delegate type and binder.</summary>
      <param name="delegateType">The call site delegate type.</param>
      <param name="binder">The call site binder.</param>
      <returns>The new call site.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Dynamic site type.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.</summary>
      <param name="binder">The binder responsible for the runtime binding of the dynamic operations at this call site.</param>
      <returns>The new instance of dynamic call site.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>The Level 0 cache - a delegate specialized based on the site history.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>The update delegate. Called when the dynamic site experiences cache miss.</summary>
      <returns>The update delegate.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Class responsible for runtime binding of the dynamic operations on the dynamic call site.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.</summary>
      <param name="site">The CallSite the bind is being performed for.</param>
      <param name="args">The arguments for the binder.</param>
      <typeparam name="T">The target type of the CallSite.</typeparam>
      <returns>A new delegate which replaces the CallSite Target.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.</summary>
      <param name="target">The target delegate to be added to the cache.</param>
      <typeparam name="T">The type of target being added.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing a label that can be used to trigger the binding update.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Class that contains helper methods for DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Checks if a <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack.</summary>
      <param name="mb">The input <see cref="T:System.Reflection.MethodBase" /></param>
      <returns>True if the input <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack. Otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generates debug information for lambda expressions in an expression tree.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Creates a program database (PDB) symbol generator.</summary>
      <returns>A PDB symbol generator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Marks a sequence point in Microsoft intermediate language (MSIL) code.</summary>
      <param name="method">The lambda expression that is generated.</param>
      <param name="ilOffset">The offset within MSIL code at which to mark the sequence point.</param>
      <param name="sequencePoint">Debug information that corresponds to the sequence point.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indicates that the use of <see cref="T:System.Object" /> on a member is meant to be treated as a dynamically dispatched type.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
      <param name="transformFlags">Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</summary>
      <returns>The list of <see cref="T:System.Object" /> occurrences that are meant to be treated as a dynamically dispatched type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Represents the values of run-time variables.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Gets a count of the run-time variables.</summary>
      <returns>The number of run-time variables.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Gets the value of the run-time variable at the specified index.</summary>
      <param name="index">The zero-based index of the run-time variable whose value is to be returned.</param>
      <returns>The value of the run-time variable.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Defines a property for accessing the value that an object references.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Gets or sets the value that an object references.</summary>
      <returns>The value that the object references.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>The builder for read only collection.</summary>
      <typeparam name="T">The type of the collection element.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Constructs a <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Constructs a <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, copying the contents of the given collection.</summary>
      <param name="collection">Collection to copy elements from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Constructs a <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.</summary>
      <param name="capacity">Initial capacity.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Gets or sets the capacity of this <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>The capacity of this <c>ReadOnlyCollectionBuilder.</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> contains a specific value</summary>
      <param name="item">the object to locate in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <returns>true if item is found in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to an <see cref="T:System.Array" />, starting at particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Gets the number of elements in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>The number of elements in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a given value in the builder.</summary>
      <param name="item">An item to search for.</param>
      <returns>The index of the first occurrence of an item.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <returns>true if item was successfully removed from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing all of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, avoiding copying the elements to the new array if possible. Resets the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> after the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> has been created.</summary>
      <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Represents a cache of runtime binding rules.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Holds a reference to a value.</summary>
      <typeparam name="T">The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Initializes a new StrongBox which can receive a value when used in a reference call.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value.</summary>
      <param name="value">A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
      <returns>The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permits late-bound registration of an event handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> class by using the specified type and a name of the event on the type.</summary>
      <param name="type">The type of object.</param>
      <param name="eventName">The name of an event on <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Attaches an event handler to a COM object.</summary>
      <param name="target">The target object that the event delegate should bind to.</param>
      <param name="handler">The event delegate.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Gets the method that was used to add an event handler delegate to the event source.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <returns>The method that was used to add an event handler delegate to the event source.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</summary>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <returns>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</returns>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for. Only attributes that are assignable to this type can be returned.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <returns>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>Returns the public or non-public methods that have been associated with an event in metadata.</summary>
      <param name="nonPublic">
        <see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</param>
      <returns>An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that was called when the event was raised.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <returns>The object that was called when the event was raised.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo" /> object for removing a method of the event.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <returns>The method that was used to remove an event handler delegate from the event source.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of the specified attribute are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the specified attribute has been applied to this member; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>Gets the metadata token associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</summary>
      <returns>A 32-bit Integer that represents the metadata token.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>Gets the module associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</summary>
      <returns>The module associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Gets the class object that was used to initialize this instance.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to initialize the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Detaches an event handler from a COM object.</summary>
      <param name="target">The target object that the event delegate is bound to.</param>
      <param name="handler">The event delegate.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public <see langword="remove" /> accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">In the .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.  


            

 The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.  
 -or-  
 The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</exception>
      <exception cref="T:System.MethodAccessException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.  


            

 The caller does not have access permission to the member.</exception>
    </member>
    <member name="T:System.Security.Cryptography.AesCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Advanced Encryption Standard (AES) algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCng" /> class with an ephemeral key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCng" /> class with the specified key name, which represents an existing persisted AES key.</summary>
      <param name="keyName">The name of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCng" /> class with the specified key name, which represents an existing persisted AES key, and the specified key storage provider (KSP).</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.  
-or-  
<paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCng" /> class with the specified key name, which represents an existing persisted AES key,  the specified key storage provider (KSP) and key open options.</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <param name="openOptions">A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.  
-or-  
<paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor">
      <summary>Creates a symmetric AES decryptor object with the current key and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric AES decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric AES decryptor object with the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</param>
      <param name="rgbIV">The initialization vector to use for the AES algorithm.</param>
      <returns>A symmetric AES decryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> is not a valid size for this algorithm.  
-or-  
<paramref name="rgbIV" /> size does not match the block size for this algorithm.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> is a known weak key for this algorithm and cannot be used.  
-or-  
<paramref name="rgbIV" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor">
      <summary>Creates a symmetric AES encryptor object using the current key and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric AES encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric AES encryptor object with the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</param>
      <param name="rgbIV">The initialization vector to use for the AES algorithm.</param>
      <returns>A symmetric AES encryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> is not a valid size for this algorithm.  
-or-  
<paramref name="rgbIV" /> size does not match the block size for this algorithm.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> is a known weak key for this algorithm and cannot be used.  
-or-  
<paramref name="rgbIV" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the AES algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateKey">
      <summary>Generates a random key to use for the AES algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.Key">
      <summary>Gets or sets the key for the <see cref="T:System.Security.Cryptography.AesCng" /> algorithm.</summary>
      <returns>The key for the <see cref="T:System.Security.Cryptography.AesCng" /> algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.AesCng" /> algorithm.</summary>
      <returns>The size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.AesCng" /> algorithm.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>Performs symmetric encryption and decryption using the Cryptographic Application Programming Interfaces (CAPI) implementation of the Advanced Encryption Standard (AES) algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> class.</summary>
      <exception cref="T:System.PlatformNotSupportedException">There is no supported key size for the current platform.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.BlockSize" />
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>Creates a symmetric AES decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES decryptor object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The current key is invalid or missing.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric AES decryptor object using the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
      <returns>A symmetric AES decryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>Creates a symmetric AES encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
      <returns>A symmetric AES encryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="iv" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.FeedbackSize" />
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the algorithm.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The initialization vector (IV) could not be generated.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>Generates a random key to use for the algorithm.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be generated.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.IV" />
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>Gets or sets the symmetric key that is used for encryption and decryption.</summary>
      <returns>The symmetric key that is used for encryption and decryption.</returns>
      <exception cref="T:System.ArgumentNullException">The value for the key is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The size of the key is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key.</summary>
      <returns>The size, in bits, of the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.LegalBlockSizes" />
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.LegalKeySizes" />
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Mode" />
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Padding" />
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Provides a managed implementation of the Advanced Encryption Standard (AES) symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesManaged" /> class.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The Windows security policy setting for FIPS is enabled.</exception>
      <exception cref="T:System.InvalidOperationException">This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>Gets or sets the block size, in bits, of the cryptographic operation.</summary>
      <returns>The block size, in bits, of the cryptographic operation. The default is 128 bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Creates a symmetric decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric decryptor object using the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
      <returns>A symmetric decryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Creates a symmetric encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the symmetric algorithm.</param>
      <param name="rgbIV">The initialization vector to use for the symmetric algorithm.</param>
      <returns>A symmetric encryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Gets or sets the number of bits to use as feedback.</summary>
      <returns>The feedback size, in bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Generates a random key to use for the symmetric algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Gets or sets the initialization vector (IV) to use for the symmetric algorithm.</summary>
      <returns>The initialization vector to use for the symmetric algorithm</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Gets or sets the secret key used for the symmetric algorithm.</summary>
      <returns>The key for the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used for the symmetric algorithm.</summary>
      <returns>The size, in bits, of the key used by the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</summary>
      <returns>The block sizes, in bits, that are supported by the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</summary>
      <returns>The key sizes, in bits, that are supported by the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Gets or sets the mode for operation of the symmetric algorithm.</summary>
      <returns>One of the enumeration values that specifies the block cipher mode to use for encryption. The default is <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> is set to <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> or <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Gets or sets the padding mode used in the symmetric algorithm.</summary>
      <returns>One of the enumeration values that specifies the type of padding to apply. The default is <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>Encapsulates the name of an encryption algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithm" /> class.</summary>
      <param name="algorithm">The name of the algorithm to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithm" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>Gets the algorithm name that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm whose curve is described via a key property.</summary>
      <returns>An object that specifies an ECDH key exchange algorithm whose curve is described via a key property.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) whose curve is described via a key property.</summary>
      <returns>An object that specifies an ECDSA whose curve is described via a key property.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> that specifies the same algorithm as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter specifies the same algorithm as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>Generates a hash value for the algorithm name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>The hash value of the embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Message Digest 5 (MD5) hash algorithm.</summary>
      <returns>An object that specifies the MD5 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects specify the same algorithm name; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects do not specify the same algorithm.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects do not specify the same algorithm name; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Rsa">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the RSA hash algorithm.</summary>
      <returns>An object that specifies the RSA algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 1 (SHA-1) algorithm.</summary>
      <returns>An object that specifies the SHA-1 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 256 (SHA-256) algorithm.</summary>
      <returns>An object that specifies the SHA-256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 384 (SHA-384) algorithm.</summary>
      <returns>An object that specifies the SHA-384 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 512 (SHA-512) algorithm.</summary>
      <returns>An object that specifies the SHA-512 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>Gets the name of the algorithm that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>Encapsulates the name of an encryption algorithm group.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> class.</summary>
      <param name="algorithmGroup">The name of the algorithm group to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithmGroup" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithmGroup" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Diffie-Hellman family of algorithms.</summary>
      <returns>An object that specifies the Diffie-Hellman family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Digital Signature Algorithm (DSA) family of algorithms.</summary>
      <returns>An object that specifies the DSA family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Diffie-Hellman (ECDH) family of algorithms.</summary>
      <returns>An object that specifies the ECDH family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Digital Signature Algorithm (ECDSA) family of algorithms.</summary>
      <returns>An object that specifies the ECDSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> that specifies the same algorithm group as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter specifies the same algorithm group as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>Generates a hash value for the algorithm group name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>The hash value of the embedded algorithm group name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects specify the same algorithm group.</summary>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects specify the same algorithm group; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects do not specify the same algorithm group.</summary>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects do not specify the same algorithm group; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Rivest-Shamir-Adleman (RSA) family of algorithms.</summary>
      <returns>An object that specifies the RSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>Specifies the key export policies for a key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>The private key can be exported one time for archiving purposes.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>The private key can be exported multiple times.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>The private key can be exported one time as plaintext.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>The private key can be exported multiple times as plaintext.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>No export policies are established. Key export is allowed without restriction.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>Gets the algorithm that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>Gets the algorithm group that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm group.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>Creates a <see cref="T:System.Security.Cryptography.CngKey" /> object that can be used with the specified algorithm.</summary>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <returns>An ephemeral key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm.</summary>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm, using the supplied key creation parameters.</summary>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <param name="creationParameters">An object that specifies advanced parameters for the method, including the <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>Removes the key that is associated with the object.</summary>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to access a deleted key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.CngKey" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>Checks to see whether a named key exists in the default key storage provider (KSP).</summary>
      <param name="keyName">The key name.</param>
      <returns>
        <see langword="true" /> if the named key exists in the default KSP; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP).</summary>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to check for the key.</param>
      <returns>
        <see langword="true" /> if the named key exists in the specified provider; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.</summary>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to search for the key.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for opening a key.</param>
      <returns>
        <see langword="true" /> if the named key exists in the specified provider; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Exports the key material into a BLOB, in the specified format.</summary>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <returns>A BLOB that contains the key material in the specified format.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors. Typically, the <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> does not allow the key to be exported.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>Gets the export policy that is used by the key.</summary>
      <returns>An object that specifies the export policy for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Gets a property, given a name and a set of property options.</summary>
      <param name="name">The name of the desired property.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <returns>An object that contains the raw value of the specified property.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE).</summary>
      <returns>A safe handle that represents the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Checks to see whether the specified property exists on the key.</summary>
      <param name="name">The property name to check.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <returns>
        <see langword="true" /> if the specified property is found; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.</summary>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <returns>A new key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> or <paramref name="format" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.</summary>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <param name="provider">The KSP.</param>
      <returns>A new key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />, <paramref name="format" />, or <paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>Gets the persistence state of the key.</summary>
      <returns>
        <see langword="true" /> if the key is ephemeral; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>Gets the scope (machine or user) of the key.</summary>
      <returns>
        <see langword="true" /> if the key is available on a machine-wide basis; <see langword="false" /> if the key is only for the current user.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>Gets the name of the key.</summary>
      <returns>The name of the key. If the key is ephemeral, the value is <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>Gets the key size in bits.</summary>
      <returns>The key size in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>Gets the cryptographic operations specified by the key.</summary>
      <returns>A bitwise combination of the enumeration values that specify the usages allowed for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object by using a handle to an existing key.</summary>
      <param name="keyHandle">A handle to an existing key.</param>
      <param name="keyHandleOpenOptions">One of the enumeration values that indicates whether <paramref name="keyHandle" /> represents an ephemeral key or a named key.</param>
      <returns>An existing key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> value is not specified.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key.</summary>
      <param name="keyName">The name of the key.</param>
      <returns>An existing key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP).</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <returns>An existing key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <param name="openOptions">A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</param>
      <returns>An existing key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.</summary>
      <returns>The parent window handle for the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>Gets the key storage provider (KSP) that manages the key.</summary>
      <returns>The KSP that manages the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).</summary>
      <returns>A handle to the KSP.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>Sets a named property on the key.</summary>
      <param name="property">The key property to set.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>Gets parameters that control the user interface (UI) for accessing the key.</summary>
      <returns>An object that contains configuration parameters for displaying the UI.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>Gets the unique name for the key.</summary>
      <returns>An alternate name for the key. If the key is ephemeral, the value is <see langword="null" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> class by using the specified format.</summary>
      <param name="format">The key BLOB format to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="format" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="format" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key which contains explicit curve parameters.</summary>
      <returns>An object describing a private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key which contains explicit curve parameters.</summary>
      <returns>An object describing a public key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies the same key BLOB format as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter specifies the same key BLOB format as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic private key BLOB.</summary>
      <returns>An object that specifies a generic private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic public key BLOB.</summary>
      <returns>An object that specifies a generic public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>Generates a hash value for the embedded key BLOB format in the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>The hash value of the embedded key BLOB format.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects specify the same key BLOB format.</summary>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects specify the same key BLOB format; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects do not specify the same key BLOB format.</summary>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects do not specify the same key BLOB format; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies an opaque transport key BLOB.</summary>
      <returns>An object that specifies an opaque transport key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</summary>
      <returns>An object that specifies a PKCS #8 private key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>Specifies options used for key creation.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>A machine-wide key is created.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>No key creation options are used.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>The existing key is overwritten during key creation.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>Contains advanced properties for key creation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>Gets or sets the key export policy.</summary>
      <returns>An object that specifies a key export policy. The default value is <see langword="null" />, which indicates that the key storage provider's default export policy is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>Gets or sets the key creation options.</summary>
      <returns>An object that specifies options for creating keys. The default value is <see langword="null" />, which indicates that the key storage provider's default key creation options are set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>Gets or sets the cryptographic operations that apply to the current key.</summary>
      <returns>A bitwise combination of one or more enumeration values that specify key usage. The default value is <see langword="null" />, which indicates that the key storage provider's default key usage is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>Enables a <see cref="T:System.Security.Cryptography.CngKey" /> object to be created with additional properties that are set before the key is finalized.</summary>
      <returns>A collection object that contains any additional parameters that you must set on a <see cref="T:System.Security.Cryptography.CngKey" /> object during key creation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>Gets or sets the window handle that should be used as the parent window for dialog boxes that are created by Cryptography Next Generation (CNG) classes.</summary>
      <returns>The HWND of the parent window that is used for CNG dialog boxes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>Gets or sets the key storage provider (KSP) to create a key in.</summary>
      <returns>An object that specifies the KSP that a new key will be created in.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> property is set to a <see langword="null" /> value.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>Gets or sets information about the user interface to display when a key is created or accessed.</summary>
      <returns>An object that contains details about the user interface shown by Cryptography Next Generation (CNG) classes when a key is created or accessed. A <see langword="null" /> value indicates that the key storage provider's default user interface policy is set.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>Specifies options for opening key handles.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>The key handle being opened specifies an ephemeral key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>The key handle being opened does not specify an ephemeral key.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>Specifies options for opening a key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>A machine-wide key is opened.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>No key open options are specified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>UI prompting is suppressed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>If the <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> value is not specified, a user key is opened instead.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>Specifies the cryptographic operations that a Cryptography Next Generation (CNG) key may be used with.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>The key can be used for all purposes.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>The key can be used for encryption and decryption.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>The key can be used for secret agreement generation and key exchange.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>No usage values are assigned to the key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>The key can be used for signing and verification.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>Encapsulates a property of a Cryptography Next Generation (CNG) key or provider.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProperty" /> class.</summary>
      <param name="name">The property name to initialize.</param>
      <param name="value">The property value to initialize.</param>
      <param name="options">A bitwise combination of the enumeration values that specify how the property is stored.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProperty" /> object that specifies the same property as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProperty" /> object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter represents the same property as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>Generates a hash value for the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>The hash value of the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>Gets the property value that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An array that represents the value stored in the property.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>Gets the property name that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>The property name that is set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects specify the same property name, value, and options.</summary>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects specify the same property; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects do not specify the same property name, value, and options.</summary>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects do not specify the same property; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>Gets the property options that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An object that specifies the options that are set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>Provides a strongly typed collection of Cryptography Next Generation (CNG) properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>Initializes a new <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> object.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>Specifies Cryptography Next Generation (CNG) key property options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>The property is not specified by CNG. Use this option to avoid future name conflicts with CNG properties.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>The referenced property has no options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>The property should be persisted.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>Encapsulates the name of a key storage provider (KSP) for use with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProvider" /> class.</summary>
      <param name="provider">The name of the key storage provider (KSP) to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="provider" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProvider" /> that specifies the same key storage provider(KSP) as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProvider" /> object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> parameter specifies the same key storage provider (KSP) as the current object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>Generates a hash value for the name of the key storage provider (KSP) that is embedded in the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>The hash value of the embedded KSP name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Smart Card Key Storage Provider.</summary>
      <returns>An object that specifies the Microsoft Smart Card Key Storage Provider.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Software Key Storage Provider.</summary>
      <returns>An object that specifies the Microsoft Software Key Storage Provider.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects specify the same key storage provider (KSP).</summary>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects represent the same KSP; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects do not represent the same key storage provider (KSP).</summary>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the two objects do not represent the same KSP; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>Encapsulates optional configuration parameters for the user interface (UI) that Cryptography Next Generation (CNG) displays when you access a protected key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level and friendly name.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, and description.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, and use context.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, use context, and title.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
      <param name="creationTitle">The title for the dialog box that provides the UI prompt. Specify a null string to use the default title.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>Gets the title that is displayed by the UI prompt.</summary>
      <returns>The title of the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>Gets the description string that is displayed by the UI prompt.</summary>
      <returns>The description text for the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>Gets the friendly name that is displayed by the UI prompt.</summary>
      <returns>The friendly name that is used to describe the key in the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>Gets the UI protection level for the key.</summary>
      <returns>An object that describes the level of UI protection to apply to the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>Gets the description of how the key will be used.</summary>
      <returns>The description of how the key will be used.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>Specifies the protection level for the key in user interface (UI) prompting scenarios.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>A UI prompt is displayed every time the key is accessed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>No UI prompt is displayed when the key is accessed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>A UI prompt is displayed the first time the key is accessed in a process.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSACng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACng" /> class with a random 2,048-bit key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACng" /> class with a randomly generated key of the specified size.</summary>
      <param name="keySize">The size of the key to generate in bits.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> is not valid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACng" /> class with the specified key.</summary>
      <param name="key">The key to use for DSA operations.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a valid DSA key.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])">
      <summary>Creates the digital signature for the specified data.</summary>
      <param name="rgbHash">The data to be signed.</param>
      <returns>The digital signature for the specified data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> is shorter in length than the Q value of the DSA key .</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)">
      <summary>Exports the DSA algorithm parameters.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The DSA algorithm parameters.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">DSA key is not a valid public or private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>Replaces the existing key that the current instance is working with by creating a new <see cref="T:System.Security.Cryptography.CngKey" /> for the parameters structure.</summary>
      <param name="parameters">The DSA parameters.</param>
      <exception cref="T:System.ArgumentException">The specified DSA parameters are not valid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.Key">
      <summary>Gets the key that will be used by the <see cref="T:System.Security.Cryptography.DSACng" /> object for any cryptographic operation that it performs.</summary>
      <returns>The key used by the <see cref="T:System.Security.Cryptography.DSACng" /> object to perform cryptographic operations.</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>Always <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.LegalKeySizes">
      <summary>Gets the key sizes, in bits, that are supported by the DSA algorithm.</summary>
      <returns>An array that contains the key sizes supported by the algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>The string "DSA".</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tries to create the digital signature for the specified data.</summary>
      <param name="hash">A read-only span of bytes containing a hash of the data to be signed.</param>
      <param name="destination">The buffer where the digital signature is to be written.</param>
      <param name="bytesWritten">When this method returns, the number of bytes that were written in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the digital signature was created successfully; <see langword="false" /> if the <paramref name="destination" /> buffer was too small.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Verifies if the specified digital signature matches the specified data.</summary>
      <param name="rgbHash">The signed data.</param>
      <param name="rgbSignature">The digital signature to be verified.</param>
      <returns>
        <see langword="true" /> if <paramref name="rgbSignature" /> matches the signature computed using the specified data; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rgbHash" /> parameter is <see langword="null" />.  
 -or-  
 The <paramref name="rgbSignature" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> is shorter in length than the Q value of the DSA key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifies if the specified digital signature matches the specified data.</summary>
      <param name="hash">A read-only span of bytes containing the signed data.</param>
      <param name="signature">A read-only span of bytes containing the signature to be verified.</param>
      <returns>
        <see langword="true" /> if <paramref name="signature" /> matches the signature computed using the specified data; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="hash" /> is shorter in length than the Q value of the DSA key.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>Represents an elliptic curve.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>The first coefficient for an explicit curve. <c>A</c> for short Weierstrass, Montgomery, and Twisted Edwards curves.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>The second coefficient for an explicit curve. <c>B</c> for short Weierstrass and <c>d</c> for Twisted Edwards curves.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>The cofactor of the curve.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>Creates a named curve using the specified friendly name of the identifier.</summary>
      <param name="oidFriendlyName">The friendly name of the identifier.</param>
      <returns>An object representing the named curve.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>Creates a named curve using the specified <see cref="T:System.Security.Cryptography.Oid" /> object.</summary>
      <param name="curveOid">The object identifier to use.</param>
      <returns>An object representing the named curve.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>Creates a named curve using the specified dotted-decimal representation of the identifier.</summary>
      <param name="oidValue">The dotted number of the identifier.</param>
      <returns>An object representing the named curve.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> is <see langword="null" />.</exception>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>Identifies the composition of the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>Indicates how to interpret the data contained in an <see cref="T:System.Security.Cryptography.ECCurve" /> object.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>The curve parameters represent a characteristic 2 curve.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>No curve data is interpreted. The caller is assumed to know what the curve is.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>The curve parameters represent a named curve.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>The curve parameters represent a prime curve with the formula B*y^2 = x^3 + A*x^2 + x.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>The curve parameters represent a prime curve with the formula y^2 = x^3 + A*x + B in the prime field P.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>The curve parameters represent a prime curve with the formula A*x^2 + y^2 = 1 + B*x^2*y^2 in the prime field P.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>The generator, or base point, for operations on the curve.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>The name of the hash algorithm which was used to generate the curve coefficients (<see cref="F:System.Security.Cryptography.ECCurve.A" /> and <see cref="F:System.Security.Cryptography.ECCurve.B" />) from the <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> under the ANSI X9.62 generation algorithm. Applies only to explicit curves.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>Gets a value that indicates whether the curve type indicates an explicit characteristic 2 curve.</summary>
      <returns>
        <see langword="true" /> if the curve is an explicit characteristic 2 curve; <see langword="false" /> if the curve is a named characteristic 2, prime, or implicit curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>Gets a value that indicates whether the curve type indicates an explicit curve (either prime or characteristic 2).</summary>
      <returns>
        <see langword="true" /> if the curve is an explicit curve (either prime or characteristic 2); <see langword="false" /> if the curve is a named or implicit curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>Gets a value that indicates whether the curve type indicates a named curve.</summary>
      <returns>
        <see langword="true" /> if the curve is a named curve; <see langword="false" /> if the curve is an implicit or an  explicit curve (either prime or characteristic 2).</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>Gets a value that indicates whether the curve type indicates an explicit prime curve.</summary>
      <returns>
        <see langword="true" /> if the curve is an explicit prime curve; <see langword="false" /> if the curve is a named prime, characteristic 2 or implicit curves.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>Represents a factory class for creating named curves.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>Gets a brainpoolP160r1 named curve.</summary>
      <returns>A brainpoolP160r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>Gets a brainpoolP160t1 named curve.</summary>
      <returns>A brainpoolP160t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>Gets a brainpoolP192r1 named curve.</summary>
      <returns>A brainpoolP192r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>Gets a brainpoolP192t1 named curve.</summary>
      <returns>A brainpoolP192t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>Gets a brainpoolP224r1 named curve.</summary>
      <returns>A brainpoolP224r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>Gets a brainpoolP224t1 named curve.</summary>
      <returns>A brainpoolP224t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>Gets a brainpoolP256r1 named curve.</summary>
      <returns>A brainpoolP256r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>Gets a brainpoolP256t1 named curve.</summary>
      <returns>A brainpoolP256t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>Gets a brainpoolP320r1 named curve.</summary>
      <returns>A brainpoolP320r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>Gets a brainpoolP320t1 named curve.</summary>
      <returns>A brainpoolP320t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>Gets a brainpoolP384r1 named curve.</summary>
      <returns>A brainpoolP384r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>Gets a brainpoolP384t1 named curve.</summary>
      <returns>A brainpoolP384t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>Gets a brainpoolP512r1 named curve.</summary>
      <returns>A brainpoolP512r1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>Gets a brainpoolP512t1 named curve.</summary>
      <returns>A brainpoolP512t1 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>Gets a nistP256 named curve.</summary>
      <returns>A nistP256 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>Gets a nistP384 named curve.</summary>
      <returns>A nistP384 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>Gets a nistP521 named curve.</summary>
      <returns>A nistP521 named curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>Gets the identifier of a named curve.</summary>
      <returns>The identifier of a named curve.</returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>The order of the curve. Applies only to explicit curves.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>The curve polynomial. Applies only to characteristic 2 curves.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>The prime specifying the base field. Applies only to prime curves.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>The seed value for coefficient generation under the ANSI X9.62 generation algorithm. Applies only to explicit curves.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>Validates the integrity of the current curve. Throws a <see cref="T:System.Security.Cryptography.CryptographicException" /> exception if the structure is not valid.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The curve parameters are not valid for the current curve type.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <returns>A new instance of the default implementation of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.</summary>
      <param name="curve">The curve to use to generate a new public/private key-pair.</param>
      <returns>A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <param name="parameters">The parameters  for the elliptic curve cryptography (ECC) algorithm.</param>
      <returns>A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> does not validate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <param name="algorithm">The name of an implementation of the ECDH algorithm.</param>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm  to use to derive the key material.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is over a different curve than this key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm  to use to derive the key material.</param>
      <param name="secretPrepend">A value to prepend to the derived secret before hashing.</param>
      <param name="secretAppend">A value to append to the derived secret before hashing.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is over a different curve than this key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm to use to derive the key material.</param>
      <param name="hmacKey">The key for the HMAC.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is over a different curve than this key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm to use to derive the key material.</param>
      <param name="hmacKey">The key for the HMAC.</param>
      <param name="secretPrepend">A value to prepend to the derived secret before hashing.</param>
      <param name="secretAppend">A value to append to the derived secret before hashing.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is over a different curve than this key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives bytes that can be used as a key, given another party's public key.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="prfLabel">The ASCII-encoded PRF label.</param>
      <param name="prfSeed">The 64-byte PRF seed.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is over a different curve than this key.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prfLabel" /> or <paramref name="prfSeed" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> is not exactly 64 bytes in length.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>Exports the current key in the ECPrivateKey format.</summary>
      <returns>A byte array containing the ECPrivateKey representation of this key.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>An object that represents the point on the curve for this key, using the explicit curve format.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>When overridden in a derived class, exports either the public or the public and private key information from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" /> to include public parameters only.</param>
      <returns>An object that represents the point on the curve for this key. It can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>This method throws in all cases.</summary>
      <param name="xmlString">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</param>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.</summary>
      <param name="curve">The curve used to generate an ephemeral public/private key pair.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from an ECPrivateKey structure, replacing the keys for this object.</summary>
      <param name="source">The bytes of an ECPrivateKey structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 ECPrivateKey structure.
-or-
The key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The password is incorrect.
-or-
The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.
-or-
The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</summary>
      <param name="password">The password to use for decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The password is incorrect.
-or-
The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>When overridden in a derived class, imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> as an ephemeral key into the current <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object.</summary>
      <param name="parameters">The curve's parameters to import.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> does not validate.</exception>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>The name of the key exchange algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</summary>
      <returns>The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>Always <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>This method throws in all cases.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>This method does not return a value.</returns>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the ECPrivateKey format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the ECPrivateKey data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.
-or-
<paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the PKCS#8 PrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the X.509 SubjectPublicKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> specifies an invalid length.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</summary>
      <param name="curve">The curve used to generate the public/private key pair.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm  to use to derive the key material.</param>
      <param name="secretPrepend">A value to prepend to the derived secret before hashing.</param>
      <param name="secretAppend">A value to append to the derived secret before hashing.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.  
-or-  
<paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="hashAlgorithm">The hash algorithm to use to derive the key material.</param>
      <param name="hmacKey">The key for the HMAC.</param>
      <param name="secretPrepend">A value to prepend to the derived secret before hashing.</param>
      <param name="secretAppend">A value to append to the derived secret before hashing.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.  
-or-  
<paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</summary>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is invalid. Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</exception>
      <exception cref="T:System.InvalidOperationException">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</summary>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</summary>
      <param name="otherPartyPublicKey">The other party's public key.</param>
      <param name="prfLabel">The ASCII-encoded PRF label.</param>
      <param name="prfSeed">The 64-byte PRF seed.</param>
      <returns>The key material from the key exchange with the other party's public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.  
-or-  
<paramref name="prfLabel" /> is <see langword="null" />.  
-or-  
<paramref name="prfSeed" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> is not exactly 64 bytes in length.  
-or-  
All other cryptographic errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</summary>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</summary>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)">
      <summary>Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The method cannot obtain curve values.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Explicit export is not supported by this platform. Windows 10 or higher is required.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)">
      <summary>Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The method cannot obtain curve values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> is malformed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Generates a new ephemeral public/private key pair for the specified curve.</summary>
      <param name="curve">The curve used to generate an ephemeral public/private key pair.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when generating key material.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is <see langword="null." /></exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</summary>
      <returns>The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</summary>
      <param name="parameters">The curve's parameters to import.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> does not validate.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="parameters" /> references a curve that cannot be imported.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="parameters" /> references a curve that is not supported by this platform.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</summary>
      <returns>The key pair used by this object to perform cryptographic operations.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The enumeration value is out of range.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>Gets or sets the label value that is used for key derivation.</summary>
      <returns>The label value.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.LegalKeySizes" />
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</summary>
      <returns>The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>Gets or sets a value that will be appended to the secret agreement when generating key material.</summary>
      <returns>The value that is appended to the secret agreement.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</summary>
      <returns>The value that is appended to the beginning of the secret agreement during key derivation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>Gets or sets the seed value that will be used when deriving key material.</summary>
      <returns>The seed value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <returns>A string object that contains the key information, serialized to an XML string, according to the requested format.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</summary>
      <returns>
        <see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>Specifies an Elliptic Curve Diffie-Hellman (ECDH) public key for use with the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>Gets the key BLOB format for a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <returns>The format that the key BLOB is expressed in.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportExplicitParameters">
      <summary>Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <returns>The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The method cannot obtain curve values.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Explicit export is not supported by this platform. Windows 10 or higher is required.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportParameters">
      <summary>Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <returns>The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The method cannot obtain curve values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Converts a byte array that contains a public key to a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object according to the specified format.</summary>
      <param name="publicKeyBlob">A byte array that contains an Elliptic Curve Diffie-Hellman (ECDH) public key.</param>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <returns>An object that contains the ECDH public key that is serialized in the byte array.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publicKeyBlob" /> or <paramref name="format" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="publicKeyBlob" /> parameter does not contain an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>Converts an XML string to an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <param name="xml">An XML string that contains an Elliptic Curve Diffie-Hellman (ECDH) key.</param>
      <returns>An object that contains the ECDH public key that is specified by the given XML.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="xml" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="xml" /> parameter does not specify an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>Converts the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object to a <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <returns>An object that contains the key represented by the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key to an XML string in RFC 4050 format.</summary>
      <returns>An XML string that contains the serialized <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>Specifies the key derivation function that the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class will use to convert secret agreements into key material.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>A hash algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> property specifies the name of the algorithm to use. If the algorithm name is not specified, <see cref="T:System.Security.Cryptography.SHA256" /> is used as the default algorithm. You can also specify the <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" /> and <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" /> properties, but they are not required. The amount of key material that is generated is equivalent to the size of the hash value for the specified algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>A Hash-based Message Authentication Code (HMAC) algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> property specifies the key to use. Either this property must be set or the <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> property must be set to <see langword="true" />; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />. If both properties are set, the secret agreement is used as the HMAC key. You can also specify the <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" /> and <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" /> properties, but they are not required. The amount of key material that is generated is equivalent to the size of the HMAC value.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>The Transport Layer Security (TLS) protocol is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> and <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> properties must be set; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. This value generates 160 bits of key material.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Provides an abstract base class from which all <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> implementations must inherit.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> class.</summary>
      <param name="keyBlob">A byte array that represents an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>When overridden in a derived class, exports the explicit <see cref="T:System.Security.Cryptography.ECParameters" /> for an <see cref="T:System.Security.Cryptography.ECCurve" /> object.</summary>
      <returns>An object that represents the point on the curve for this key, using the explicit curve format.</returns>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>When overridden in a derived class, exports the named or explicit <see cref="T:System.Security.Cryptography.ECParameters" /> for an <see cref="T:System.Security.Cryptography.ECCurve" /> object.</summary>
      <returns>An object that represents the point on the curve for this key.</returns>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key BLOB to a byte array.</summary>
      <returns>A byte array that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> public key to an XML string.</summary>
      <returns>An XML string that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <returns>A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.</summary>
      <param name="curve">The curve to use for key generation.</param>
      <returns>A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.</summary>
      <param name="parameters">The parameters representing the key to use.</param>
      <returns>A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <param name="algorithm">The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:  
 - "ECDsa"  
 - "ECDsaCng"  
 - "System.Security.Cryptography.ECDsaCng"  
 You can also provide the name of a custom ECDSA implementation.</param>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>Exports the current key in the ECPrivateKey format.</summary>
      <returns>A byte array containing the ECPrivateKey representation of this key.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>When overridden in a derived class, exports the explicit parameters for an elliptic curve.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The parameters representing the point on the curve for this key, using the explicit curve format.</returns>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>When overridden in a derived class, exports the named or explicit parameters for an elliptic curve. If the curve has a name, the <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> field contains named curve parameters, otherwise it         contains explicit parameters.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The parameters representing the point on the curve for this key.</returns>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>This method throws in all cases.</summary>
      <param name="xmlString">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</param>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>When overridden in a derived class, generates a new public/private key pair for the specified curve.</summary>
      <param name="curve">The curve to use.</param>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.</summary>
      <param name="data">The data to be hashed.</param>
      <param name="offset">The index of the first byte in <paramref name="data" /> to be hashed.</param>
      <param name="count">The number of bytes to hash.</param>
      <param name="hashAlgorithm">The algorithm to use to hash the data.</param>
      <returns>The hashed data.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</summary>
      <param name="data">The binary stream to hash.</param>
      <param name="hashAlgorithm">The algorithm to use to hash the data.</param>
      <returns>The hashed data.</returns>
      <exception cref="T:System.NotImplementedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from an ECPrivateKey structure, replacing the keys for this object.</summary>
      <param name="source">The bytes of an ECPrivateKey structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 ECPrivateKey structure.
-or-
The key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a byte-based password, replacing the keys for this object.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The password is incorrect.
-or-
The contents of <paramref name="source" /> indicate the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.
-or-
The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 EncryptedPrivateKeyInfo structure after decrypting with a char-based password, replacing the keys for this object.</summary>
      <param name="password">The password to use for decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The password is incorrect.
-or-
The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>When overridden in a derived class, imports the specified parameters.</summary>
      <param name="parameters">The curve parameters.</param>
      <exception cref="T:System.NotSupportedException">A derived class must override this method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public/private keypair from a PKCS#8 PrivateKeyInfo structure after decryption, replacing the keys for this object.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Imports the public key from an X.509 SubjectPublicKeyInfo structure after decryption, replacing the keys for this object.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <param name="bytesRead">When this method returns, contains a value that indicates the number of bytes read from <paramref name="source" />. This parameter is treated as uninitialized.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.
-or-
The contents of <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.
-or-
The contents of <paramref name="source" /> represent the key in a format that is not supported.
-or-
The algorithm-specific key import failed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>Always <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>The string "ECDsa".</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</summary>
      <param name="data">The input data for which to compute the hash.</param>
      <param name="offset">The offset into the array at which to begin using data.</param>
      <param name="count">The number of bytes in the array to use as data.</param>
      <param name="hashAlgorithm">The hash algorithm to use to create the hash value.</param>
      <returns>The ECDSA signature for the specified data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</summary>
      <param name="data">The input data for which to compute the hash.</param>
      <param name="hashAlgorithm">The hash algorithm to use to create the hash value.</param>
      <returns>The ECDSA signature for the specified data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</summary>
      <param name="data">The input stream for which to compute the hash.</param>
      <param name="hashAlgorithm">The hash algorithm to use to create the hash value.</param>
      <returns>The ECDSA signature for the specified data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Generates a digital signature for the specified hash value.</summary>
      <param name="hash">The hash value of the data that is being signed.</param>
      <returns>A digital signature that consists of the given hash value encrypted with the private key.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hash" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>This method throws in all cases.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>This method does not return a value.</returns>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the ECPrivateKey format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the ECPrivateKey data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.
-or-
<paramref name="pbeParameters" /> indicates that <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> should be used, which requires <see cref="T:System.Char" />-based passwords.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The byte span to receive the PKCS#8 EncryptedPrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the PKCS#8 PrivateKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export the current key in the X.509 SubjectPublicKeyInfo format into a provided buffer.</summary>
      <param name="destination">The byte span to receive the X.509 SubjectPublicKeyInfo data.</param>
      <param name="bytesWritten">When this method returns, contains a value that indicates the number of bytes written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="destination" /> is big enough to receive the output; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be exported.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <param name="data" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="hash" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.</summary>
      <param name="data">The signed data.</param>
      <param name="signature">The signature data to be verified.</param>
      <param name="hashAlgorithm">The hash algorithm used to create the hash value of the data.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.  
-or-  
<paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.</summary>
      <param name="data">The signed data.</param>
      <param name="offset">The starting index at which to compute the hash.</param>
      <param name="count">The number of bytes to hash.</param>
      <param name="signature">The signature data to be verified.</param>
      <param name="hashAlgorithm">The hash algorithm used to create the hash value of the data.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.  
-or-  
<paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero.  
-or-  
<paramref name="count" /> is less than zero.  
-or-  
<paramref name="offset" /> + <paramref name="count" /> - 1 results in an index that is beyond the upper bound of <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.</summary>
      <param name="data">The signed data.</param>
      <param name="signature">The signature data to be verified.</param>
      <param name="hashAlgorithm">The hash algorithm used to create the hash value of the data.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.  
-or-  
<paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <param name="data" />
      <param name="signature" />
      <param name="hashAlgorithm" />
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies a digital signature against the specified hash value.</summary>
      <param name="hash">The hash value of a block of data.</param>
      <param name="signature">The digital signature to be verified.</param>
      <returns>
        <see langword="true" /> if the hash value equals the decrypted signature; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="hash" />
      <param name="signature" />
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> specifies an invalid length.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class whose public/private key pair is generated over the specified curve.</summary>
      <param name="curve">The curve used to generate the public/private key pair.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">if <paramref name="curve" /> does not contain an Oid with a FriendlyName.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)">
      <summary>Exports the key and explicit curve parameters used by the Elliptic curve cryptography (ECC) object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The key and explicit curve parameters used by the ECC object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while obtaining the curve values.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Explicit export is not supported by this platform. Windows 10 or higher is required.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)">
      <summary>Exports the key used by the Elliptic curve cryptography (ECC) object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object. If the key was created as a named curve, the <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> field contains named curve parameters; otherwise, it contains explicit parameters.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The key and named curve parameters used by the ECC object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while obtaining the curve values.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Generates a key to use for the ECDsaCng algorithm.</summary>
      <param name="curve">The curve to use to generate the key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> does not validate.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when signing and verifying data.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Replaces the existing key that the current instance is working with by creating a new <see cref="T:System.Security.Cryptography.CngKey" /> for the parameters structure.</summary>
      <param name="parameters">The curve parameters.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> does not contain valid values.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="parameters" /> references a curve that cannot be imported.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="parameters" /> references a curve that is not supported by this platform.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>Gets or sets the key to use when signing and verifying data.</summary>
      <returns>An object that specifies the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.KeySize" />
    <member name="P:System.Security.Cryptography.ECDsaCng.LegalKeySizes" />
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>Generates a signature for the specified data.</summary>
      <param name="data">The message data to be signed.</param>
      <returns>A digital signature for the specified data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>Generates a digital signature for the specified length of data, beginning at the specified offset.</summary>
      <param name="data">The message data to be signed.</param>
      <param name="offset">The location in the string at which to start signing.</param>
      <param name="count">The length of the string, in characters, following <paramref name="offset" /> that will be signed.</param>
      <returns>A digital signature for the specified length of data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="offset" /> caused reading outside the bounds of the data string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>Generates a signature for the specified data stream, reading to the end of the stream.</summary>
      <param name="data">The data stream to be signed.</param>
      <returns>A digital signature for the specified data stream.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>Generates a signature for the specified hash value.</summary>
      <param name="hash">The hash value of the data to be signed.</param>
      <returns>A digital signature for the specified hash value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <returns>A string object that contains the key information, serialized to an XML string according to the requested format.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>Verifies the digital signature of the specified data.</summary>
      <param name="data">The data that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>Verifies a signature for the specified length of data, beginning at the specified offset.</summary>
      <param name="data">The data that was signed.</param>
      <param name="offset">The location in the data at which the signed data begins.</param>
      <param name="count">The length of the data, in characters, following <paramref name="offset" /> that will be signed.</param>
      <param name="signature">The signature to be verified.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less then zero.  
-or-  
<paramref name="offset" /> or <paramref name="count" /> is larger than the length of the byte array passed in the <paramref name="data" /> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>Verifies the digital signature of the specified data stream, reading to the end of the stream.</summary>
      <param name="data">The data stream that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies the specified digital signature against a specified hash value.</summary>
      <param name="hash">The hash value of the data to be verified.</param>
      <param name="signature">The digital signature of the data to be verified against the hash value.</param>
      <returns>
        <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <param name="hash" />
      <param name="signature" />
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>Defines XML serialization formats for elliptic curve keys.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>An XML serialization format described in RFC 4050, "Using the Elliptic Curve Signature Algorithm (ECDSA) for XML Digital Signatures."</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>Represents the standard parameters for the elliptic curve cryptography (ECC) algorithm.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>Represents the curve associated with the public key (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) and the optional private key (<see cref="F:System.Security.Cryptography.ECParameters.D" />).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>Represents the private key <see langword="D" /> for the elliptic curve cryptography (ECC) algorithm, stored in big-endian format.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>Represents the public key <see langword="Q" /> for the elliptic curve cryptography (ECC) algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>Validates the current object.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key or curve parameters are not valid for the current curve type.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>Represents a (X,Y) coordinate pair for elliptic curve cryptography (ECC) structures.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>Represents the X coordinate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Represents the Y coordinate.</summary>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>Provides support for computing a hash or Hash-based Message Authentication Code (HMAC) value incrementally across several segments.</summary>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>Gets the name of the algorithm being performed. HMAC algorithms are prepended with "HMAC" to distinguish them from an unkeyed digest.</summary>
      <returns>The name of the algorithm being performed.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>Appends the specified data to the data already processed in the hash or HMAC.</summary>
      <param name="data">The data to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Security.Cryptography.IncrementalHash" /> object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>Appends the specified number of bytes from the specified data, starting at the specified offset, to the data already processed in the hash or Hash-based Message Authentication Code (HMAC).</summary>
      <param name="data">The data to process.</param>
      <param name="offset">The offset into the byte array from which to begin using data.</param>
      <param name="count">The number of bytes to use from <paramref name="data" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="offset" /> is negative.  
-or-  
<paramref name="count" /> is larger than the length of <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the data length.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Security.Cryptography.IncrementalHash" /> object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <param name="data" />
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Creates an <see cref="T:System.Security.Cryptography.IncrementalHash" /> for the specified algorithm.</summary>
      <param name="hashAlgorithm">The name of the hash algorithm to perform.</param>
      <returns>An <see cref="T:System.Security.Cryptography.IncrementalHash" /> instance ready to compute the hash algorithm specified by <paramref name="hashAlgorithm" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or an empty string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> is not a known hash algorithm.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Creates an <see cref="T:System.Security.Cryptography.IncrementalHash" /> for the Hash-based Message Authentication Code (HMAC) algorithm using the specified hash algorithm and key.</summary>
      <param name="hashAlgorithm">The name of the hash algorithm to perform within the HMAC.</param>
      <param name="key">The secret key for the HMAC. The key can be of any length, but a key longer than the output size of the specified hash algorithm will be hashed to derive a correctly-sized key. Therefore, the recommended size of the secret key is the output size of the specified hash algorithm.</param>
      <returns>An instance of the <see cref="T:System.Security.Cryptography.IncrementalHash" /> class ready to compute the specified hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or an empty string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> is not a known hash algorithm.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Security.Cryptography.IncrementalHash" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>Retrieves the hash or Hash-based Message Authentication Code (HMAC) for the data accumulated from prior calls to the <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" /> method,  and resets the object to its initial state.</summary>
      <returns>The computed hash or HMAC.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Security.Cryptography.IncrementalHash" /> object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.RSACng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the RSA algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACng" /> class with a random 2,048-bit key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACng" /> class with a randomly generated key of the specified size.</summary>
      <param name="keySize">The size of the key to generate in bits.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> is not valid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACng" /> class with the specified key.</summary>
      <param name="key">The key to use for RSA operations.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a valid RSA key.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Decrypts input data using the specified padding mode.</summary>
      <param name="data">The data to decrypt.</param>
      <param name="padding">The padding mode.</param>
      <returns>The decrypted data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.  
-or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> does not equal <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1" />, or else the <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> of <paramref name="padding" /> does not equal <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Encrypts the input data using the specified padding.</summary>
      <param name="data">The data to encrypt.</param>
      <param name="padding">The padding mode.</param>
      <returns>The encrypted data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.  
-or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> does not equal <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> or <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)">
      <summary>Exports the key used by the RSA object into a <see cref="T:System.Security.Cryptography.RSAParameters" /> object.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>The key used by the RSA object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>Replaces the existing key that the current instance is working with by creating a new <see cref="T:System.Security.Cryptography.CngKey" /> for the parameters structure.</summary>
      <param name="parameters">The RSA parameters.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains neither an exponent nor a modulus.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> is not a valid RSA key.  
-or-  
<paramref name="parameters" /> is a full key pair and the default KSP is used.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.Key">
      <summary>Gets the key that will be used by the <see cref="T:System.Security.Cryptography.RSACng" /> object for any cryptographic operation that it performs.</summary>
      <returns>The key used by the <see cref="T:System.Security.Cryptography.RSACng" /> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.LegalKeySizes" />
    <member name="M:System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Signs data that was hashed by using the specified hashing algorithm and padding mode.</summary>
      <param name="hash">The hash to sign.</param>
      <param name="hashAlgorithm">The hash algorithm name.</param>
      <param name="padding">The padding mode.</param>
      <returns>The signed data.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> is <see langword="null" />.  
-or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> does not equal <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> or <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Attempts to decrypt the specified data using the private key.</summary>
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSACng.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Attempts to encrypt the specified data using the public key.</summary>
      <param name="data" />
      <param name="destination" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSACng.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <param name="hash" />
      <param name="destination" />
      <param name="hashAlgorithm" />
      <param name="padding" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifies data that was signed and already hashed with the specified algorithm and padding mode.</summary>
      <param name="hash">The hash to verify.</param>
      <param name="signature">The signature of the data.</param>
      <param name="hashAlgorithm">The hash algorithm name.</param>
      <param name="padding">The padding mode.</param>
      <returns>
        <see langword="true" /> if the signature verifies for the hash; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> is <see langword="null" />.  
-or-  
<paramref name="signature" /> is <see langword="null" />.  
-or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> does not equal <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> or <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.  
-or-  
The signature is badly formatted. (In the .NET Framework 4.6 and 4.6.1 only; starting with the .NET Framework 4.6.2, the method returns <see langword="false" /> if a signature is badly formatted.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <param name="hash" />
      <param name="signature" />
      <param name="hashAlgorithm" />
      <param name="padding" />
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA256" /> algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA384" /> algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA512" /> algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Triple Data Encryption Standard (3DES) algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.TripleDESCng" /> class with an ephemeral key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.TripleDESCng" /> class with the specified key name, which represents an existing persisted 3DES key.</summary>
      <param name="keyName">The name of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.TripleDESCng" /> class with the specified key name, which represents an existing persisted 3DES key, and the specified key storage provider (KSP).</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.  
-or-  
<paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.TripleDESCng" /> class with the specified key name, which represents an existing persisted 3DES key,  the specified key storage provider (KSP) and key open options.</summary>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <param name="openOptions">A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is <see langword="null" />.  
-or-  
<paramref name="provider" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor">
      <summary>Creates a symmetric 3DES decryptor object with the current key and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric 3DES decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric 3DES decryptor object with the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the 3DES algorithm. The key size must be 192 bits.</param>
      <param name="rgbIV">The initialization vector to use for the 3DES algorithm.</param>
      <returns>A symmetric 3DES decryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> is not a valid size for this algorithm.  
-or-  
<paramref name="rgbIV" /> size does not match the block size for this algorithm.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> is a known weak key for this algorithm and cannot be used.  
-or-  
<paramref name="rgbIV" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor">
      <summary>Creates a symmetric 3DES encryptor object using the current key and initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>A symmetric 3DES encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric 3DES encryptor object with the specified key and initialization vector (IV).</summary>
      <param name="rgbKey">The secret key to use for the 3DES algorithm. The key size must be 192 bits.</param>
      <param name="rgbIV">The initialization vector to use for the 3DES algorithm.</param>
      <returns>A symmetric 3DES encryptor object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> is not a valid size for this algorithm.  
-or-  
<paramref name="rgbIV" /> size does not match the block size for this algorithm.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> is a known weak key for this algorithm and cannot be used.  
-or-  
<paramref name="rgbIV" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the 3DES algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateKey">
      <summary>Generates a random key to use for the 3DES algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.Key">
      <summary>Gets or sets the key for the <see cref="T:System.Security.Cryptography.TripleDESCng" /> algorithm.</summary>
      <returns>The key for the <see cref="T:System.Security.Cryptography.TripleDESCng" /> algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.TripleDESCng" /> algorithm.</summary>
      <returns>The size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.TripleDESCng" /> algorithm.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.CertificateRequest">
      <summary>Represents an abstraction over the PKCS#10 CertificationRequestInfo and the X.509 TbsCertificate.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName,System.Security.Cryptography.ECDsa,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.CertificateRequest" /> class using the specified subject name, ECDSA key, and hash algorithm.</summary>
      <param name="subjectName">The parsed representation of the subject name for the certificate or certificate request.</param>
      <param name="key">An ECDSA key whose public key material will be included in the certificate or certificate request. If the <see cref="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(System.DateTimeOffset,System.DateTimeOffset)" /> method is called, this key is used as a private key.</param>
      <param name="hashAlgorithm">The hash algorithm to use when signing the certificate or certificate request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is <see langword="null" />.
 -or-  
<paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName,System.Security.Cryptography.RSA,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.CertificateRequest" /> class using the specified subject name, RSA key, and hash algorithm.</summary>
      <param name="subjectName">The parsed representation of the subject name for the certificate or certificate request.</param>
      <param name="key">A RSA key whose public key material will be included in the certificate or certificate request. If the <see cref="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(System.DateTimeOffset,System.DateTimeOffset)" /> method is called, this key is used as a private key.</param>
      <param name="hashAlgorithm">The hash algorithm to use when signing the certificate or certificate request.</param>
      <param name="padding">The RSA signature padding to apply if self-signing or being signed with an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is <see langword="null" />.
 -or-  
<paramref name="key" /> is <see langword="null" />.
 -or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName,System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.CertificateRequest" /> class using the specified subject name, encoded public key, and hash algorithm.</summary>
      <param name="subjectName">The parsed representation of the subject name for the certificate or certificate request.</param>
      <param name="publicKey">The encoded representation of the public key to include in the certificate or certificate request.</param>
      <param name="hashAlgorithm">The hash algorithm to use when signing the certificate or certificate request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is <see langword="null" />.
 -or-  
<paramref name="publicKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.#ctor(System.String,System.Security.Cryptography.ECDsa,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.CertificateRequest" /> class using the specified subject name, ECDSA key, and hash algorithm.</summary>
      <param name="subjectName">The string representation of the subject name for the certificate or certificate request.</param>
      <param name="key">An ECDSA key whose public key material will be included in the certificate or certificate request. If the <see cref="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(System.DateTimeOffset,System.DateTimeOffset)" /> method is called, this key is used as a private key.</param>
      <param name="hashAlgorithm">The hash algorithm to use when signing the certificate or certificate request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is <see langword="null" />.
 -or-  
<paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.#ctor(System.String,System.Security.Cryptography.RSA,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.CertificateRequest" /> class using the specified subject name, RSA key, and hash algorithm.</summary>
      <param name="subjectName">The string representation of the subject name for the certificate or certificate request.</param>
      <param name="key">A RSA key whose public key material will be included in the certificate or certificate request. If the <see cref="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(System.DateTimeOffset,System.DateTimeOffset)" /> method is called, this key is used as a private key.</param>
      <param name="hashAlgorithm">The hash algorithm to use when signing the certificate or certificate request.</param>
      <param name="padding">The RSA signature padding to apply if self-signing or being signed with an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subjectName" /> is <see langword="null" />.
 -or-  
<paramref name="key" /> is <see langword="null" />.
 -or-  
<paramref name="padding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.CertificateRequest.CertificateExtensions">
      <summary>Gets the X.509 Certificate Extensions collection, which is a mutable collection, to include in the certificate or certificate request.</summary>
      <returns>The X.509 Certificate Extensions collection to include in the certificate or certificate request.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.Create(System.Security.Cryptography.X509Certificates.X500DistinguishedName,System.Security.Cryptography.X509Certificates.X509SignatureGenerator,System.DateTimeOffset,System.DateTimeOffset,System.Byte[])">
      <summary>Signs the current certificate request to create a chain-signed or self-signed certificate.</summary>
      <param name="issuerName">The <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> for the issuer.</param>
      <param name="generator">An <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> object representing the issuing certificate authority.</param>
      <param name="notBefore">The oldest date and time when this certificate is considered valid. Typically <see cref="P:System.DateTimeOffset.UtcNow" />, plus or minus a few seconds.</param>
      <param name="notAfter">The date and time when this certificate is no longer considered valid.</param>
      <param name="serialNumber">The serial number to use for the new certificate. This value should be unique per issuer. The value is interpreted as an unsigned integer of arbitrary size in big-endian byte ordering. RFC 3280 recommends confining it to 20 bytes or less.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with the specified values. The returned object won't assert <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuerCertificate" /> is <see langword="null" />.
 -or-
<paramref name="generator" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="notAfter" /> represents a date and time that happens earlier than <paramref name="notBefore" />.
 -or-
<paramref name="serialNumber" /> is zero length or <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the signing operation.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.Create(System.Security.Cryptography.X509Certificates.X509Certificate2,System.DateTimeOffset,System.DateTimeOffset,System.Byte[])">
      <summary>Creates a certificate using the established subject, key, and optional extensions using the specified certificate as the issuer.</summary>
      <param name="issuerCertificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> instance representing the issuing Certificate Authority (CA).</param>
      <param name="notBefore">The oldest date and time when this certificate is considered valid. Typically <see cref="P:System.DateTimeOffset.UtcNow" />, plus or minus a few seconds.</param>
      <param name="notAfter">The date and time when this certificate is no longer considered valid.</param>
      <param name="serialNumber">The serial number to use for the new certificate. This value should be unique per issuer. The value is interpreted as an unsigned integer of arbitrary size in big-endian byte ordering. RFC 3280 recommends confining it to 20 bytes or less.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with the specified values. The returned object won't assert <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuerCertificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="issuerCertificate" /> doesn't contain a private key.
 -or-
The type of signing key represented by <paramref name="issuerCertificate" /> couldn't be determined.
 -or-
<paramref name="notAfter" /> represents a date and time that happens earlier than <paramref name="notBefore" />.
 -or-
<paramref name="serialNumber" /> is zero length or <see langword="null" />.
 -or-
<paramref name="issuerCertificate" /> has a different key algorithm than the requested certificate.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="issuerCertificate" /> is an RSA certificate and the current object was created using a constructor that doesn't accept a <paramref name="padding" /> parameter.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Creates a self-signed certificate using the established subject, key, and optional extensions.</summary>
      <param name="notBefore">The oldest date and time when this certificate is considered valid. Typically <see cref="P:System.DateTimeOffset.UtcNow" />, plus or minus a few seconds.</param>
      <param name="notAfter">The date and time when this certificate is no longer considered valid.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object with the specified values. The returned object will assert <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="notAfter" /> represents a date and time that happens earlier than <paramref name="notBefore" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current object was created using a constructor that doesn't accept a signing key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the certificate creation process.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSigningRequest">
      <summary>Creates an ASN.1 DER-encoded PKCS#10 CertificationRequest value representing the state of the current object.</summary>
      <returns>A DER-encoded certificate signing request.</returns>
      <exception cref="T:System.InvalidOperationException">The current object was created using a constructor that doesn't accept a signing key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSigningRequest(System.Security.Cryptography.X509Certificates.X509SignatureGenerator)">
      <summary>Creates an ASN.1 DER-encoded PKCS#10 CertificationRequest representing the current state of the current object using the provided signature generator.</summary>
      <param name="signatureGenerator">The signature generator with which to sign the request.</param>
      <returns>A DER-encoded certificate signing request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signatureGenerator" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.CertificateRequest.HashAlgorithm">
      <summary>Gets the hash algorithm to use when signing the certificate or certificate request.</summary>
      <returns>The hash algorithm to use when signing the certificate or certificate request.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.CertificateRequest.PublicKey">
      <summary>Gets a representation of the public key for the certificate or certificate request.</summary>
      <returns>The representation of the public key for the certificate or certificate request.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.CertificateRequest.SubjectName">
      <summary>Gets the X.500 Distinguished Name to use as the Subject in a created certificate or certificate request.</summary>
      <returns>The X.500 Distinguished Name to use as the Subject in a created certificate or certificate request.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.DSACertificateExtensions">
      <summary>Provides extension methods for retrieving <see cref="T:System.Security.Cryptography.DSA" /> implementations for the public and private keys of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.DSA)">
      <summary>Combines a private key with the public key of a <see cref="T:System.Security.Cryptography.DSA" /> certificate to generate a new DSA certificate.</summary>
      <param name="certificate">The DSA certificate.</param>
      <param name="privateKey">The private DSA key.</param>
      <returns>A new DSA certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />. The input DSA certificate object isn't modified.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.ArgumentException">The certificate doesn't have a public key.  
 -or-  
 The specified private key doesn't match the public key for the specified certificate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.DSA" /> private key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The private key, or <see langword="null" /> if the certificate does not have a DSA private key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.DSA" /> public key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The public key, or <see langword="null" /> if the certificate does not have a DSA public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Windows reports an error. See the <see cref="P:System.Exception.Message" /> property for more information.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions">
      <summary>Provides extension methods for retrieving <see cref="T:System.Security.Cryptography.ECDsa" /> implementations for the     public and private keys of a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> certificate.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)">
      <summary>Combines a private key with the public key of an <see cref="T:System.Security.Cryptography.ECDsa" /> certificate to generate a new ECDSA certificate.</summary>
      <param name="certificate">The ECDSA certificate.</param>
      <param name="privateKey">The private ECDSA key.</param>
      <returns>A new ECDSA certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />. The input ECDSA certificate object isn't modified.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.ArgumentException">The certificate doesn't have a public key.  
 -or-  
 The specified private key doesn't match the public key for the specified certificate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.ECDsa" /> private key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> certificate.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The private key, or <see langword="null" /> if the certificate does not have an ECDsa private key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.ECDsa" /> public key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> certificate.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The public key, or <see langword="null" /> if the certificate does not have an ECDsa public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The handle is invalid.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.RSACertificateExtensions">
      <summary>Provides extension methods for retrieving <see cref="T:System.Security.Cryptography.RSA" /> implementations for the public and private keys of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.RSA)">
      <summary>Combines a private key with the public key of an <see cref="T:System.Security.Cryptography.RSA" /> certificate to generate a new RSA certificate.</summary>
      <param name="certificate">The RSA certificate.</param>
      <param name="privateKey">The private RSA key.</param>
      <returns>A new RSA certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />. The input RSA certificate object isn't modified.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.ArgumentException">The certificate doesn't have a public key.  
 -or-  
 The specified private key doesn't match the public key for the specified certificate.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.RSA" /> private key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The private key, or <see langword="null" /> if the certificate does not have an RSA private key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.RSA" /> public key from the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
      <param name="certificate">The certificate.</param>
      <returns>The public key, or <see langword="null" /> if the certificate does not have an RSA public key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Windows reports an error. See the <see cref="P:System.Exception.Message" /> property for more information.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder">
      <summary>This class facilitates building a subject alternative name extension for an X.509 certificate.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.AddDnsName(System.String)">
      <summary>Adds a DNS Name to the subject alternative name extension.</summary>
      <param name="dnsName">The DNS name to be added.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dnsName" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.AddEmailAddress(System.String)">
      <summary>Adds an email address to the subject alternative name extension.</summary>
      <param name="emailAddress">The email address to be added.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="emailAddress" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.AddIpAddress(System.Net.IPAddress)">
      <summary>Adds an IP address to the subject alternative name extension.</summary>
      <param name="ipAddress">The IP address to be added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipAddress" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.AddUri(System.Uri)">
      <summary>Adds a Uniform Resource Identifier (URI) to the subject alternative name extension.</summary>
      <param name="uri">The URI to be added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.AddUserPrincipalName(System.String)">
      <summary>Adds a User Principal Name (UPN) to the subject alternative name extension.</summary>
      <param name="upn">The UPN to be added.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="upn" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder.Build(System.Boolean)">
      <summary>Returns an <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> object that represents the encoded subject alternative name extension.</summary>
      <param name="critical">
        <see langword="true" /> to mark the extension as <see cref="P:System.Security.Cryptography.X509Certificates.X509Extension.Critical" />; otherwise, <see langword="false" />. The default value is <see langword="false" />.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> object that represents the encoded subject alternative name extension.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator">
      <summary>Base class for building encoded signatures as needed for X.509 certificates.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.BuildPublicKey">
      <summary>When overridden in a derived class, produces the certificate's public key that has the correctly encoded <see cref="T:System.Security.Cryptography.Oid" />, public key parameters and public key values.</summary>
      <returns>The certificate's public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.CreateForECDsa(System.Security.Cryptography.ECDsa)">
      <summary>Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> object for ECDSA signatures using the specified private key.</summary>
      <param name="key">The private key.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> object for ECDSA signatures.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.CreateForRSA(System.Security.Cryptography.RSA,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> object for RSA signatures using the specified private key and padding mode.</summary>
      <param name="key">The private key.</param>
      <param name="signaturePadding">The padding mode.</param>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509SignatureGenerator" /> object for RSA signatures.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.  
-or-  
<paramref name="signaturePadding" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The specified padding mode is not valid for this algorithm.</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.GetSignatureAlgorithmIdentifier(System.Security.Cryptography.HashAlgorithmName)">
      <summary>When overridden in a derived class, encodes the X.509 algorithm identifier for this signature.</summary>
      <param name="hashAlgorithm">The hash algorithm to use for encoding.</param>
      <returns>The encoded value for the X.509 algorithm identifier.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.PublicKey">
      <summary>Gets the public key associated with the private key with which signatures are being generated.</summary>
      <returns>The public key associated with the private key with which signatures are being generated.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SignatureGenerator.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>When overridden in a derived class, produces a signature for the specified data using the specified hash algorithm and encodes the results appropriately for X.509 signature values.</summary>
      <param name="data">The input data for which to produce the signature.</param>
      <param name="hashAlgorithm">The hash algorithm to use to produce the signature.</param>
      <returns>The X.509 signature for the specified data.</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Specifies whether a lock can be entered multiple times by the same thread.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>A thread can enter a lock recursively. Some classes may restrict this capability.</summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</summary>
      <param name="recursionPolicy">One of the enumeration values that specifies the lock recursion policy.</param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Gets the total number of unique threads that have entered the lock in read mode.</summary>
      <returns>The number of unique threads that have entered the lock in read mode.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.  
-or-  
<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.  
-or-  
<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Tries to enter the lock in read mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.  
 -or-  
 The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.  
 -or-  
 The recursion number would exceed the capacity of the counter. This limit is so large that applications should never encounter this exception.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Tries to enter the lock in upgradeable mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.  
 -or-  
 The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Tries to enter the lock in write mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.  
 -or-  
 The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in read mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in upgradeable mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in write mode.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in read mode.</summary>
      <returns>
        <see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</summary>
      <returns>
        <see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in write mode.</summary>
      <returns>
        <see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</summary>
      <returns>One of the enumeration values that specifies the lock recursion policy.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</summary>
      <returns>0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or n if the thread has entered the lock recursively n - 1 times.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or n if the thread has entered upgradeable mode recursively n - 1 times.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or n if the thread has entered write mode recursively n - 1 times.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Tries to enter the lock in read mode, with an optional integer time-out.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in read mode, with an optional time-out.</summary>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  
 -or-  
 The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  
 -or-  
 The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.  
 -or-  
 The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.  
 -or-  
 The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.  
 -or-  
 The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in read mode.</summary>
      <returns>The total number of threads that are waiting to enter read mode.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</summary>
      <returns>The total number of threads that are waiting to enter upgradeable mode.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in write mode.</summary>
      <returns>The total number of threads that are waiting to enter write mode.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <param name="task">The <see langword="Task&lt;Task&gt;" /> (C#) or <see langword="Task (Of Task)" /> (Visual Basic) to unwrap.</param>
      <returns>A Task that represents the asynchronous operation of the provided <see langword="System.Threading.Tasks.Task(Of Task)" />.</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</summary>
      <param name="task">The <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic) to unwrap.</param>
      <typeparam name="TResult">The type of the task's result.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of the provided <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic).</returns>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
  </members>
</doc>