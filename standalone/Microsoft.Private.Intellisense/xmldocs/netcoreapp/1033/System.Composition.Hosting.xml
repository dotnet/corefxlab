<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Composition.Hosting</name>
  </assembly>
  <members>
    <member name="T:System.Composition.Hosting.CompositionHost">
      <summary>A lightweight composition container that is assembled from specified providers.</summary>
    </member>
    <member name="M:System.Composition.Hosting.CompositionHost.CreateCompositionHost(System.Collections.Generic.IEnumerable{System.Composition.Hosting.Core.ExportDescriptorProvider})">
      <summary>Creates the composition host with the specified collection of providers.</summary>
      <param name="providers">The providers, which contain export descriptions for the parts being composed.</param>
      <returns>The created composition host.</returns>
    </member>
    <member name="M:System.Composition.Hosting.CompositionHost.CreateCompositionHost(System.Composition.Hosting.Core.ExportDescriptorProvider[])">
      <summary>Creates the composition host with the specified array of providers.</summary>
      <param name="providers">The providers, which contain export descriptions for the parts being composed.</param>
      <returns>The created composition host.</returns>
    </member>
    <member name="M:System.Composition.Hosting.CompositionHost.Dispose">
      <summary>Releases the composition host and any globally shared parts.</summary>
    </member>
    <member name="M:System.Composition.Hosting.CompositionHost.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)">
      <summary>Retrieves the specified export from the composition context.</summary>
      <param name="contract">The export to retrieve.</param>
      <param name="export">When this method returns, contains an instance of the export if available; otherwise, <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the export was retrieved; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Composition.Hosting.CompositionFailedException">There are too many exports.</exception>
    </member>
    <member name="T:System.Composition.Hosting.Core.CompositeActivator">
      <summary>The delegate that allows instances of parts and exports to be accessed during composition.</summary>
      <param name="context">The context in which the part or export is being accessed.</param>
      <param name="operation">The operation within which the activation is occurring.</param>
      <returns>The activated part or export.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.CompositionDependency">
      <summary>Represents a dependency that a part must have in order to fulfill an <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise" />. This class is used by the composition engine during initialization to determine whether the composition can be made, and if not, what error to provide.</summary>
    </member>
    <member name="P:System.Composition.Hosting.Core.CompositionDependency.Contract">
      <summary>Gets the contract required by the dependency.</summary>
      <returns>The contract required by the dependency.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.CompositionDependency.IsPrerequisite">
      <summary>Gets a value indicating whether the dependency is a prerequisite that must be satisfied before any exports can be retrieved from the dependent part.</summary>
      <returns>
        <see langword="true" /> if the dependency is a prerequisite; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionDependency.Missing(System.Composition.Hosting.Core.CompositionContract,System.Object)">
      <summary>Constructs a placeholder for a missing dependency.</summary>
      <param name="contract">"&gt;The contract required by the dependency.</param>
      <param name="site">A marker used to identify the individual dependency among those on the dependent part.</param>
      <returns>The dependency that acts as a placeholder.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionDependency.Oversupplied(System.Composition.Hosting.Core.CompositionContract,System.Collections.Generic.IEnumerable{System.Composition.Hosting.Core.ExportDescriptorPromise},System.Object)">
      <summary>Constructs a placeholder for a dependency that has too many supplied values.</summary>
      <param name="contract">The contract required by the dependency.</param>
      <param name="targets">A collection of the supplied values.</param>
      <param name="site">A marker for the dependency.</param>
      <returns>The placeholder dependency.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionDependency.Satisfied(System.Composition.Hosting.Core.CompositionContract,System.Composition.Hosting.Core.ExportDescriptorPromise,System.Boolean,System.Object)">
      <summary>Constructs a dependency on the specified target.</summary>
      <param name="contract">The contract required by the dependency.</param>
      <param name="target">The dependency target. A <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise" /> from another part that this part is dependent on.</param>
      <param name="isPrerequisite">
        <see langword="true" /> to indicate that the dependency is a prerequisite that must be satisfied before any exports can be retrieved from the dependent part; otherwise, <see langword="false" />.</param>
      <param name="site">A marker used to identify the individual dependency among those on the dependent part.</param>
      <returns>The constructed dependency.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.CompositionDependency.Site">
      <summary>Gets a marker used to identify the dependency among those on the dependent part.</summary>
      <returns>The marker.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.CompositionDependency.Target">
      <summary>Gets the export descriptor promise that the dependecy is on.</summary>
      <returns>The export descriptor promise.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionDependency.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.CompositionDependency" /> object.</summary>
      <returns>The string representation of <see cref="T:System.Composition.Hosting.Core.CompositionDependency" />.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.CompositionOperation">
      <summary>Represents a single composition operation.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionOperation.AddNonPrerequisiteAction(System.Action)">
      <summary>Specifies an action that can run after all prerequisite part dependencies have been satisfied.</summary>
      <param name="action">The action to run.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionOperation.AddPostCompositionAction(System.Action)">
      <summary>Specifies an action to run after all composition has completed, as indicated by the <see cref="T:System.Composition.OnImportsSatisfiedAttribute" />.</summary>
      <param name="action">The action to run.</param>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionOperation.Dispose">
      <summary>Releases all locks held during the composition operation.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.CompositionOperation.Run(System.Composition.Hosting.Core.LifetimeContext,System.Composition.Hosting.Core.CompositeActivator)">
      <summary>Runs the composition operation starting within the specified lifetime context, driven by the specified activator.</summary>
      <param name="outermostLifetimeContext">The context in which to begin the operation (the operation can flow to the parents of the context if required).</param>
      <param name="compositionRootActivator">The activator that drives the operation.</param>
      <returns>The composed object graph.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.DependencyAccessor">
      <summary>Allows <see cref="T:System.Composition.Hosting.Core.ExportDescriptorProvider" /> objects to locate their dependencies.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.DependencyAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.DependencyAccessor" /> class.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.DependencyAccessor.GetPromises(System.Composition.Hosting.Core.CompositionContract)">
      <summary>Retrieves all promises for the specified contract.</summary>
      <param name="exportKey">The export key that the promises must supply.</param>
      <returns>A collection of promises for the contract.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.DependencyAccessor.ResolveDependencies(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean)">
      <summary>Resolves dependencies on all implementations of a contract.</summary>
      <param name="site">A tag that describes the dependency site.</param>
      <param name="contract">The contract required by the site.</param>
      <param name="isPrerequisite">
        <see langword="true" /> to indicate that the dependency must be satisfied before exports are made available; otherwise, <see langword="false" />.</param>
      <returns>A collection of resolved dependencies.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.DependencyAccessor.ResolveRequiredDependency(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean)">
      <summary>Resolves a required dependency on one implementation of a contract.</summary>
      <param name="site">A tag that describes the dependency site.</param>
      <param name="contract">The contract required by the site.</param>
      <param name="isPrerequisite">
        <see langword="true" /> to indicate that the dependency must be satisfied before exports are made available; otherwise, <see langword="false" />.</param>
      <returns>The resolved dependency.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.DependencyAccessor.TryResolveOptionalDependency(System.Object,System.Composition.Hosting.Core.CompositionContract,System.Boolean,System.Composition.Hosting.Core.CompositionDependency@)">
      <summary>Resolves an optional dependency on one implementation of a contract.</summary>
      <param name="site">A tag that describes the dependency site.</param>
      <param name="contract">The contract required by the site.</param>
      <param name="isPrerequisite">
        <see langword="true" /> to indicate that the dependency must be satisfied before exports are made available; otherwise, <see langword="false" />.</param>
      <param name="dependency">After this method returns, contains the resolved dependency or <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the dependency was resolved; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.ExportDescriptor">
      <summary>Describes an export of a part known to the composition engine.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.ExportDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptor.Activator">
      <summary>Gets the activator used to retrieve instances of the export.</summary>
      <returns>The activator.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptor.Create(System.Composition.Hosting.Core.CompositeActivator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Creates an export descriptor that has the specified activator and metadata.</summary>
      <param name="activator">The activator used to retrieve instances of the export.</param>
      <param name="metadata">The metadata associated with the export.</param>
      <returns>The created descriptor.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptor.Metadata">
      <summary>Gets the metadata for the export.</summary>
      <returns>A collection of metadata.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.ExportDescriptorPromise">
      <summary>Represents an export descriptor that an available part can provide.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptorPromise.#ctor(System.Composition.Hosting.Core.CompositionContract,System.String,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{System.Composition.Hosting.Core.CompositionDependency}},System.Func{System.Collections.Generic.IEnumerable{System.Composition.Hosting.Core.CompositionDependency},System.Composition.Hosting.Core.ExportDescriptor})">
      <summary>Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise" /> class.</summary>
      <param name="contract">The promised contract.</param>
      <param name="origin">A description of the promise's origin. For example, a part type.</param>
      <param name="isShared">
        <see langword="true" /> if the promise is shared, otherwise <see langword="false" />.</param>
      <param name="dependencies">A function that provides the dependencies required to fulfill the promise.</param>
      <param name="getDescriptor">A function that provides the promised descriptor.</param>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptorPromise.Contract">
      <summary>Gets the contract fulfilled by this promise.</summary>
      <returns>The contract</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptorPromise.Dependencies">
      <summary>Gets the dependencies that are required to fulfill this promise.</summary>
      <returns>A collection of dependencies.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptorPromise.GetDescriptor">
      <summary>Retrieves the promised descriptor.</summary>
      <returns>The descriptor.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptorPromise.IsShared">
      <summary>Gets a value that indicates whether the promise is shared.</summary>
      <returns>
        <see langword="true" /> if the promise is shared within some context; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Composition.Hosting.Core.ExportDescriptorPromise.Origin">
      <summary>Gets a description of where the promise originates (for example, a part type), used to provide readable errors.</summary>
      <returns>A description of the promise's origin.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptorPromise.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise" /> object.</summary>
      <returns>The string representation of this <see cref="T:System.Composition.Hosting.Core.ExportDescriptorPromise" /> object.</returns>
    </member>
    <member name="T:System.Composition.Hosting.Core.ExportDescriptorProvider">
      <summary>Provides the description of an export for a part known to the composition engine.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.ExportDescriptorProvider" /> class.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.ExportDescriptorProvider.GetExportDescriptors(System.Composition.Hosting.Core.CompositionContract,System.Composition.Hosting.Core.DependencyAccessor)">
      <summary>Retrieves promise export descriptors for the specified export key.</summary>
      <param name="contract">The export key required by another component.</param>
      <param name="descriptorAccessor">An accessor for the other descriptors in the composition.</param>
      <returns>A collection of promises for new export descriptors.</returns>
    </member>
    <member name="F:System.Composition.Hosting.Core.ExportDescriptorProvider.NoDependencies">
      <summary>Indicates a lack of dependencies.</summary>
    </member>
    <member name="F:System.Composition.Hosting.Core.ExportDescriptorProvider.NoExportDescriptors">
      <summary>Indicates a lack of export descriptors.</summary>
    </member>
    <member name="F:System.Composition.Hosting.Core.ExportDescriptorProvider.NoMetadata">
      <summary>Indicates a lack of metadata.</summary>
    </member>
    <member name="T:System.Composition.Hosting.Core.LifetimeContext">
      <summary>Represents a node in the lifetime tree.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)">
      <summary>Binds the lifetime of a disposable part to this lifetime context.</summary>
      <param name="instance">The part.</param>
      <exception cref="T:System.ObjectDisposedException">The operation was performed on a disposed object.</exception>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId">
      <summary>Generates an identifier that can be used to locate shared part instances.</summary>
      <returns>A new unique identifier.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.Dispose">
      <summary>Releases the lifetime context and any part instances bound to it.</summary>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)">
      <summary>Finds the broadest lifetime context within all of the specified sharing boundaries.</summary>
      <param name="sharingBoundary">The sharing boundary to find a lifetime context within.</param>
      <returns>The broadest lifetime context within all of the specified sharing boundaries.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)">
      <summary>Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</summary>
      <param name="sharingId">The ID of the shared part.</param>
      <param name="operation">An operation in which to create a part, if necessary.</param>
      <param name="creator">An activator that can activate a new part instance, if necessary.</param>
      <returns>The new or retrieved part.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</summary>
      <returns>The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</returns>
    </member>
    <member name="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)">
      <summary>Retrieves a contract instance from the composition context.</summary>
      <param name="contract">The contract.</param>
      <param name="export">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.Composition.Hosting.CompositionFailedException">No export was found for <paramref name="contract" />.</exception>
    </member>
  </members>
</doc>